{
  "profile": "Default",
  "groups": [
    {
      "name": "Modularization issues",
      "inspections": [
        {
          "shortName": "ModuleWithTooFewClasses",
          "displayName": "Module with too few classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports modules with too few classes. Overly small modules may indicate a too fragmented design.\n<!-- tooltip end -->\n<p>\n  Since this inspection requires a global code analysis, it is available only in <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b>, and it will not report in the editor.\n</p>\n<p>Use the <b>Minimum number of classes</b> field to specify the minimum number of classes a module may have.<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLanguageLevel",
          "displayName": "Inconsistent language level settings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports modules which depend on other modules with a higher language level. \n<p>Such dependencies should be removed or the language level of the module be increased.</p>\n<!-- tooltip end -->\n<p>\n  Since this inspection requires global code analysis, it is only available in the <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> dialog and it will not report in the editor.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassOnlyUsedInOneModule",
          "displayName": "Class only used from one other module",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes that:\n<ul>\n  <li>do not depend on any other class in their module</li>\n  <li>depend on classes from a different module</li>\n  <li>are a dependency only for classes from this other module</li>\n</ul>\n<p>Such classes could be moved into the module on which they depend.</p>\n<!-- tooltip end -->\n<p>\n  Since this inspection requires global code analysis, it is only available for <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and will not report in the editor.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassIndependentOfModule",
          "displayName": "Class independent of its module",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes that:\n<ul>\n  <li>do not depend on any other class in their module</li>\n  <li>are not a dependency for any other class in their module</li>\n</ul>\n<p>Such classes are an indication of ad-hoc or incoherent modularisation strategies,\n  and may often profitably be moved.</p>\n<!-- tooltip end -->\n<p>\n  Since this inspection requires global code analysis, it is only available for <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and will not report in the editor.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ModuleWithTooManyClasses",
          "displayName": "Module with too many classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports modules that contain too many classes. Overly large modules may indicate a lack of design clarity.\n<!-- tooltip end -->\n<p>Since this inspection requires a global code analysis, it is available only in <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b>, and it will not report in the editor.\n</p>\n<p>Use the <b>Maximum number of classes</b> field to specify the maximum number of classes a module may have.<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Ant",
      "inspections": [
        {
          "shortName": "AntDuplicateTargetsInspection",
          "displayName": "Duplicate targets",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports duplicate <code>targets</code> in\n        the current build file.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntMissingPropertiesFileInspection",
          "displayName": "Missing properties file",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n        Reports missing .properties files.\n      </td>\n  </tr>\n</table>\n</body>\n</html>"
        },
        {
          "shortName": "AntResolveInspection",
          "displayName": "Ant references resolve problems",
          "defaultSeverity": "ERROR",
          "pluginId": "AntSupport",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<table>\n  <tr>\n    <td valign=\"top\">\n      Reports unresolved references on properties and custom type definitions that cannot be resolved.\n    </td>\n  </tr>\n</table>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenPropertyInParent",
          "displayName": "Usage of properties in parent description",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports that the usage of properties in modules parent definition is prohibited</p>\n</body>\n</html>"
        },
        {
          "shortName": "MavenDuplicateDependenciesInspection",
          "displayName": "Duplicate Dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports duplicate dependencies</p>\n</body>\n</html>"
        },
        {
          "shortName": "MavenModelInspection",
          "displayName": "Maven Model Inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports resolution problems in a Maven model</p>\n</body>\n</html>"
        },
        {
          "shortName": "MavenRedundantGroupId",
          "displayName": "Redundant groupId",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the unnecessary &lt;groupId&gt; definition since it is already defined in the parent pom.xml</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MavenDuplicatePluginInspection",
          "displayName": "Duplicate plugin declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the duplication of the plugin declaration in pom.xml</p>\n</body>\n</html>"
        },
        {
          "shortName": "MavenParentMissedVersionInspection",
          "displayName": "Parent version missed",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.idea.maven",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the absence of the parent version element for versions that do not support consumer POM feature</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Inheritance issues",
      "inspections": [
        {
          "shortName": "ProblematicVarargsMethodOverride",
          "displayName": "Non-varargs method overrides varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the overrides of the variable arity methods where the arity parameter is\nreplaced by the array parameter.\n<p>Though this code is valid, it may be confusing and should be avoided.</p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassWithoutAbstractMethods",
          "displayName": "Abstract class without abstract methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract classes that have no abstract methods.\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "NonProtectedConstructorInAbstractClass",
          "displayName": "Public constructor in abstract class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the constructors of abstract classes that are declared as <code>public</code>.\n<p>\n  Constructors of abstract classes can only be called in constructors of\n  their subclasses. So making constructors of abstract classes public may\n  be confusing.\n</p>\n<p>The quick-fix makes such constructors protected.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public abstract class</b> Foo {\n    <b>public</b> Foo () { // warning: has 'public' modifier\n        /* ... */\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public abstract class</b> Foo {\n    <b>protected</b> Foo () {\n        /* ... */\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the option below to ignore non-public classes.</p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticInheritance",
          "displayName": "Static inheritance",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the interfaces that are implemented only to provide access to constants.\n<p>This kind of inheritance is often confusing and may hide important dependency information.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FrequentlyUsedInheritorInspection",
          "displayName": "Class may extend a commonly used base class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes or interfaces that can be replaced with an implementation or extension of a more specific commonly used class or interface.\n<p>For this inspection to work, a superclass needs to be in project source files and the project needs to use the IntelliJ IDEA build system.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class MyInheritor implements A {} // B suggested on the A reference\n\n  interface A {}\n\n  abstract class B implements A {}\n\n  abstract class C1 extends B {}\n  abstract class C2 extends B {}\n  abstract class C3 extends B {}\n  abstract class C4 extends B {}\n  abstract class C5 extends B {}\n</code></pre>\n<!-- tooltip end -->\n<p>By default, this inspection doesn't highlight issues in the editor but only provides a quick-fix.</p>\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassNeverImplemented",
          "displayName": "Abstract class which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract classes that have no concrete subclasses.\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsUtilityClass",
          "displayName": "Class extends utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes that are explicitly declared to extend a utility class.\n<p>\nA utility class is a non-empty class in which all fields and methods are static.\n</p>\n<p>\n  Extending a utility class also allows for inadvertent object instantiation of the\n  utility class, because the constructor cannot be made private in order to allow extension.\n</p>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n    Use the <b>Ignore if overriding class is a utility class</b> option to ignore any classes that override a utility class but are\n    also utility classes themselves.\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsFinalClass",
          "displayName": "Type parameter extends final class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the type parameters declared to extend a final class.\n<p>Suggests replacing the type parameter with the type of the specified final class since\nfinal classes cannot be extended.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>void</b> foo() {\n    List&lt;? <b>extends</b> Integer&gt; list; // Warning: the Integer class is a final class\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>void</b> foo() {\n    List&lt;Integer&gt; list;\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceNeverImplemented",
          "displayName": "Interface which has no concrete subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the interfaces that have no concrete subclasses.\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the list below to add annotations. Interfaces declared with\n    one of these annotations will be ignored by the inspection.\n  </li>\n  <li>\n    Use the checkbox below to ignore interfaces that only declare constant fields.\n    Such interfaces may still be usable even without implementations.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MissingOverrideAnnotation",
          "displayName": "Missing '@Override' annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports methods overriding superclass methods without the\n  <code>@java.lang.Override</code> annotation.\n<p>\n  Annotating methods improves code readability since it shows the intent. In addition, the compiler emits an error when a signature\n  of the overridden method doesn't match the superclass method.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the <b>Ignore 'equals()', 'hashCode()' and 'toString()'</b> option to ignore these\n    <code>java.lang.Object</code> methods: <code>equals()</code>, <code>hashCode()</code>, and\n    <code>toString()</code>. The risk that these methods will disappear and\n    your code won't be compiling anymore due to the <code>@Override</code>\n    annotation is relatively small.\n  </li>\n  <li>\n    Use the <b>Ignore methods in anonymous classes</b> option to ignore methods\n    in anonymous classes.\n  </li>\n</ul>\n<p>This inspection is only applicable if the language level of a project or module is five or higher.</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RefusedBequest",
          "displayName": "Method does not call super method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods that override a particular method without calling <code>super</code>.\n<p>This is also known as a <i>refused bequest</i>. Such methods\n  may represent a failure of abstraction and cause hard-to-trace bugs.</p>\n  <p>The inspection doesn't report default methods and methods overridden\nfrom <code>java.lang.Object</code>, except for <code>clone()</code>.\n  The <code>clone()</code> method is expected to call its <code>super</code>, which will automatically return an object of the correct type.</p>\n<p><b>Examples:</b></p>\n<ul>\n  <li><pre><code>\n  class A {\n    @Override\n    public Object clone() { // reported, because it does not call 'super.clone()'\n      return new A();\n    }\n  }\n  </code></pre> </li>\n  <li><pre><code>\n  interface I {\n    default void foo() {}\n  }\n\n  class A implements I {\n    // warning on method when 'Ignore 'default' super methods' and 'Ignore annotated' options are disabled\n    @Override\n    public void foo(){}\n  }\n    </code></pre></li>\n</ul>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the <b>Only report when super method is annotated by</b> option to ignore <code>super</code> methods marked with the annotations\n    from the provided list. You can manually add annotations to the list.\n  </li>\n  <li>\n    Use the <b>Ignore empty super methods</b> option to ignore <code>super</code> methods that are either empty or only throw an exception.\n  </li>\n  <li>\n    Use the <b>Ignore 'default' super methods</b> option to ignore <code>super</code> methods with the <code>default</code> keyword.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodWithMissingImplementations",
          "displayName": "Abstract method with missing implementations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract methods that are not implemented in every concrete subclass.\n<p>\n  This results in a compile-time error on the subclasses; the inspection prevents it by reporting the\n  problem at the point of the abstract method.\n</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantMethodOverride",
          "displayName": "Method is identical to its super method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the methods identical to their super methods. Such methods have the same signatures\nas their super methods and either have the same bodies or only include the super method's call in their bodies.\n<p>These methods are redundant and can be removed.</p>\n<!-- tooltip end -->\n<p>\n  Use the checkbox below to run the inspection for the methods that override library methods.\n  Checking library methods may slow down the inspection.\n</body>\n</html>"
        },
        {
          "shortName": "ParameterTypePreventsOverriding",
          "displayName": "Parameter type prevents overriding",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the cases when a parameter type of a subclass method has the same name as\nthe parameter type of the corresponding super method but belongs to a different package.\nIn these cases, the subclass method cannot override the super method.\n<p>Suggests setting the same parameter type as in the super method.\n\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n<b>public class</b> A {\n <b>public void</b> method(Object o) {}\n}\n\n<b>public class</b> B <b>extends</b> A {\n <b>public void</b> method(Object o) {} // warning on parameter type\n <b>class</b> Object {}\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n<b>public class</b> A {\n <b>public void</b> method(Object o) {}\n}\n\n<b>public class</b> B <b>extends</b> A {\n <b>public void</b> method(java.lang.Object o) {} // new parameter type\n <b>class</b> Object {}\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesAbstractMethod",
          "displayName": "Abstract method overrides abstract method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract methods that override abstract methods.\n<p>Such methods don't make sense because any concrete child class will have to implement the abstract method anyway.</p>\n<p>\n  The methods whose return types, exception declarations, annotations, or modifiers differ from the overridden method are not reported by this inspection.\n</p>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n    Use the <b>Ignore methods with different Javadoc than their super methods</b> option to ignore any abstract methods whose JavaDoc comment differs from their super method.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AbstractMethodOverridesConcreteMethod",
          "displayName": "Abstract method overrides concrete method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract methods that override concrete methods.\n<p>The methods overridden from <code>java.lang.Object</code> are not reported by this inspection.</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsConcreteCollection",
          "displayName": "Class explicitly extends a 'Collection' class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes that extend concrete classes of the <code>java.util.Collection</code> or <code>java.util.Map</code> types.\n<p>\n  Subclassing collection types is a common yet poor practice. It is considerably more brittle than delegating collection calls.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassExtendsConcreteClass",
          "displayName": "Abstract class extends concrete class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the abstract classes that extend concrete classes.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitSubclassInspection",
          "displayName": "Final declaration can't be overridden at runtime",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when your code prevents a class from being subclassed by some framework\n(for example, Spring or Hibernate) at runtime.\n<!-- tooltip end -->\n<p>Typical examples of necessary but impossible subclassing:</p>\n<ul>\n  <li><code>final</code> classes marked with framework-specific annotations (for example, Spring <code>@Configuration</code>)</li>\n  <li><code>final</code>, <code>static</code> or <code>private</code> methods\n    marked with framework-specific annotations (for example, Spring <code>@Transactional</code>)</li>\n  <li>methods marked with framework-specific annotations inside <code>final</code> classes</li>\n</ul>\n\n<p>The list of reported cases depends on the frameworks used.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsAnnotation",
          "displayName": "Class extends annotation interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes declared as an implementation or extension of an annotation\ninterface.\n<p>While it is legal to extend an annotation interface, it is often done by accident,\n  and the result can't be used as an annotation.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "PhpFunctionNamingConventionInspection",
          "displayName": "Function name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the functions' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for functions.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for functions' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpVariableNamingConventionInspection",
          "displayName": "Variable name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the variables' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for variables.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for variables' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstantNamingConventionInspection",
          "displayName": "Constant name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the constants' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for constants.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for constants' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassNamingConventionInspection",
          "displayName": "Class name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the classes' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for classes.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for classes' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPropertyNamingConventionInspection",
          "displayName": "Property name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the properties' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for properties.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for properties' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMethodNamingConventionInspection",
          "displayName": "Method name is not following coding convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the methods' names that are either too short, too long, or do not follow the specified regular expression pattern.\nSome coding styles have a special naming convention for methods.\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify minimum/maximum length and the regular expression expected for methods' names.\n  To ignore the names' length, specify <b>0</b>.\n</p>\n<p>\n  To learn more about regular expressions, refer to the <a href=\"https://www.regular-expressions.info/quickstart.html\">Quick Start guide (regular-expressions.info)</a>.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Redundant modifiers",
      "inspections": [
        {
          "shortName": "RedundantModifiersUtilityClassLombok",
          "displayName": "@UtilityClass modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unneeded modifiers for classes annotated with @UtilityClass.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantModifiersValLombok",
          "displayName": "Unnecessary final before 'val'",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unneeded final modifier before <code>val</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantModifiersValueLombok",
          "displayName": "@Value modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unneeded modifiers for classes annotated with @Value.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "GroovyContinue",
          "displayName": "'continue' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>continue</code> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyIfStatementWithIdenticalBranches",
          "displayName": "If statement with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements with identical \"then\" and <code>else</code> branches.\nSuch statements are almost certainly programmer error.\n<p><b>Example:</b></p>\n<pre>\n<code>\nif (condition) {\n  print \"foo\"\n} else {\n  print \"foo\"\n}\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\nprint \"foo\"\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>return</code> statements at the end of constructors and methods returning <code>void</code>.\nThese are unnecessary and may be safely removed.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>void</b> foo (String s){\n      print(s)\n      <b>return</b>\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>void</b> foo (String s){\n      print(s)\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>For more info see the same inspection in Java.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyTrivialIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements which can be simplified to single assignment\nor\n<code>return</code> statements.\n\n<p><b>Example:</b></p>\n<pre><code>\n  if (foo())\n    return true;\n  else\n    return false;\n</code></pre>\n\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  return foo();\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstantConditional",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions with boolean constant as a condition.\n<p><b>Example:</b></p>\n<pre><code>\n  true ? result1 : result2\n  false ? result1 : result2\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLoopStatementThatDoesntLoop",
          "displayName": "Loop statement that doesn't loop",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>for</code> or <code>while</code> statements whose\nbodies are guaranteed to execute at most once. While such statements could be written intentionally, they\nare usually a symptom of error.\n<p><b>Example:</b></p>\n<pre>\n<code>\n  for (int i in 0..&lt;10) {\n    return\n  }\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyBreak",
          "displayName": "'break' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>break</code> statements outside of <code>switch</code> statements.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyTrivialConditional",
          "displayName": "Redundant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ternary conditional operators of the form <code>x ? true : false</code>\nor similar, which can be trivially simplified.\n\n<p><b>Example:</b></p>\n<pre><code>\n  foo() ? true : false\n</code></pre>\n\n<p>After the quick-fix is applied:</p>\n<pre><code>\nfoo()\n</code></pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyIfStatementWithTooManyBranches",
          "displayName": "If statement with too many branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>if</code> statements with too many branches.\nSuch statements may be confusing, and are often the sign of inadequate levels of design\nabstraction.\n<p><b>Example:</b></p>\n<pre>\n<code>\nif (a) {\n  print \"foo\"\n} else if (b) {\n  print \"bar\"\n} else if (c) {\n  print \"baz\"\n} else if (d) {\n  print \"Too many branches\"\n}\n</code>\n</pre>\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of branches expected.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySwitchStatementWithNoDefault",
          "displayName": "Switch statement with no default case",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements that do not contain\n<code>default</code> labels.\n<p>\n  Some coding practices may insist on adding this label to all <code>switch</code> statements.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyReturnFromClosureCanBeImplicit",
          "displayName": "'return' statement can be implicit",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports return statements at the end of closures which can be made implicit.\n<p>\n  Groovy closures implicitly return the value of the last statement in them.\n</p>\n\n<p><b>Example:</b></p>\n<pre><code>\n  def foo = {\n    return 1\n  }\n</code></pre>\n\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  def foo = {\n    1\n  }\n</code></pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstantIfStatement",
          "displayName": "Constant if statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements with boolean constant as a condition.\n<p><b>Example:</b></p>\n<pre><code>\n  if (true) {\n      // ...\n  }\n  if (false) {\n      // ...\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalCanBeElvis",
          "displayName": "Ternary expression can be replaced with elvis expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ternary expressions which can be replaced by an elvis expression.\n<p><b>Example:</b></p>\n<pre><code>\n  def notNull(o, defaultValue) {\n      o != null ? o : defaultValue\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  def notNull(o, defaultValue) {\n      o ?: defaultValue\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>continue</code> statements if they are last reachable statements in the loop.\nThese <code>continue</code> statements are unnecessary and can be safely removed.\n<p><b>Example:</b></p>\n<pre><code>\n  for(int i in array) {\n      println(i)\n      <b>continue</b>\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  for(int i in array) {\n      println(i)\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>For more info see the same inspection in Java.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditionalWithIdenticalBranches",
          "displayName": "Ternary expression with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ternary expressions with identical \"then\" and \"else\" branches. Such expressions are almost certainly a programmer error.\n<p>The quick-fix replaces the expression with its \"then\" branch.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  condition ? a.foo() : a.foo()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a.foo()\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrFinalVariableAccess",
          "displayName": "Final variable access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports uninitialized final fields, and invalid assignments to final variables, parameters and fields.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyFallthrough",
          "displayName": "Fallthrough in 'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <i>fallthrough</i> in switch statements.  While occasionally useful, fallthrough is often unintended, and may lead to surprising bugs.\n<p><b>Example:</b></p>\n<pre>\n<code>\nswitch(n) {\n  case 1:\n    print 1\n  case 2: // \"case 1\" fallthrough to \"case 2\". Statements from \"case 2\" will be executed immediately after \"case 1\".\n    print 2\n    break\n  default:\n    print \"Default\"\n}\n</code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyConditionalCanBeConditionalCall",
          "displayName": "Ternary expression can be replaced with safe call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ternary expressions which can be replaced by a safe call.\n<p><b>Example:</b></p>\n<pre><code>\n  def charArray(String s) {\n      s == null ? null : s.toCharArray()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  def charArray(String s) {\n      s?.toCharArray()\n  }\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Javadoc",
      "inspections": [
        {
          "shortName": "UnnecessaryInheritDoc",
          "displayName": "Unnecessary {@inheritDoc} Javadoc comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the Javadoc comments that contain only the <code>{@inheritDoc}</code>\ntag. Since Javadoc copies the super class's comment if no comment is present, a\ncomment containing only <code>{@inheritDoc}</code> adds nothing.\n<p>Also, it reports the <code>{@inheritDoc}</code> usages in invalid locations, for example, in fields.</p>\n<p>Suggests removing the unnecessary Javadoc comment.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Example implements Comparable&lt;Example&gt; {\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Example implements Comparable&lt;Example&gt; {\n    @Override\n    public int compareTo(Example o) {\n      return 0;\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DanglingJavadoc",
          "displayName": "Dangling Javadoc comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Javadoc comments that don't belong to any class, method or field.\n<p>The Javadoc tool ignores dangling Javadoc comments and doesn't include them in the generated HTML documentation.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class A {\n    /**\n     * Dangling comment\n     */\n     /**\n      * Method javadoc\n      */\n      public void m(){}\n  }\n</code></pre>\n<p>A quick-fix is available to delete such comments completely or convert them into a block comment. After the quick-fix is applied:</p>\n<pre><code>\n  class A {\n  /*\n    Dangling comment\n   */\n  /**\n   * Method javadoc\n   */\n  public void m(){}\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JavadocReference",
          "displayName": "Declaration has problems in Javadoc references",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references inside Javadoc comments.\n<p>In the following example, the <code>someParam</code> parameter is missing, so it will be highlighted:</p>\n<pre><code>\nclass A {\n    /**\n     * @param someParam description\n     **/\n    void foo() {\n    }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Disable the <b>Report inaccessible symbols</b> option to ignore the tags that reference missing method parameters,\n  classes, fields and methods.</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryJavaDocLink",
          "displayName": "Unnecessary Javadoc link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the Javadoc <code>@see</code>,\n<code>{@link}</code>, and <code>{@linkplain}</code>\ntags that refer to the method owning the comment, the super method of the\nmethod owning the comment, or the class containing the comment.\n<p>Such links are unnecessary and can be safely removed with this inspection's quick-fix. The\n  quick-fix will remove the entire Javadoc comment if it refers to its own content.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Example {\n    /**\n     * @see Example#method\n     */\n    public void method() { }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\nclass Example {\n  public void method() { }\n}\n</pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to ignore inline links (<code>{@link}</code> and <code>{@linkplain}</code>)\nto super methods. Although a link to all super methods is automatically added by the\nJavadoc tool, an inline link to the super method may sometimes be needed in texts of the Javadoc comments.\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageInfoWithoutPackage",
          "displayName": "'package-info.java' without 'package' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>package-info.java</code> files without a <code>package</code> statement.\n<p>\nThe Javadoc tool considers such files documentation for the default package even when the file is located somewhere else.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MissingPackageInfo",
          "displayName": "Missing 'package-info.java'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports packages that contain classes but do not contain the <code>package-info.java</code>\nor <code>package.html</code> files and are, thus, missing the package documentation.\n<p>The quick-fix creates an initial <code>package-info.java</code> file.</p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MissingDeprecatedAnnotation",
          "displayName": "Missing @Deprecated annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the module declarations, classes, fields, or methods that have the <code>@deprecated</code>\nJavadoc tag but do not have the <code>@java.lang.Deprecated</code> annotation.\n<p>Suggests adding the missing <code>@Deprecated</code> annotation.</p>\n<p><b>Example:</b></p>\n<pre>\n  /**\n   * @deprecated use {@code example()} instead\n   */\n  void sample(){ }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  /**\n   * @deprecated use {@code example()} instead\n   */\n  @Deprecated\n  void sample(){ }\n</pre>\n<!-- tooltip end -->\n<p>This inspection works only if the language level of the project or module is 5 or higher.</p>\n<p>\nUse the checkbox below to be warned on the symbols annotated with <code>@deprecated</code> without\n  an explanation in the <code>@Deprecated</code> Javadoc tag.\n\n</body>\n</html>"
        },
        {
          "shortName": "PackageDotHtmlMayBePackageInfo",
          "displayName": "'package.html' may be converted to 'package-info.java'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any <code>package.html</code> files which are used for documenting packages.\nSince JDK 1.5 it is recommended to use <code>package-info.java</code> files instead, since such\nfiles can also contain package annotations. In this way, package-info.java becomes the\nsole repository for package level annotations and documentation.\n<p>Example: <code>package.html</code></p>\n<pre>\n&lt;html&gt;\n  &lt;body&gt;\n    Documentation example.\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>After the quick-fix is applied, the result looks like this: <code>package-info.java</code></p>\n<pre>\n/**\n * Documentation example.\n */\npackage com.sample;\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "JavaDoc",
          "displayName": "Declaration has Javadoc problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the following Javadoc comment flaws:\n<ul>\n  <li>No Javadoc where it is required</li>\n  <li>Required tag is missing</li>\n  <li>Invalid or incomplete tag</li>\n  <li>Javadoc description is missing or incomplete</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n  class Main {\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  /**\n   *\n   */\n  class Main {\n  }\n</code></pre>\n<p>Example:</p>\n<pre><code>\n  String id(String value) {\n    return value;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  /**\n   * @param value\n   * @return\n   */\n  String id(String value) {\n    return value;\n  }\n</code></pre>\n<!-- tooltip end -->\nUse the tabs and corresponding inspection options to define visibility scope in which Javadoc is required, as well as the\nrequired Javadoc tags for classes, methods, fields, and inner classes.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlTagCanBeJavadocTag",
          "displayName": "<code>...</code> can be replaced with {@code ...}",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of <code>&lt;code&gt;</code> tags in Javadoc comments. Since JDK 1.5, these constructs can be replaced with <code>{@code ...}</code> constructs. This allows using angle brackets <code>&lt;</code> and <code>&gt;</code> inside the comment instead of HTML character entities.\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  /**\n   * @return empty &lt;code&gt;ArrayList&amp;lt;Integer&amp;gt;&lt;/code&gt;\n   */\n  List&lt;Integer&gt; getList(){ ... }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n  /**\n   * @return empty {@code ArrayList&lt;Integer&gt;}\n   */\n  List&lt;Integer&gt; getList(){ ... }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JavadocHtmlLint",
          "displayName": "HTML problems in Javadoc (DocLint)",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the same HTML issues in the Javadoc comments that have been reported by DocLint since Java 8.\n<p>The inspection detects the following issues:</p>\n<ul>\n  <li>Self-closed, unclosed, unknown, misplaced, or empty tag</li>\n  <li>Unknown or wrong attribute</li>\n  <li>Misplaced text</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n/**\n * Unknown tag: List&lt;String&gt;\n * Unclosed tag: error&lt;/b&gt;\n * Misplaced text or tag: &lt;ul&gt;&lt;li&gt;one&lt;/li&gt;, &lt;li&gt;two&lt;/li&gt;&lt;/ul&gt;\n * Wrong or empty attribute: &lt;a href=\"\"&gt;&lt;/a&gt;\n * Self-closed tag: &lt;br/&gt;\n * ...\n */\nvoid sample(){ }\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Serialization issues",
      "inspections": [
        {
          "shortName": "SerializableHasSerialVersionUIDField",
          "displayName": "Serializable class without 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that implement <code>Serializable</code> and do not declare a <code>serialVersionUID</code> field.\n<p>\n  Without a <code>serialVersionUID</code> field, any change to the class will make previously serialized versions unreadable.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class Main implements Serializable {\n    }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n    class Main implements Serializable {\n      private static final long serialVersionUID = -1446398935944895849L;\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n  </li>\n  <li>\n    Whether to ignore <code>Serializable</code> anonymous classes.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "SerializableInnerClassWithNonSerializableOuterClass",
          "displayName": "Serializable non-'static' inner class with non-Serializable outer class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-static inner classes that implement <code>Serializable</code>\nand are declared inside a class that doesn't implement <code>Serializable</code>.\n<p>\n  Such classes are unlikely to serialize correctly due to implicit references to the outer class.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class A {\n      class Main implements Serializable {\n      }\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n  </li>\n  <li>\n    Whether to ignore <code>Serializable</code> anonymous classes.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithSerializationMethods",
          "displayName": "Externalizable class with 'readObject()' or 'writeObject()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Externalizable</code> classes that define <code>readObject()</code>\nor <code>writeObject()</code> methods. These methods are not called for serialization of\n<code>Externalizable</code> objects.\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Crucial implements Externalizable {\n    int value;\n    private void readObject(ObjectInputStream in) {\n      value = in.readInt();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SerializableHasSerializationMethods",
          "displayName": "Serializable class without 'readObject()' and 'writeObject()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Serializable</code> classes\nthat do not implement <code>readObject()</code> and <code>writeObject()</code> methods.\n<p>\n  If <code>readObject()</code> and <code>writeObject()</code> methods are not implemented,\n  the default serialization algorithms are used,\n  which may be sub-optimal for performance and compatibility in many environments.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n  </li>\n  <li>\n    Whether to ignore <code>Serializable</code> classes without non-static fields.\n  </li>\n  <li>\n    Whether to ignore <code>Serializable</code> anonymous classes.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ReadResolveAndWriteReplaceProtected",
          "displayName": "'readResolve()' or 'writeReplace()' not declared 'protected'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that implement <code>java.io.Serializable</code> where the <code>readResolve()</code>\nor <code>writeReplace()</code> methods are not declared <code>protected</code>.\n<p>\n  Declaring <code>readResolve()</code> and <code>writeReplace()</code> methods <code>private</code>\n  can force subclasses to silently ignore them, while declaring them\n  <code>public</code> allows them to be invoked by untrusted code.\n</p>\n<p>\n  If the containing class is declared <code>final</code>, these methods can be declared <code>private</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class ClassWithSerialization implements Serializable {\n    public Object writeReplace() { // warning: 'writeReplace()' not declared protected\n        ...\n    }\n  }\n  </code>\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableRecordContainsIgnoredMembers",
          "displayName": "'record' contains ignored members",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the methods <code>writeObject()</code>, <code>readObject()</code>, <code>readObjectNoData()</code>, <code>writeExternal()</code>, and\n  <code>readExternal()</code> or the field <code>serialPersistentFields</code> defined in a <code>record</code> class.\n  These members are not used for the serialization or deserialization of records.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  record R1() implements Serializable {\n    // The field is ignored during record serialization\n    @Serial\n    private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0];\n\n    // The method is ignored during record serialization\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n  }\n</code></pre>\n<pre><code>\n  record R2() implements Externalizable {\n    // The method is ignored during record serialization\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n    }\n\n    // The method is ignored during record serialization\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection applies to the language level 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SerialAnnotationUsedOnWrongMember",
          "displayName": "'@Serial' annotation used on wrong member",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports methods and fields in the <code>Serializable</code> and <code>Externalizable</code>\n  classes that are not suitable to be annotated with the <code>java.io.Serial</code> annotation.</p>\n<p><b>Examples:</b></p>\n<pre><code>\nclass Test implements Serializable {\n  @Serial // The annotated field is not a part of serialization mechanism as it's not final\n  private static long serialVersionUID = 7874493593505141603L;\n\n  @Serial // The annotated method is not a part of the serialization mechanism as it's not private\n  void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</code></pre>\n<pre><code>\nclass Test implements Externalizable {\n  @Serial // The annotated method is not a part of the serialization mechanism as it's inside Externalizable class\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</code></pre>\n<p>For information about all valid cases, refer the documentation for <code>java.io.Serial</code>.</p>\n<!-- tooltip end -->\n<p>This inspection applies to the language level of the project or module 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SerialVersionUIDNotStaticFinal",
          "displayName": "'serialVersionUID' field not declared 'private static final long'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Serializable</code> classes whose <code>serialVersionUID</code> field\nis not declared <code>private static final long</code>.\n<p><b>Example:</b></p>\n<pre>\n  class SampleClass implements Serializable {\n    private long serialVersionUID = 1; // field of a Serializable class is not declared 'private static final long'\n\n    public SampleClass() {\n        System.out.println(serialVersionUID);\n    }\n  }\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ReadObjectAndWriteObjectPrivate",
          "displayName": "'readObject()' or 'writeObject()' not declared 'private'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Serializable</code> classes where the <code>readObject</code>\nor <code>writeObject</code> methods are not declared private.\nThere is no reason these methods should ever have a higher visibility than <code>private</code>.\n<p>\n  A quick-fix is suggested to make the corresponding method <code>private</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Test implements Serializable {\n    public void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public class Test implements Serializable {\n    private void readObject(ObjectInputStream stream) {\n      /* ... */\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SerializableStoresNonSerializable",
          "displayName": "'Serializable' object implicitly stores non-'Serializable' object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any references to local non-<code>Serializable</code> variables\noutside <code>Serializable</code> lambdas, local and anonymous classes.\n<p>\n  When a local variable is referenced from an anonymous class, its value\n  is stored in an implicit field of that class. The same happens\n  for local classes and lambdas. If the variable is of a\n  non-<code>Serializable</code> type, serialization will fail.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  interface A extends Serializable {\n      abstract void foo();\n  }\n  class B {}\n  class C {\n      void foo() {\n          B b = new B();\n          A a = new A() {\n              @Override\n              public void foo() {\n                  System.out.println(b); // warning\n              }\n          };\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SerialPersistentFieldsWithWrongSignature",
          "displayName": "'serialPersistentFields' field not declared 'private static final ObjectStreamField[]'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Serializable</code> classes whose <code>serialPersistentFields</code> field\nis not declared as <code>private static final ObjectStreamField[]</code>.\n<p>\n  If a <code>serialPersistentFields</code> field is not declared with those modifiers,\n  the serialization behavior will be as if the field was not declared at all.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class List implements Serializable {\n      List next;\n\n      ObjectStreamField[] serialPersistentFields\n                   = {new ObjectStreamField(\"next\", List.class)};\n\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectBoundToHttpSession",
          "displayName": "Non-serializable object bound to HttpSession",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports objects not implementing <code>java.io.Serializable</code> used as arguments to\n<code>javax.servlet.http.HttpSession.setAttribute()</code> or\n<code>javax.servlet.http.HttpSession.putValue()</code>.\n<p>\n  Such objects will not be serialized if the 'HttpSession' is passivated or migrated,\n  and may result in difficult-to-diagnose bugs.\n</p>\n<p>\n  This inspection assumes objects of the types <code>java.util.Collection</code> and\n  <code>java.util.Map</code> to be <code>Serializable</code>,\n  unless type parameters are non-<code>Serializable</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(HttpSession session) {\n      session.setAttribute(\"foo\", new NonSerializable());\n  }\n  static class NonSerializable {}\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldNotInitialized",
          "displayName": "Transient field is not initialized on deserialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>transient</code> fields that\nare initialized during normal object construction, but whose class does not have a\n<code>readObject</code> method.\n<p>\n  As <code>transient</code> fields are not serialized they need\n  to be initialized separately in a <code>readObject()</code> method\n  during deserialization.\n</p>\n<p>\n  Any <code>transient</code> fields that\n  are not initialized during normal object construction are considered to use the default\n  initialization and are not reported by this inspection.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Person implements Serializable {\n    transient String name = \"Default\"; //warning, can actually be a null after deserialization\n    transient String surname; //null is considered the default value and not reported\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TransientFieldInNonSerializableClass",
          "displayName": "Transient field in non-serializable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>transient</code> fields in classes that do not implement <code>java.io.Serializable</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  public class NonSerializableClass {\n    private transient String password; // warning: Field 'password' is marked 'transient', in non-Serializable class\n  }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public class NonSerializableClass {\n    private String password;\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableFieldInSerializableClass",
          "displayName": "Non-serializable field in a Serializable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-serializable fields in classes that implement <code>java.io.Serializable</code>. Such fields will result\nin runtime exceptions if the object is serialized.\n<p>\n  Fields declared\n  <code>transient</code> or <code>static</code>\n  are not reported, nor are fields of classes that have a <code>writeObject</code> method defined.\n</p>\n<p>\n  This inspection assumes fields of the types\n  <code>java.util.Collection</code> and\n  <code>java.util.Map</code> to be\n  <code>Serializable</code>, unless the types\n  they are declared in are non-<code>Serializable</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class NonSerializableClass {}\n\n  public class SerializableClass implements Serializable {\n      NonSerializableClass clazz; // warning: Non-serializable field 'clazz' in a Serializable class\n      static NonSerializableClass staticClazz; // no warnings\n  }\n  </code>\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n  </li>\n  <li>\n    List annotations that will make the inspection ignore the annotated fields.\n  </li>\n  <li>\n    Whether to ignore fields initialized with an anonymous class.\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "SerializableWithUnconstructableAncestor",
          "displayName": "Serializable class with unconstructable ancestor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Serializable</code> classes whose closest non-serializable ancestor doesn't have\na no-argument constructor. Such classes cannot be deserialized and will fail with an <code>InvalidClassException</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  class Ancestor {\n    private String name;\n    Ancestor(String name) {\n      this.name = name;\n    }\n  }\n\n  // warning on this class because the superclass is not\n  // serializable, and its constructor takes arguments\n  class Descendant extends Ancestor implements Serializable {\n    Descendant() {\n      super(\"Bob\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerialVersionUIDField",
          "displayName": "Non-serializable class with 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>Serializable</code> classes that define a <code>serialVersionUID</code>\nfield. A <code>serialVersionUID</code> field in that context normally indicates an error\nbecause the field will be ignored and the class will not be serialized.\n<p><b>Example:</b></p>\n<pre><code>\n  public class IWantToSerializeThis {\n    private static final long serialVersionUID = 2669293150219020249L;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MissingSerialAnnotation",
          "displayName": "@Serial annotation could be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports methods and fields in the <code>Serializable</code> and <code>Externalizable</code>\n  classes that are suitable to be annotated with the <code>java.io.Serial</code> annotation. The quick-fix adds the annotation.</p>\n<p><b>Example:</b></p>\n<pre><code>\nclass Main implements Serializable {\n  private static final long serialVersionUID = 7874493593505141603L;\n\n  private void writeObject(ObjectOutputStream out) throws IOException {\n  }\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Main implements Serializable {\n    @Serial\n    private static final long serialVersionUID = 7874493593505141603L;\n\n    @Serial\n    private void writeObject(ObjectOutputStream out) throws IOException {\n    }\n}\n</code></pre>\n<p><b>Example:</b></p>\n<pre><code>\n  class Main implements Externalizable {\n    protected Object readResolve() throws ObjectStreamException {\n      return \"SomeObject\";\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Main implements Externalizable {\n    @Serial\n    protected Object readResolve() throws ObjectStreamException {\n        return \"SomeObject\";\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>For more information about all possible cases, refer the documentation for <code>java.io.Serial</code>.</p>\n<p>This inspection applies to the language level of the project or module 14 or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableObjectPassedToObjectStream",
          "displayName": "Non-serializable object passed to ObjectOutputStream",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>Serializable</code> objects used as arguments to\n<code>java.io.ObjectOutputStream.write()</code>. Such calls will result in runtime exceptions.\n<p>\n  This inspection assumes objects of the types <code>java.util.Collection</code> and\n  <code>java.util.Map</code> to be <code>Serializable</code>, unless the types\n  they are declared in are non-<code>Serializable</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class IWantToSerializeThis {\n    public static void main(String[] args) throws IOException {\n      try(var stream = new ObjectOutputStream(Files.newOutputStream(Paths.get(\"output\")))) {\n        // Warning -- will fail with NotSerializableException\n        stream.writeObject(new IWantToSerializeThis());\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SerializableInnerClassHasSerialVersionUIDField",
          "displayName": "Serializable non-static inner class without 'serialVersionUID'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-static inner classes that implement <code>java.io.Serializable</code>, but do not define a <code>serialVersionUID</code> field.\n<p>\n  Without a <code>serialVersionUID</code> field, any change to the class will make previously\n  serialized versions unreadable. It is strongly recommended that <code>Serializable</code>\n  non-static inner classes have a <code>serialVersionUID</code> field, otherwise the default\n  serialization algorithm may result in serialized versions being incompatible between\n  compilers due to differences in synthetic accessor methods.\n</p>\n<p>\n  A quick-fix is suggested to add the missing <code>serialVersionUID</code> field.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Outer {\n      class Inner implements Serializable {}\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Outer {\n      class Inner implements Serializable {\n          private static final long serialVersionUID = -7004458730436243902L;\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n  </li>\n  <li>\n    Whether to ignore <code>Serializable</code> anonymous classes.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ExternalizableWithoutPublicNoArgConstructor",
          "displayName": "Externalizable class without 'public' no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports an <code>Externalizable</code> classes without a public no-argument constructor.</p>\n<p>When an <code>Externalizable</code> object is reconstructed, an instance is created using the public\n  no-arg constructor before the <code>readExternal</code> method called. If a public\n  no-arg constructor is not available, a <code>java.io.InvalidClassException</code> will be\n  thrown at runtime.\n  <!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ReadObjectInitialization",
          "displayName": "Instance field may not be initialized by 'readObject()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields that are not guaranteed to be initialized after the object is\ndeserialized by the <code>readObject()</code> method.\n<p>The inspection doesn't report transient fields.</p>\n<p>\n  Note: This inspection uses a very conservative control flow algorithm, and may incorrectly report fields\n  as uninitialized.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\nclass DataObject implements Serializable {\n  String s; // s is not initialized in readObject\n  int i;\n\n  private void readObject(ObjectInputStream stream) throws IOException {\n    i = stream.readInt();\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorNotSerializable",
          "displayName": "Comparator class not declared Serializable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that implement <code>java.lang.Comparator</code>,\nbut do not implement <code>java.io.Serializable</code>.\n<p>\n  If a non-serializable comparator is used to construct an ordered collection such\n  as a <code>java.util.TreeMap</code> or <code>java.util.TreeSet</code>, then the\n  collection will also be non-serializable. This can result in unexpected and\n  difficult-to-diagnose bugs.\n</p>\n<p>\n  Since subclasses of <code>java.lang.Comparator</code> are often stateless,\n  simply marking them serializable is a small cost to avoid such issues.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo implements Comparator { // warning\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo implements Comparator, Serializable { // no warning here\n      @Override\n      public int compare(Object o1, Object o2) {\n          /* ... */\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "NonSerializableWithSerializationMethods",
          "displayName": "Non-serializable class with 'readObject()' or 'writeObject()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>Serializable</code> classes that define <code>readObject()</code>\nor <code>writeObject()</code> methods. Such methods in that context normally indicate an error.\n<p><b>Example:</b></p>\n<pre><code>\n  public class SampleClass {\n    private void readObject(ObjectInputStream str) {}\n    private void writeObject(ObjectOutputStream str) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Pattern validation",
      "inspections": [
        {
          "shortName": "PatternOverriddenByNonAnnotatedMethod",
          "displayName": "Non-annotated Method overrides @Pattern Method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports when a method without any <code>@Pattern</code> annotation overrides a <code>@Pattern</code> annotated method.\nThis does not prevent error-highlighting inside the editor, however the overriding method will not be checked at runtime.\n<p>\nA quick fix is provided to add a <code>@Pattern</code> annotation that matches the one from the superclass method. This ensures the\nruntime-check instrumentation works correctly.\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Parent {\n    abstract @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId();\n  }\n  class Child extends Parent {\n    @Override String getId() { // warning here\n      return \"12-345\";\n    }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternNotApplicable",
          "displayName": "Pattern Annotation not applicable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports when a <code>@Pattern</code> annotation is applied to an element with a type other than <code>String</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  @Pattern(\"\\\\d\\\\d\") <b>int</b> i;\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PatternValidation",
          "displayName": "Validate annotated patterns",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions passed as arguments for <code>@Pattern</code> parameters and\nreturned from <code>@Pattern</code>-annotated methods that do not match the specified pattern.\n<p><b>Example:</b></p>\n<pre><code>\n  @Pattern(\"\\\\d\\\\d-\\\\d\\\\d\\\\d\") String getId() {\n    <b>return</b> \"1\";\n  }\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Composer",
      "inspections": [
        {
          "shortName": "PhpComposerExtensionStubsInspection",
          "displayName": "Extension is missing in composer.json",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of classes, functions, and constants from the PHP extensions not specified in <i>composer.json</i>. If an extension is listed in the <code>require-dev</code> section of <i>composer.json</i>, the inspection reports the corresponding symbols' usages located outside of the folders marked as test roots.\n</body>\n</html>"
        },
        {
          "shortName": "PhpComposerDuplicatedRequirementInspection",
          "displayName": "Duplicate package entries in composer.json",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate package entries in the <code>require</code> and <code>require-dev</code> sections of <i>composer.json</i>.\n</body>\n</html>"
        },
        {
          "shortName": "ComposerJsonFileReferencesInspection",
          "displayName": "Unresolved file references",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved file references in composer.json.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDisabledQualityToolComposerInspection",
          "displayName": "Quality tool inspection is disabled",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nHighlights the quality tools' entries in <i>composer.json</i> in case the corresponding code inspections are disabled.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNotInstalledPackagesInspection",
          "displayName": "Non-installed Composer packages",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the Composer packages that are required in <i>composer.json</i> but are not installed.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Nullability problems",
      "inspections": [
        {
          "shortName": "NotNullFieldNotInitialized",
          "displayName": "@NotNull field is not initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports fields annotated as not-null that are not initialized in the constructor.\n<p>Example:</p>\n<pre><code>public class MyClass {\n  private @NotNull String value;\n\n  public void setValue(@NotNull String value) {\n    this.value = value;\n  }\n\n  public @NotNull String getValue() {\n    return value;\n  }\n  }</code></pre>\n<p>\n  Such fields may violate the not-null constraint. In the example above, the <code>setValue</code> parameter is annotated as not-null, but\n  <code>getValue</code> may return null if the setter was not called.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore fields which could be initialized implicitly</b> option to control whether a warning should be issued if the field could be initialized implicitly\n    (e.g. via a dependency injection).</li>\n  <li>Use the <b>Ignore fields initialized in setUp() method</b> option to control whether a warning should be issued if the field is written in the test case <code>setUp()</code> method.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ReturnNull",
          "displayName": "Return of 'null'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>return</code> statements with <code>null</code> return values.\nWhile occasionally useful, this construct may make the code more prone\nto failing with a <code>NullPointerException</code>.\n<p>\n  If a method is designed to return <code>null</code>, it is suggested to mark it with the\n  <code>@Nullable</code> annotation - such methods will be ignored by this inspection.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Person {\n    public String getName () {\n      return null;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Person {\n    @Nullable\n    public String getName () {\n      return null;\n    }\n  }\n</code></pre>\n<p>\n  If the return type is <code>java.util.Optional</code>, an additional quick-fix to convert\n  <code>null</code> to <code>Otional.empty()</code> is suggested.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether to ignore <code>private</code> methods.\n    This will also ignore return of <code>null</code> from anonymous classes and lambdas.\n  </li>\n  <li>\n    Whether <code>null</code> values on array returns, collection\n    object returns, plain object returns, or a combination of the three should be reported.\n    Return of <code>null</code> in methods with return type <code>java.util.Optional</code> are always reported.\n  </li>\n  <li>\n    Click <b>Configure annotations</b> to specify which annotations should be considered 'nullable'.\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "NullableProblems",
          "displayName": "@NotNull/@Nullable problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems related to nullability annotations.\n<p><b>Examples:</b></p>\n<ul>\n  <li>Overriding methods are not annotated:\n    <pre><code>\nabstract class A {\n  @NotNull abstract String m();\n}\nclass B extends A {\n    String m() { return \"empty string\"; }\n}\n    </code></pre>\n  </li>\n  <li>Annotated primitive types: <code>@NotNull int myFoo;</code> </li>\n  <li>Both <code>@Nullable</code> and <code>@NotNull</code> are present on the same member: <code>@Nullable @NotNull String myFooString;</code></li>\n  <li>Collection of nullable elements is assigned into a collection of non-null elements:\n    <pre><code>\nvoid testList(List&lt;@Nullable String> nullableList) {\n   List&lt;@NotNull String> list2 = nullableList;\n}\n    </code></pre>\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>Use the <b>Configure Annotations</b> button to specify nullability annotations and the checkboxes to fine-tune where the inspection should provide warnings.</p>\n<p>This inspection only reports if the language level of the project or module is 5 or higher, \n  and nullability annotations are available on the classpath.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnsatisfiedRange",
          "displayName": "Return value is outside of declared range",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports numeric values returned from methods that don't conform to the declared method return range.\nYou can declare method return range using a number of annotations:\n<ul>\n  <li><code>org.jetbrains.annotations.Range</code> from JetBrains annotations package (specify 'from' and 'to')</li>\n  <li><code>org.checkerframework.common.value.qual.IntRange</code> from Checker Framework annotations package (specify 'from' and 'to')</li>\n  <li><code>org.checkerframework.checker.index.qual.GTENegativeOne</code> from Checker Framework annotations package (range is '>= -1')</li>\n  <li><code>org.checkerframework.checker.index.qual.NonNegative</code> from Checker Framework annotations package (range is '>= 0')</li>\n  <li><code>org.checkerframework.checker.index.qual.Positive</code> from Checker Framework annotations package (range is '> 0')</li>\n  <li><code>javax.annotation.Nonnegative</code> from JSR 305 annotations package (range is '>= 0')</li>\n  <li><code>javax.validation.constraints.Min</code> (specify minimum value)</li>\n  <li><code>javax.validation.constraints.Max</code> (specify maximum value)</li>\n</ul>\n<p>Example:</p>\n<pre>\n  @Range(from = 0, to = Integer.MAX_VALUE) int getValue() {\n    // Warning: -1 is outside of declared range\n    return -1;\n  }\n</pre>\n<!-- tooltip end -->\n<b><small>New in 2021.2</small></b>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "StringConcatenation",
          "displayName": "String concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>String</code> concatenations. Concatenation might be incorrect in an internationalized environment\nand could be replaced by usages of <code>java.text.MessageFormat</code> or similar classes.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DialogTitleCapitalization",
          "displayName": "Incorrect string capitalization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html><body>\nReports strings in method parameters and return values annotated with <code>@Nls</code> and having the capitalization parameter\nto conform to capitalization rules existing in most platform UI guidelines.\n<p><b>Example:</b></p>\n<pre><code>\n  void setTitle(@NlsContexts.DialogTitle String title) {}\n  setTitle(\"This is sentence capitalization but should be title\"); \n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  setTitle(\"This Is Sentence Capitalization but Should Be Title\"); \n</code></pre>\n</body></html>"
        },
        {
          "shortName": "NumericToString",
          "displayName": "Call to Numeric 'toString()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>toString()</code> calls on numeric objects. Such calls are usually incorrect in an internationalized environment.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MagicCharacter",
          "displayName": "Magic character",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports character literals that are used without constant declaration. These characters might result in\nbad code readability. Also, there might be errors if a character is changed only in one location\nbut not everywhere in code.\n<p><b>Example:</b></p>\n<pre><code>char c = 'c';</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringToUpperWithoutLocale",
          "displayName": "Call to 'String.toUpperCase()' or 'toLowerCase()' without locale",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>toUpperCase()</code> or <code>toLowerCase()</code> calls on <code>String</code> objects that do not specify a\n<code>java.util.Locale</code>. In these cases the default system locale is used, which can cause problems in an internationalized\nenvironment.\n<p>\n  For example the code <code>\"i\".toUpperCase().equals(\"I\")</code> returns <code>false</code> in the Turkish and Azerbaijani locales, where\n  the dotted and dotless 'i' are separate letters. Calling <code>toUpperCase()</code> on an English string containing an 'i', when running\n  in a Turkish locale, will return incorrect results. Alternatively, when dealing with strings that should be treated as locale-independent,\n  like HTML tags, this can lead to errors.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConvertToBasicLatin",
          "displayName": "Convert to Basic Latin",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports non-Basic Latin characters in literals and suggests replacing them with unicode entities.\n<p>Example:</p>\n<pre><code>\n  // © 2021\n  char c = '©';\n  String s = \"Áî\";\n</code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  // &amp;copy; 2021\n  char c = '\\u00a9';\n  String s = \"\\u00c1\\u00ee\";\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "CallToSuspiciousStringMethod",
          "displayName": "Call to suspicious String method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the calls of:\n<ul>\n  <li><code>equals()</code></li>\n  <li><code>equalsIgnoreCase()</code></li>\n  <li><code>compareTo()</code></li>\n  <li><code>compareToIgnoreCase()</code></li>\n</ul>\n<p>\n  on <code>String</code> objects. Such calls are usually incorrect in an internationalized environment.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AbsoluteAlignmentInUserInterface",
          "displayName": "Absolute alignment in AWT/Swing code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of absolute alignment constants from AWT and Swing. Internationalized applications use relative alignment because it respects the locale component orientation settings.\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  JPanel panel = new JPanel(new BorderLayout(2, 2));\n  JLabel label = new JLabel(\"Hello World\", SwingConstants.CENTER);\n  panel.add(label, BorderLayout.NORTH);\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TimeToString",
          "displayName": "Call to 'Time.toString()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>toString()</code> calls on <code>java.sql.Time</code> objects. Such calls are usually incorrect in an internationalized\nenvironment.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitDefaultCharsetUsage",
          "displayName": "Implicit platform default charset",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method and constructor calls that implicitly use the platform default charset. These calls can produce different results on\nsystems that use different default charsets. It might result in unexpected behaviour.\n<p><b>Example:</b></p>\n<pre><code>void foo(byte[] bytes) {\n  String s = new String(bytes);\n}</code>\n</pre>\n<p>You can use a quick-fix that specifies the explicit UTF-8 charset if the corresponding overloaded method is available.\n  After the quick-fix is applied:</p>\n<pre><code>void foo(byte[] bytes) {\n  String s = new String(bytes, StandardCharsets.UTF_8);\n}</code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SimpleDateFormatWithoutLocale",
          "displayName": "'SimpleDateFormat' without locale",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of <code>java.util.SimpleDateFormat</code> that do not specify <code>java.util.Locale</code>.\nThese calls might be incorrect in an internationalized environment.\n<p><code>Example:</code></p>\n<pre><code>new SimpleDateFormat(\"yyyy\");</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CharacterComparison",
          "displayName": "Character comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the ordinal comparisons of <code>char</code> values. In an internationalized environment, such comparisons are rarely correct.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringTokenizer",
          "displayName": "Use of StringTokenizer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of the <code>StringTokenizer</code> class. Excessive use of <code>StringTokenizer</code> is incorrect\nin an internationalized environment.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "HardCodedStringLiteral",
          "displayName": "Hardcoded strings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any instances of hardcoded <code>String</code> literals.\n<p>Hardcoded <code>String</code> literals are probably errors in an\ninternationalized environment. This inspection won't report empty strings and strings consisting only of whitespaces. A quick-fix is available\nto transform a string literal into a <code>java.util.ResourceBundle.getString()</code> method call.</p>\n<!-- tooltip end -->\n<p>Use inspection's options to further specialize whether this inspection should report strings in:</p>\n<ul>\n  <li>Assert statements like in <code>assert str.equals(\"message\")</code></li>\n  <li>Exception constructor calls like in <code>new Exception(\"message\")</code></li>\n  <li>JUnit assert calls like in <code>assertEquals(str, \"message\")</code></li>\n  <li>The only argument to a method returning String like in <code>getStringByKey(\"key\")</code></li>\n  <li>Literals with value of legal and existing class name like <code>Class.forName(\"java.lang.Object\")</code></li>\n  <li>Literals with value of legal and existing property key <code>bundle.getString(\"authentication.failed\")</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "DateToString",
          "displayName": "Call to 'Date.toString()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>toString()</code> calls on <code>java.util.Date</code> objects. Such calls are usually incorrect in an internationalized\nenvironment.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateStringLiteralInspection",
          "displayName": "Duplicate string literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports all string literals that are replicated unchanged throughout the project.\n<p>Example:</p>\n<pre><code>\n  class C1 { String CONST1 = \"duplicate string\"; }\n  class C2 { String CONST2 = \"duplicate string\"; }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Min string length</b> field to set the minimal string length required to detect duplicates.</li>\n  <li>Use the <b>Ignore @PropertyKey expressions</b> option to ignore strings passed as arguments to methods annotated with\n    <code>org.jetbrains.annotations.PropertyKey</code>.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnicodeEscape",
          "displayName": "Unnecessary unicode escape sequence",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary unicode escape sequences. For example, when the file encoding can handle the character without escaping it.\nUnicode control characters are not reported by this inspection (except for a line feed and a tab).\n<p><b>Example:</b></p>\n<pre><code>String s = \"\\u0062\";</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Version control",
      "inspections": [
        {
          "shortName": "IgnoreFileDuplicateEntry",
          "displayName": "Ignore file duplicates",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "IgnoreLang",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate entries (patters) in the ignore file (e.g. .gitignore, .hgignore).\nDuplicate entries in these files are redundant and can be removed.\n\n<p>Example:</p>\n<pre>\n    # Output directories\n    /out/\n    /target/\n    <b><span style=\"color: #BE9117; \">/out/</span></b>\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "TestNG",
      "inspections": [
        {
          "shortName": "dependsOnMethodTestNG",
          "displayName": "Illegal method name passed to 'dependsOnMethods'",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html><body>\nReports illegal method names passed to the <code>dependsOnMethods</code> attribute in the <code>@Test</code> annotation.\n<p>A method name is considered illegal if it can't be resolved into a valid, accessible <code>@Test</code> annotated method in the current class\n  or any of its parent classes.</p>\n<p>Example:</p>\n<pre><code>\n  public class SampleTest {\n    @Test(dependsOnMethods = \"testSpellignError\")\n    public void testSample() {}\n    @Test\n    public void testSpellingError(){}\n  }\n</code></pre>\n</body></html>\n"
        },
        {
          "shortName": "ExpectedExceptionNeverThrownTestNG",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exceptions expected by a TestNG test method that are never thrown inside the method body.\n<p><b>Example:</b></p>\n<pre><code>\n  @Test(expectedExceptions = Exception.class) // warning: Expected 'Exception' never thrown\n  public void testEngineIsRunning() {\n    assertTrue(engine.isRunning());\n  }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JUnitTestNG",
          "displayName": "JUnit Test can be converted to TestNG",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any JUnit-based test class that can be converted into TestNG based unit test.\n<p>Example:</p>\n<pre><code>\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    assertEquals(2 + 2, 4);\n  }\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\nimport org.testng.Assert;\nimport org.testng.annotations.Test;\n\npublic class ExampleTest {\n  @Test\n  public void testExample(){\n    Assert.assertEquals(4, 2 + 2);\n  }\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UndeclaredTests",
          "displayName": "Undeclared test",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports test classes that are not registered in <code>testing.xml</code>. This is often a mistake because such tests won't be executed.\n</body>\n</html>"
        },
        {
          "shortName": "DataProviderReturnType",
          "displayName": "Invalid data provider return type",
          "defaultSeverity": "ERROR",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods marked with <code>@DataProvider</code> annotation that doesn't return <code>Object[][]</code> or <code>Iterator&lt;Object&gt;</code>.\nIf another type is returned, TestNG throws an exception.\n<p>Example:</p>\n<pre><code>\npublic class TestNgTest {\n  @DataProvider(name = \"Languages\")\n  List&ltString&gt getData() {\n    return List.of(\"Java\", \"Kotlin\");\n  }\n\n  @Test(dataProvider = \"Languages\")\n  public void testData(String language) {\n    System.out.println(language);\n  }\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "DuplicatedDataProviderNames",
          "displayName": "Duplicated data provider names",
          "defaultSeverity": "ERROR",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>TestNG</code> data providers with equal names if <code>org.testng.TestNGException</code> has occurred.\n<p>Example:</p>\n<pre><code>\n  public class DuplicatedDataProviders {\n    @DataProvider\n    public Object[][] intTestData() { // duplicate 1\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @DataProvider(name = \"intTestData\")\n    public Object[][] someTestData() { // duplicate 2\n      return new Integer[][]{\n        new Integer[]{1, 1},\n      };\n    }\n\n    @Test(dataProvider = \"intTestData\")\n    public void testIsOK(Integer key, Integer value) {\n      assertEquals(key, value);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ConvertOldAnnotations",
          "displayName": "Old TestNG annotation @Configuration is used",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports TestNG <code>org.testng.annotations.Configuration</code> annotations.\n<p>It's better to configure a test suite with the modern <code>@BeforeXXX</code>/<code>@AfterXXX</code> annotations.</p>\n<p>Example:</p>\n<pre><code>\n  public class Test {\n    @Configuration(beforeSuite = true, afterTest = true)\n    public void afterBefore(){\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public class Test {\n    @AfterTest()\n    @BeforeSuite()\n    public void afterBefore(){\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertJavadoc",
          "displayName": "TestNG Javadoc can be converted to annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html><body>\nAsserts your TestNG tests with Javadoc annotations and converts them to JDK annotations.\n<p>Example:</p>\n<pre><code>\n  /**\n    * @testng.before-test\n  */\n  public void sample() {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @BeforeTest\n  public void sample() {}\n</code></pre>\n    <!-- tooltip end -->\n<p>\n</body></html>"
        },
        {
          "shortName": "MalformedDataProvider",
          "displayName": "Data provider problems",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html><body>\nReports references to data provider methods that do not exist or are not accessible.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\npublic class InstanceDataProviderFromForeignClass {\n  // method data() doesn't exist in class A\n  @Test(dataProvider = \"data\", dataProviderClass = A.class)\n  public void test() {\n  }\n}\nclass A { }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n//the needed data() method is created in class A\nclass A {\n  @DataProvider\n  public Object[][] data() {\n    return new Object[][]{};\n  }\n}\n</code></pre>\n</body></html>"
        },
        {
          "shortName": "groupsTestNG",
          "displayName": "Undefined group name",
          "defaultSeverity": "WARNING",
          "pluginId": "TestNG-J",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html><body>\nReports undefined group names passed to the <code>dependsOnGroups</code> or <code>groups</code> attributes in the <code>@Test</code> annotation.\n<p>The quick-fix adds an undefined name to a list of known groups.</p>\n<!-- tooltip end -->\n<p>Use the <b>Defined Groups</b> field to define a comma-separated list of known groups.</p>\n</body></html>"
        }
      ]
    },
    {
      "name": "Unused symbols",
      "inspections": [
        {
          "shortName": "PhpUnusedPrivateMethodInspection",
          "displayName": "Unused private method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the private methods that are never used.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedAliasInspection",
          "displayName": "Unused import",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the imports that are never used.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedLocalVariableInspection",
          "displayName": "Unused local variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are considered unused in the following cases:\n<ul>\n  <li>The value of the variable is not used anywhere or is overwritten immediately.</li>\n  <li>The reference stored in the variable is not used anywhere or is overwritten immediately.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedFieldDefaultValueInspection",
          "displayName": "Redundant property initializer",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports the fields with default initializers that are always overwritten in the class constructor.\n  </body>\n</html>"
        },
        {
          "shortName": "PhpUnused",
          "displayName": "Unused declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports the classes, methods, functions, constants, or properties that\nare not used or not reachable from entry points. It also reports all method implementations/overriders.\n<p>Some unused members might not be reported in the code editor on the fly. Due to performance reasons, a non-private member is checked only\n  when its name rarely occurs in the project.\n</p>\n<p>To see all results, run the inspection in batch mode by using <b>Code | Inspect Code...</b> or <b>Code | Run Inspection by\n  Name...</b>.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedPrivateFieldInspection",
          "displayName": "Unused private property",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the private properties that are never used.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnusedParameterInspection",
          "displayName": "Unused parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters that are considered unused in the following cases:\n  <ul>\n    <li>The parameter is passed by value, and the value is not used anywhere or is overwritten immediately.</li>\n    <li>The parameter is passed by reference, and the reference is not used anywhere or is overwritten immediately.</li>\n  </ul>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "GroovyVariableCanBeFinal",
          "displayName": "Variable can be final",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters or local variables, that may have a final modifier added.\n<p><b>Example:</b></p>\n<pre><code>\n  def list = [1,2,3]\n  return list\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  final def list = [1,2,3]\n  return list\n</code></pre>\n<!-- tooltip end -->\n<p>For more info see the same inspection in Java.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedIncOrDec",
          "displayName": "Unused incrementing or decrementing",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports on unnecessary incrementing and decrementing expressions since their results are never used afterwards.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyVariableNotAssigned",
          "displayName": "Variable not assigned",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variables that might not have been initialized.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases where a variable is redundant as its value is never used after its assignment.\n<p>If the variable is unused, it's better to remove it to shorten the code and to avoid redundant allocations.</p>\n<p>The following cases are reported:</p>\n<ul>\n  <li>the variable never gets read after assignment</li>\n  <li>the value is always overwritten with another assignment before the next variable read</li>\n  <li>the variable initializer is redundant (for one of the above two reasons)</li>\n</ul>\n<!-- tooltip end -->\n<p>For more info see the same inspection in Java.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMissingReturnStatement",
          "displayName": "Missing return statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports missing <code>return</code> statements at the end of methods with a non-<b>void</b> return type.\nThe end of method should be reachable by the methods execution flow.\n<p><b>Example:</b></p>\n<pre>\n<code>\nString foo(int a) {\n  if (a > 0) {\n    return \"more than zero\"\n  }\n} // foo(-1) will return 'null'\n\nint bar(int a) {\n  if (a > 0) {\n    return a\n  }\n} // bar(-1) will fall with runtime exception\n</code>\n</pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Plugin DevKit",
      "inspections": [
        {
          "shortName": "ComponentRegistrationProblems",
          "displayName": "Component type mismatch",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports incorrect registration of plugin components\n(Components and Actions) both in code and in the <code>plugin.xml</code> descriptor.\n<p>\n  The following problems are reported:\n</p>\n<ul>\n  <li>Unresolved component/action implementation-classes (<code>plugin.xml</code>)</li>\n  <li>Unresolved component interface-classes (<code>plugin.xml</code>)</li>\n  <li>Component implementation-class is not assignable to its interface-class (<code>plugin.xml</code>)</li>\n  <li>Incorrect component registration, e.g. <code>ProjectComponent</code> is registered as Application Component,\n    or the class doesn't implement any component interface at all (<code>plugin.xml</code> and Java code)\n  </li>\n  <li>Incorrect class modifiers: Action classes must be <code>public</code> and must have a public\n    no-argument constructor. Additionally, Action and Component implementation classes\n    must not be abstract (<code>plugin.xml</code> and Java code)\n  </li>\n  <li>Duplicate interface-class: A class may only be used once as interface-class (<code>plugin.xml</code>)</li>\n</ul>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Check Plugin Descriptor (plugin.xml)</b> option to disable checks in <code>plugin.xml</code> descriptor.</li>\n  <li>Use the <b>Check Java Actions</b> option to disable checks in Action code.</li>\n  <li>Use the <b>Check Java Code</b> option to disable all checks in code.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "DevKitPropertiesQuotesValidation",
          "displayName": "Quotes validation in properties files",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports wrong number of quotes around parameter in property value.\n<p>\n  If parameters are present in the property value, then the value will be passed as a pattern to <code>java.text.MessageFormat</code>.\n  This means that single quotes are used for escaping. Thus to keep a quote visible, it must be duplicated:\n<ul>\n  <li><code>'{0}'</code> &rarr; <code>{0}</code></li>\n  <li><code>''{0}''</code> &rarr; <code>'$value$'</code></li>\n</ul>\n<p>\n  When using choice format, nested formats are evaluated as formats themselves, and second double quotes are required.\n  When passing <code>1</code>:\n<ul>\n  <li><code>{0, choice, 0#no|#1''{0}'' file}</code> &rarr; <code>{0} files</code></li>\n  <li><code>{0, choice, 0#no|#1''''{0}'''' file}</code> &rarr; <code>'$number_of_files$' files</code></li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Dependency issues",
      "inspections": [
        {
          "shortName": "ClassWithTooManyDependencies",
          "displayName": "Class with too many dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that is directly dependent on too many\nother classes in the project.\n<p>Modifications to any dependency of such class may require changing the class thus making it prone to instability.</p>\n<p>Only top-level classes are reported.</p>\n<!-- tooltip end -->\n<p>Use the <b>Maximum number of dependencies</b> field to specify the maximum allowed number of dependencies for a class.</p>\n<p>\n  Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CyclicPackageDependency",
          "displayName": "Cyclic package dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a package that is mutually or cyclically dependent on other packages.\n<p>Such cyclic dependencies make code fragile and hard to maintain.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependencies",
          "displayName": "Class with too many transitive dependencies",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that is directly or indirectly dependent on too many other classes.\n<p>Modifications to any dependency of such a class may require changing the class thus making it prone to instability.</p>\n<p>Only top-level classes are reported.</p>\n<!-- tooltip end -->\n<p>Use the <b>Maximum number of transitive dependencies</b> field to specify the maximum allowed number of direct or indirect dependencies\n  for a class.</p>\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyTransitiveDependents",
          "displayName": "Class with too many transitive dependents",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class on which too many other classes are directly or indirectly dependent.\n<p>Any modification to such a class may require changing many other classes, which may be expensive.</p>\n<p>Only top-level classes are reported.</p>\n<!-- tooltip end -->\n<p>Use the <b>Maximum number of transitive dependents</b> field to specify the maximum allowed number of direct or indirect dependents\n  for a class.</p>\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousPackagePrivateAccess",
          "displayName": "Suspicious package-private access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a code fragment that uses or overrides a package-private member declared in the same package but in another module.\n<p>If the declaring classes are loaded by different loaders, the code that accesses a package-private member will fail with\n  <code>IllegalAccessError</code> at runtime.</p>\n<p>If a method overrides a package-private method from a class that is loaded by a different loader, it won't be invoked when the super\n  method is called on an instance of the implementing class.</p>\n<p>If a method implements an abstract package-private method from a class that is loaded by a different loader,\n  calling the super method on an instance of the implementing class will fail with <code>AbstractMethodError</code>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithTooManyDependents",
          "displayName": "Class with too many dependents",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class on which too many other classes are directly dependent.\n<p>Any modification to such a class may require changing many other classes, which may be expensive.</p>\n<p>Only top-level classes are reported.</p>\n<!-- tooltip end -->\n<p>Use the field below to specify the maximum allowed number of dependents for a class.</p>\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CyclicClassDependency",
          "displayName": "Cyclic class dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that is mutually or cyclically dependent on other classes.\n<p>Such cyclic dependencies make code fragile and hard to maintain.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "GroovySynchronizedMethod",
          "displayName": "Synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>synchronized</code> modifier on methods.\n<p>\n  Some coding standards\n  prohibit the use of the <code>synchronized</code> modifier, in favor of <code>synchronized</code> statements.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnNonFinalField",
          "displayName": "Synchronization on non-final field",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>synchronized</code> statements where the lock expression\nis a non-<code>final</code> field.\n<p>\n  Such statements are unlikely to have useful semantics, as different\n  threads may be locking on different objects even when operating on the same object.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyBusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Thread.sleep()</code> that occur inside loops.\n<p>\n  Such calls are indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\n  as busy-waiting threads do not release locked resources.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyThreadStopSuspendResume",
          "displayName": "Call to Thread.stop(), Thread.suspend(), or Thread.resume()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Thread.stop()</code>,<code>Thread.suspend()</code>, or <code>Thread.resume()</code>.\n<p>\n  These calls are inherently prone to data corruption and deadlock, and their use is strongly\n  discouraged.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports accesses to a non-constant static field which is\nlocked on either <code>this</code> or an instance field of <code>this</code>.\n<p>\n  Locking a static field on instance data does not prevent the field from being\n  modified by other instances, and thus may result in surprising race conditions.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  static String s;\n  def foo() {\n      synchronized (this) {\n          System.out.println(s); // warning\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnconditionalWait",
          "displayName": "Unconditional 'wait' call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>wait()</b>\nbeing called unconditionally within a synchronized context.\nNormally, <b>wait()</b> is\nused to block a thread until some condition is true. If <b>wait()</b>\nis called unconditionally, that often indicates that the condition was checked before a lock was\nacquired. In that case a data race may occur, with the condition becoming true between the time\nit was checked and the time the lock was acquired. While constructs found by this inspection\nare not necessarily incorrect, they are certainly worth examining.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnVariableInitializedWithLiteral",
          "displayName": "Synchronization on variable initialized with literal",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronized blocks which lock on an object which is initialized with a literal.\n<p>\n  String literals are interned and <code>Number</code> literals can be allocated from a cache. Because of\n  this, it is possible that some other part of the system which uses an object initialized with the same\n  literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock\n  situations, if the string was thought to be private.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnsynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports non-<b>synchronized</b> methods overriding <b>synchronized</b> methods.\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Base {\n      <b>synchronized</b> void foo() {\n          // ...\n      }\n  }\n  class Derived extends Base {\n      @Override\n      <b>void foo()</b> {\n          super.foo()\n            // ...\n        }\n    }\n</code></pre>\n<p>Here the non-synchronized method <code>foo()</code> in class <code>Bar</code> overrides synchronized method.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports double-checked locking.\n<p>\n  Double-checked locking tries to initialize a field on demand and in a thread-safe manner, while avoiding the cost of synchronization.\n  Unfortunately it is not thread safe when used on a field that is not declared <code>volatile</code>.\n  When using Java 1.4 or older, double-checked locking doesn't work even with a <code>volatile</code> field.\n  See <a href=\"https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">the article</a> for an explanation of the problem.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n      private Helper helper = null\n\n      Helper getHelper() {\n          if (helper == null)\n              synchronized(this) {\n                  if (helper == null) {\n                      helper = new Helper()\n                  }\n              }\n          }\n          return helper;\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptySyncBlock",
          "displayName": "Empty 'synchronized' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>synchronized</code> statements\nwith empty bodies. While theoretically this may be the semantics intended, this construction is\nconfusing, and often the result of a typo.\n<p><b>Example:</b></p>\n<pre>\n<code>\nsynchronized(lock) {\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNotifyWhileNotSynchronized",
          "displayName": "'notify()' or 'notifyAll()' while not synced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>notify()</code> and <code>notifyAll()</code> not within a corresponding\nsynchronized statement or synchronized method.\n<p>\n  Calling these methods on an object\n  without holding a lock on that object will result in an <code>IllegalMonitorStateException</code> being thrown.\n  Such a construct is not necessarily an error, as the necessary lock may be acquired before\n  the containing method is called, but it's worth looking at.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <code>synchronized</code> statements.\n<p>\n  Nested <code>synchronized</code> statements\n  are either redundant (if the lock objects are identical) or prone to deadlock.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitWhileNotSynchronized",
          "displayName": "'wait()' while not synced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a corresponding synchronized\nstatement or synchronized method. Calling <b>wait()</b> on an object\nwithout holding a lock on that object will result in an <b>IllegalMonitorStateException</b> being thrown.\nSuch a construct is not necessarily an error, as the necessary lock may be acquired before\nthe containing method is called, but its worth looking at.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>final</code>, non-<code>private</code> fields which are accessed in a synchronized context.\n<p>\n  A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\n  access may result in unexpectedly inconsistent data structures. Accesses in constructors an initializers are ignored\n  for purposes of this inspection.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWhileLoopSpinsOnField",
          "displayName": "While loop spins on field",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports on <code>while</code> loops which spin on the\nvalue of a non-<code>volatile</code> field, waiting for it to be changed by another thread.\n<p>\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops likely have different semantics than intended. The Java Memory Model allows that loop to never complete even\nif another thread changes the field's value.\n</p>\n<p><b>Example</b>:</p>\n<pre><code>\n  class SpinsOnField {\n      boolean ready = false;\n\n      void run() {\n          // the loop may never complete even after\n          // markAsReady call from the other thread\n          while (!ready) {\n          }\n          // do some work\n      }\n\n      void markAsReady() {\n          ready = true;\n      }\n  }\n</code></pre>\n<p>\nAdditionally since Java 9 it's recommended to call <code>Thread.onSpinWait()</code> inside spin loop\non a <code>volatile</code> field which may significantly improve performance on some hardware.\n</p>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to have this inspection report only about empty <code>while</code> loops.\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySystemRunFinalizersOnExit",
          "displayName": "Call to System.runFinalizersOnExit()",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>System.runFinalizersOnExit()</code>.\n<p>\n  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\n  may result in data corruption, deadlock, and may affect parts of the program far removed from its call point.\n  It is deprecated, and its use is strongly discouraged.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovySynchronizationOnThis",
          "displayName": "Synchronization on 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization which uses <code>this</code> as its lock expression.\n<p>\n  Constructs reported include <code>synchronized</code>\n  blocks which lock <code>this</code>, and calls to <code>wait()</code>\n  <code>notify()</code> or <code>notifyAll()</code> which target <code>wait()</code>.\n  Such constructs, like synchronized methods, make it hard to track just who is locking on a given\n  object, and make possible \"denial of service\" attacks on objects. As an alternative, consider\n  locking on a private instance variable, access to which can be completely controlled.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyWaitCallNotInLoop",
          "displayName": "'wait()' not in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <b>wait()</b> not made inside a loop. <b>wait()</b> is normally\nused to suspend a thread until a condition is true, and that condition should be checked after the <b>wait()</b>\nreturns. A loop is the clearest way to achieve this.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Replaceable assignments",
      "inspections": [
        {
          "shortName": "PhpAssignmentReplaceableWithOperatorAssignmentInspection",
          "displayName": "Assignment replaceable with operator assignment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that can be replaced with combined operator assignments (for example, <code>+=</code>).\n</body>\n</html>"
        },
        {
          "shortName": "PhpAssignmentReplaceableWithPrefixExpressionInspection",
          "displayName": "Assignment replaceable with increment or decrement",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that can be replaced with incrementing (<code>++</code>) or decrementing (<code>--</code>) operations.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Embedded",
      "inspections": [
        {
          "shortName": "ArrayLengthInLoopCondition",
          "displayName": "Array.length in loop condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses to the <code>.length</code> property of an array in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(Object[] x) {\n    for (int i = 0; i &lt; x.length; i++) { /**/ }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PrivateMemberAccessBetweenOuterAndInnerClass",
          "displayName": "Synthetic accessor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports references from a nested class to non-constant <code>private</code> members of an outer class.\nFor such references, javac will generate package-private synthetic accessor methods,\nwhich may compromise the security because members appearing to be private will in fact be accessible from the entire package.\n<p>\n  A nested class and its outer class are compiled to separate\n  class files. The Java virtual machine normally prohibits access from a class to private fields and methods of\n  another class. To enable access from a nested class to private members of an outer class, javac creates a package-private\n  synthetic accessor method.\n</p>\n<p>\n  By making the <code>private</code> member package-private instead, the actual accessibility is made explicit.\n  This also saves a little bit of memory, which may improve performance in resource constrained environments.\n</p>\n<p>\n  This inspection does not report if the language level is set to Java 11 or higher\n  because thanks to nest-based access control (JEP 181), accessor methods are not generated anymore.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Outer {\n    private void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  class Outer {\n    void x() {}\n\n    class Inner {\n      void y() {\n        x();\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CheckForOutOfMemoryOnLargeArrayAllocation",
          "displayName": "Large array allocation with no OutOfMemoryError check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports large array allocations which do not check\nfor <code>java.lang.OutOfMemoryError</code>. In memory\nconstrained environments, allocations of large data objects should probably\nbe checked for memory depletion.\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the option to specify the maximum number of elements to allow in unchecked array allocations.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "MultiplyOrDivideByPowerOfTwo",
          "displayName": "Multiply or divide by power of two",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports multiplication of an integer value by a constant integer that can be represented as a power of two. Such\nexpressions can be replaced with right or left shift operations\nfor a possible performance improvement.\n<p>\n  Note that this inspection is not relevant for modern JVMs (e. g.,\n  HotSpot or OpenJ9) because their JIT compilers will perform this optimization.\n  It might only be useful in some embedded systems where no JIT compilation is performed.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  int y = x * 4;\n</code></pre>\n<p>A quick-fix is suggested to replace the multiplication or division operation with the shift operation:</p>\n<pre><code>\n  int y = x &lt;&lt; 2;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to make the inspection also report division by a power of two.\n  Note that replacing a power of two division with a shift does not work for negative numbers.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ConnectionResource",
          "displayName": "Connection opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports Java ME <code>javax.microedition.io.Connection</code> resources that are not opened in front of a <code>try</code> block and\nclosed in the corresponding <code>finally</code> block. Such resources may be inadvertently leaked if an exception is thrown before the\nresource is closed.\n<p><b>Example:</b></p>\n<pre><code>\n  void example() throws IOException {\n    Connection c = Connector.open(\"foo\");\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RecordStoreResource",
          "displayName": "'RecordStore' opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports Java ME <code>javax.microedition.rms.RecordStore</code> resources that are not opened in front\nof a <code>try</code> block and closed in the corresponding <code>finally</code> block.\n<p>Such resources may be inadvertently leaked if an exception is thrown before the resource is closed.</p>\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo1() throws RecordStoreException {\n      RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // warning\n  }\n  void foo2() throws RecordStoreException {\n      RecordStore rs = RecordStore.openRecordStore(\"bar\", true); // no warning\n      try {\n          /* ... */\n      } finally {\n          rs.closeRecordStore();\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceWithOnlyOneDirectInheritor",
          "displayName": "Interface which has only one direct inheritor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces that have precisely one direct inheritor.\nWhile such interfaces may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments,\nthey needlessly increase the total footprint of the application. Consider\nmerging the interface with its inheritor.\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AbstractClassWithOnlyOneDirectInheritor",
          "displayName": "Abstract class which has only one direct inheritor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports abstract classes that have precisely one\ndirect inheritor. While such classes may offer admirable clarity of design,\nin memory-constrained or bandwidth-limited environments, they needlessly increase\nthe total footprint of the application. Consider merging the abstract class with its inheritor.\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Base {} // will be reported\n\n  class Inheritor extends Base {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SingleCharacterStartsWith",
          "displayName": "Single character 'startsWith()' or 'endsWith()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>String.startsWith()</code> and\n<code>String.endsWith()</code> where single character string literals are passed as an argument.\n<p>\n  A quick-fix is suggested to replace such calls with more efficiently implemented <code>String.charAt()</code>.\n</p>\n<p>\n  However, the performance gain of such change is minimal and the code becomes less readable because of the extra non-zero length check,\n  so it is recommended to apply the quick-fix only inside tight loops.\n</p>\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  boolean startsWithX(String s) {\n    return s.startsWith(\"x\");\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean startsWithX(String s) {\n    return !s.isEmpty() && s.charAt(0) == 'x';\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MethodCallInLoopCondition",
          "displayName": "Method call in loop condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls in the condition part of a\nloop statement. In highly resource constrained environments, such calls may\nhave adverse performance implications.\n<p>\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n  This inspection is intended for Java ME and other highly resource constrained environments.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  String s = \"example\";\n  for (int i = 0; i &lt; s.length(); i++) {\n    System.out.println(s.charAt(i));\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String s = \"example\";\n  int length = s.length();\n  for (int i = 0; i &lt; length; i++) {\n    System.out.println(s.charAt(i));\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to ignore calls to common Java iteration methods like <code>Iterator.hasNext()</code>\n  and known methods with side-effects like <code>Atomic*.compareAndSet</code>.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLargePrimitiveArrayInitializer",
          "displayName": "Overly large initializer for array of primitive type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports array initializer expressions for primitive\narrays that contain too many elements. Such initializers may result in overly large\nclass files because code must be generated to initialize each array element. In memory\nor bandwidth constrained environments, it may be more efficient to load large arrays\nof primitives from resource files.\n<p>\n  This inspection is intended for Java ME and other highly resource constrained environments.\n  Applying the results of this inspection without consideration might have negative effects on code clarity and design.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the option to specify the maximum number of elements to allow in primitive array initializers.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 9",
      "inspections": [
        {
          "shortName": "ReplaceNullCheck",
          "displayName": "Null check can be replaced with method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports null checks that can be replaced with an <code>Objects</code>/<code>Stream</code> static method.\n<p><b>Example:</b></p>\n<pre><code>\nif (message == null) {\n  application.messageStorage().save(new EmptyMessage());\n} else {\n  application.messageStorage().save(message);\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  application.messageStorage()\n    .save(Objects.requireNonNullElseGet(message, () -> new EmptyMessage()));\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Don't warn if length of replacement bigger than original</b> option to ignore the cases when the replacement is longer than the\n  original code.\n</p>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaRequiresAutoModule",
          "displayName": "Dependencies on automatic modules",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of automatic modules in the <code>requires</code> directive.\n<p>An automatic\nmodule is unreliable since it can depend on the types on the class path,\nand its name and exported packages could change if and when it's\n  converted into an explicit module.</p>\n<p>Corresponds to <code>-Xlint:requires-automatic</code> and <code>-Xlint:requires-transitive-automatic</code> Javac options.\nThe first option increases awareness of when automatic modules are used.\nThe second warns the authors of a module that they're putting the users of that module at risk by establishing implied readability to an automatic module.\n<p><b>Example:</b></p>\n<pre>\n  //module-info.java\n  module org.printer {\n    requires transitive drivers.corp.org; // reported in case 'drivers.corp.org' is an automatic module\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Highlight only transitive dependencies</b> option to warn only about transitive dependencies.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9CollectionFactory",
          "displayName": "Immutable collection creation can be replaced with collection factory call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>java.util.Collections</code> unmodifiable collection calls\nthat can be converted to newer collection factory methods.\nThese can be replaced with e.g. <code>List.of()</code> or <code>Set.of()</code> introduced in Java 9\nor <code>List.copyOf()</code> introduced in Java 10.\n\n<p>Note that in contrast to <code>java.util.Collections</code> methods, Java 9 collection factory methods:\n<ul>\n  <li>Do not accept <code>null</code> values.\n  <li>Require unique set elements and map keys.\n  <li>Do not accept <code>null</code> arguments to query methods like <code>List.contains()</code> or <code>Map.get()</code> of the collections returned.\n</ul>\n<p>When these cases are violated, exceptions are thrown.\n  This can change the semantics of the code after the migration.</p>\n<p>Example:\n<pre><code>\n  List&lt;Integer> even = Collections.unmodifiableList(\n    Arrays.asList(2, 4, 6, 8, 10, 2));\n  List&lt;Integer> evenCopy = Collections.unmodifiableList(\n    new ArrayList&lt;>(list1));\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  List&lt;Integer> even = List.of(2, 4, 6, 8, 10, 2);\n  List&lt;Integer> evenCopy = List.copyOf(list);\n</code></pre>\n\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 9 or higher.\n<p>\nUse the <b>Do not warn when content is non-constant</b> option to report only in cases when the supplied arguments are compile-time constants.\nThis reduces the chances that the behavior changes,\nbecause it's not always possible to statically check whether original elements are unique and not <code>null</code>.\n<p>\n  Use the <b>Suggest 'Map.ofEntries'</b> option to suggest replacing unmodifiable maps with more than 10 entries with  <code>Map.ofEntries()</code>.\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Attributes",
      "inspections": [
        {
          "shortName": "PhpClassCantBeUsedAsAttributeInspection",
          "displayName": "Class cannot be used as attribute",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attributes that are resolved to a class not annotated with <code>#[Attribute]</code>.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpAttributeCanBeAddedToOverriddenMemberInspection",
          "displayName": "Attribute can be added to overriding member ",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods' and parameters' attributes that can be propagated to overriding methods/parameters.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayShapeAttributeCanBeAddedInspection",
          "displayName": "'#[ArrayShape]' attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods and functions that are returning arrays with known non-trivial keys. Suggests specifying the shape of the returned array via the <code>#[ArrayShape]</code> attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpectedValuesShouldBeUsedInspection",
          "displayName": "Expected values should be used",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the values in assignment and comparison expressions that should be replaced with one of the expected values (that is, the values specified via the <code>#[ExpectedValues]</code> attribute).\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpAttributeIsNotRepeatableInspection",
          "displayName": "Non-repeatable attribute",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports repeated attributes without the <code>Attribute::IS_REPEATABLE</code> flag in their arguments declaration.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNoReturnAttributeCanBeAddedInspection",
          "displayName": "NoReturn attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function without <code>#[NoReturn]</code> that are always halting their execution by calling other exitPoint functions attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantAttributeParenthesisInspection",
          "displayName": "Redundant parentheses in attribute",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports empty arguments lists in attributes.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInapplicableAttributeTargetDeclarationInspection",
          "displayName": "Non-applicable attribute target declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the attributes that do not have the appropriate <code>Attribute::TARGET_*</code> flag in their arguments declaration.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPureAttributeCanBeAddedInspection",
          "displayName": "'#[Pure]' attribute can be added",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the functions that are non-trivially pure. Such functions have other functions calls in their body, but all such calls do not produce any side effects.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPureFunctionMayProduceSideEffectsInspection",
          "displayName": "Pure function may produce side effects",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>#[Pure]</code> annotations used on functions that may produce side effects.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayKeyDoesNotMatchArrayShapeInspection",
          "displayName": "Array key does not match array shape ",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the array keys that do not match the keys specified via the <code>#[ArrayShape]</code> attribute.\n</body>\n</html>"
        },
        {
          "shortName": "PhpImmutablePropertyIsWrittenInspection",
          "displayName": "Immutable property written in invalid scope",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nHighlights write access references to properties, for which the write access scope declared via <code>#[Immutable]</code> is stricter than the reference scope.\n</body>\n</html>"
        },
        {
          "shortName": "PhpLineCommentWillBeParsedAsAttributeInspection",
          "displayName": "Comment is parsed as attribute in PHP 8.0",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports line comments starting with <code>#[</code>. In PHP 8.0 and later, such comments are parsed as attributes.\n  <p>\n    See <a href=\"https://wiki.php.net/rfc/attributes_v2\">Attributes (php.net)</a> for details.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "SQL",
      "inspections": [
        {
          "shortName": "SqlDeprecateTypeInspection",
          "displayName": "Deprecated type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of types that are deprecated and might disappear in future versions of DBMS.\n<p>Reported types:</p>\n<ul>\n  <li>LONG in Oracle (see <a href=\"https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690\" target=\"_blank\">Deprecated\n    and Desupported Features at docs.oracle.com</a>).\n  </li>\n  <li>TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see <a\n      href=\"https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15\"\n      target=\"_blank\">Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com</a>).\n  </li>\n</ul>\n<p>Example (Oracle):</p>\n<pre><code>CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlCaseVsIfInspection",
          "displayName": "Using CASE instead of conditional function and vice versa",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when CASE and IF are interchangeable.\n<p>Example (MySQL):</p>\n<pre><code>SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;</code></pre>\n<p>To keep your code short, you can replace the CASE structure with IF. You can do that by applying the <b>Replace with 'IF' call</b>\n  intention action. The example code will look as follows:</p>\n<pre><code>SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;</code></pre>\n<p>To revert IF to CASE, click IF and apply the <b>Replace with CASE expression</b> intention action.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantOrderingDirectionInspection",
          "displayName": "Redundant ordering direction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;</code></pre>\n<p>The ORDER BY keyword sorts the records in the ascending order by default. So, the <code>ASC</code> keyword for <code>a</code> and\n  <code>c</code> columns is redundant.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlShadowingAliasInspection",
          "displayName": "Column is shadowed by alias",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports SELECT aliases with names that match column names in the FROM clause.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;</code></pre>\n<p>The <code>a</code> column uses the <code>b</code> alias but the <code>b</code> name is also used by the column from the <code>foo</code>\ntable.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlIdentifierLengthInspection",
          "displayName": "Excessively long identifiers",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports identifiers that are considered too long. The length limitation is different\n  for different databases.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n(\n   ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo int\n);</code></pre>\n<p>In MySQL, the identifier must not exceed 64 characters.</p>\n<p>Consider the following limitations for different databases:</p>\n<ul>\n  <li><p>Sybase ASE:</p>\n    <ul>\n      <li>253 for quoted names</li>\n      <li>255 for unquoted names</li>\n    </ul>\n  </li>\n  <li><p>Db2 LUW:</p>\n    <ul>\n      <li>18 for BUFFER POOL, INDEX EXTENSION, TABLESPACE, TRANSFORM, and TYPE MAPPING</li>\n      <li>128 for other objects</li>\n    </ul>\n  </li>\n  <li>Db2 iSeries: 128</li>\n  <li><p>Db2 z/OS:</p>\n    <ul>\n      <li>8 for DATABASE and TABLESPACE</li>\n      <li>30 for columns and cursors with WITH RETURN</li>\n      <li>128 for other objects</li>\n    </ul>\n  </li>\n  <li>Derby: 128</li>\n  <li>Exasol: 128</li>\n  <li>HSQLDB: 128</li>\n  <li><p>MySQL:</p>\n    <ul>\n      <li>256 for aliases in queries</li>\n      <li>32 for USER and ROLE</li>\n      <li>64 for other objects</li>\n    </ul>\n  </li>\n  <li><p>MariaDB:</p>\n    <ul>\n      <li>80 for USER</li>\n      <li>128 for ROLE</li>\n      <li>Other objects as in MySQL</li>\n    </ul>\n  </li>\n  <li>Microsoft SQL Server: 128</li>\n  <li>Vertica: 128</li>\n  <li>SQL 92: 128</li>\n  <li>Snowflake: 255</li>\n  <li>Redshift: 127</li>\n  <li>PostgreSQL/Greenplum/Cockroach: 63</li>\n  <li><p>Oracle:</p>\n    <ul>\n      <li><p>Long names are enabled (<code>database.oracle.names.long</code> is specified, Oracle version is earlier than 12.2 or is unknown):</p>\n        <ul>\n          <li>30 for DISKGROUP, ROLLBACK SEGMENT, TABLESPACE, and PLUGGABLE DATABASE</li>\n          <li>8 for DATABASE</li>\n          <li>128 for other objects</li>\n        </ul>\n      </li>\n      <li>Long names are disabled:\n        <ul>\n          <li>8 for DATABASE</li>\n          <li>128 for DATABASE LINK</li>\n          <li>30 for other objects</li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertValuesInspection",
          "displayName": "VALUES clause cardinality",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when a number of parameters in VALUES does not match a number of columns\n  in a target table.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)</code></pre>\n<p>The <code>foo</code> table has three columns but in the INSERT INTO statement we pass four.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlGotoInspection",
          "displayName": "Usages of GOTO statements",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of backward GOTO statements and GOTO statements used to exit a loop.\n<p>The extensive use of GOTO statements is generally\n  not recommended. For details, see <a href=\"https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql\">GOTO statement in\n    SQL\n    procedures at ibm.com</a>.</p>\n\n<p>Instead of jumping back to a previous statement using GOTO, consider using a loop.</p>\n<p>Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).</p>\n<p>Example (Oracle):</p>\n<pre><code>CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    &lt;&lt;a&gt;&gt; x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    &lt;&lt;b&gt;&gt; x := 3;\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlCallNotationInspection",
          "displayName": "Using of named and positional arguments",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n<p>Example (In PostgreSQL):</p>\n<pre><code>CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlAmbiguousColumnInspection",
          "displayName": "Ambiguous reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports columns that have identical names but belong to different tables.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;</code></pre>\n<p>The <code>id</code> column appears in <code>foo</code> and <code>bar</code> tables. You need to qualify the column name to\n  make the query correct.</p>\n<pre><code>SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlResolveInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved SQL references.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;</code></pre>\n<p>The <code>users.id</code> column is unresolved because the <code>users</code> table is missing in the FROM clause.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlAutoIncrementDuplicateInspection",
          "displayName": "Auto-increment duplicate",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can\n  have only one field with a auto-increment option, and this field must be a key.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);</code></pre>\n<p>The AUTO_INCREMENT constraint for <code>c2</code> will be highlighted as <code>c1</code> already has this constraint. To fix the warning,\n  you can make <code>id</code> a primary key and delete AUTO_INCREMENT for <code>c2</code>.</p>\n<pre><code>CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlNoDataSourceInspection",
          "displayName": "No data sources configured",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the absence of data sources in the <b>Database</b> tool window\n  (<b>View | Tool Windows | Database</b>).\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedSubqueryItemInspection",
          "displayName": "Unused subquery item",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;</code></pre>\n<p>We reference <code>a</code> and <code>q</code> aliases from a subquery. But the <code>b</code> alias and the <code>id</code> column are\n  not referenced in the outer SELECT statement. Therefore, <code>b</code> and <code>id</code> are grayed out.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unreachable statements inside SQL routines.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;</code></pre>\n<p>In Microsoft SQL Server, the <code>THROW</code> statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\n  construct. Therefore, the <code>RETURN 1;</code> part will never be executed.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlIdentifierInspection",
          "displayName": "Identifier should be quoted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when you use SQL reserved keywords as identifier names in your query.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);</code></pre>\n<p>We use <code>select</code>, <code>identity</code>, and <code>order</code> as table and column names.\n  But they are also reserved keywords in Microsoft SQL Server.\n  Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n  <b>Quote identifier</b> quick-fix.</p>\n<p>After the quick-fix is applied:</p>\n<pre><code>CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlStorageInspection",
          "displayName": "SQL source modification detection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when source code of a database object has been changed.\n  <p>The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\n  object, run statements, and perform code refactoring.\n  Also, you can run introspection by right-clicking an object and selecting <b>Refresh</b>.</p>\n\n<p>The inspection covers the following situations:</p>\n\n<ul>\n  <li>Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server,\n  Oracle, and Sybase ASE.</li>\n  <li>You changed the object source code, introspected the database, but source code has been already changed by someone else.</li>\n  <li>The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous\n    introspector version.</li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "SqlMisleadingReferenceInspection",
          "displayName": "Misleading references",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ambiguous references in SQL code.\n<p>For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\n    results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.</p>\n    <p>Example (PostgreSQL):</p>\n    <pre><code>CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;</code></pre>\n  <p>In PostgreSQL, you can use the <code>#variable_conflict</code> directives to explicitly specify a correct reference. For example,\n    use <code>#variable_conflict use_column</code> to refer to a column name, or <code>#variable_conflict use_variable</code> to refer to a\n    parameter.</p>\n<pre><code>CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlCaseVsCoalesceInspection",
          "displayName": "Using CASE instead of COALESCE function and vice versa",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: <b>Replace\n  with 'COALESCE' call</b> and the opposite one <b>Replace with CASE expression</b>.\n<p>Example (MySQL):</p>\n<pre><code>SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;</code></pre>\n<p>In the example, the CASE statement can be replaced with <code>SELECT COALESCE(C1, 0)</code> that produces the same output.</p>\n<p>If you prefer using CASE expressions, select the <b>Prefer CASE expressions over COALESCE function</b> option on\nthe inspection page.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnicodeStringLiteralInspection",
          "displayName": "Unicode usage in SQL",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports string literals that use national characters without the <code>N</code> prefix.\n<p>Without the N prefix, the string is converted to the default\n  code page of the database. This default code page may not recognize certain characters. For more information, see\n  <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql\" target=\"_blank\">nchar and nvarchar\n    (Transact-SQL)\n    at docs.microsoft.com</a>.</p>\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;</code></pre>\n<p>The <code>SELECT 'абвгд' AS c;</code> does not have the <code>N</code> prefix, the <code>'абвгд'</code> part will be highlighted.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlDerivedTableAliasInspection",
          "displayName": "Each derived table should have alias",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports derived tables without aliases.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);</code></pre>\n<p>According to <a href=\"https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html\">Derived Tables at dev.mysql.com</a>, an alias is\n  mandatory. You can add the alias by using the <b>Introduce alias</b> quick-fix.</p>\n<p>After the quick-fix is applied:</p>\n<pre><code>SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertIntoGeneratedColumnInspection",
          "displayName": "Insertion into generated columns",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly\n  written.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);</code>\n</pre>\n<p>You cannot insert <code>2</code> into the <code>col2</code> column because this column is generated.\n  For this script to work, you can change <code>2</code> to DEFAULT.</p>\n<code>INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);</code>\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedCteInspection",
          "displayName": "Unused common table expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unused common table expressions (CTE) inside the query.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;</code></pre>\n<p>By using WITH, we create a temporary named result set with the name <code>a</code>, also known as a common table expression (CTE). But\n  we do not use this CTE later in the code. The unused CTE is greyed out.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlMultipleLimitClausesInspection",
          "displayName": "Multiple row limiting/offset clauses in queries",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of multiple row limiting clauses in a single query.\n\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;</code></pre>\n\n<p>The SELECT TOP clause is used to specify that only 1 record must be\n  returned. The FETCH clause specifies the number of rows to return after the OFFSET\n  clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlJoinWithoutOnInspection",
          "displayName": "Unsafe 'join' clause in 'delete' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports missing conditional checks for statements that might modify the whole database.\n<p>For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\n  contents of the entire table.</p>\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlCurrentSchemaInspection",
          "displayName": "Current console schema introspected",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports schemas and databases in the current session that are not introspected.\n<p>For example, this warning might occur when you try to create a table in the schema that is not introspected.</p>\n<p>Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\n  inspected to detect tables, columns, functions, and other elements with their attributes.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlUnusedVariableInspection",
          "displayName": "Unused variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unused arguments, variables, or parameters.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;</code></pre>\n<p>The <code>PARAMUNUSED</code> parameter is not used in the function and might be deleted.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlStringLengthExceededInspection",
          "displayName": "Implicit string truncation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variables that exceed the defined length in characters.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;</code></pre>\n<p>The <code>myVarExceeded</code> variable is defined as <code>VARCHAR(5)</code> but both assigned values (<code>'abcde12345'</code> and\n  <code>'123456789'</code>) exceed this limitation. You can truncate assigned values or increase the defined length.\n  To increase the length, use the <b>Increase type length</b> quick-fix.\n</p>\n<p>After the quick-fix is applied:</p>\n<pre><code>CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlWithoutWhereInspection",
          "displayName": "Delete or update statement without where clauses",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of DELETE or UPDATE statements without WHERE clauses.\n  <p>Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.</p>\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlRedundantElseNullInspection",
          "displayName": "Redundant ELSE NULL clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant ELSE NULL clauses.\n<p>Example (MySQL):</p>\n<pre><code>SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;</code></pre>\n<p>The <code>ELSE NULL</code> part will never be executed and may be omitted.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantLimitInspection",
          "displayName": "Redundant row limiting in queries",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant row limiting clauses like FETCH and LIMIT in queries.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);</code></pre>\n<p>To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first <code>N</code> rows and this will\ninfluence the output.</p>\n<pre><code>SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlNamedArgumentsInspection",
          "displayName": "Named arguments should be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports arguments that are used without names in routine calls. By default, this inspection is disabled.\n<p>For more information about the difference between named and unnamed parameters, see <a\n    href=\"https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters\">\n    Binding Parameters by Name (Named Parameters) at docs.microsoft.com\n  </a>.</p>\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;</code></pre>\n<p>Parameters <code>1, 2</code> in the <code>foo 1, 2;</code> call are highlighted because they miss names.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports statements that might lead to modification of a database during a read-only connection. <p>To enable read-only mode for a\n  connection,\n  right-click a data source in the <b>Database</b> tool window (<b>View | Tool Windows | Database</b>) and select <b>Properties</b>.\n  In the <b>Data Sources and Drivers</b> dialog, click the <b>Options</b> tab and select the <b>Read-only</b> checkbox.</p>\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);</code></pre>\n<p>As <code>CREATE TABLE</code> and <code>INSERT INTO</code> statements lead to a database modification, these statements will be highlighted\n  in read-only connection mode.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlNullComparisonInspection",
          "displayName": "Null comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparisons with NULL that can be replaced with IS NULL or IS NOT NULL operators.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE foo ( id int );\n\nSELECT * FROM foo WHERE NULL = NULL;\nSELECT * FROM foo WHERE NULL != NULL;</code></pre>\n<p>The <code>NULL = NULL</code> can be replaced with <code>IS NULL</code>, the <code>NULL != NULL</code> comparison\n  with <code>IS NOT NULL</code>. To do this replacement, you can use <b>Use IS NULL operator</b> or <b>Use IS NOT NULL operator</b>\n  quick-fixes.</p>\n<pre><code>SELECT * FROM foo WHERE NULL IS NULL;\nSELECT * FROM foo WHERE NULL IS NOT NULL;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingColumnAliasesInspection",
          "displayName": "Missing column aliases",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantCodeInCoalesceInspection",
          "displayName": "Redundant code in COALESCE call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n<p>Example (MySQL):</p>\n<pre><code>SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;</code></pre>\n<p>The first NOT NULL argument is <code>42</code>, all other arguments will be grayed out.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlMissingReturnInspection",
          "displayName": "Missing return statement",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports functions that have no RETURN statements.\n\n<p>Example (Oracle):</p>\n\n<pre>\n<code>CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;\n</code></pre>\n\n<p>The <code>foo</code> function must return the integer value but the function body returns nothing. To fix the error,\n  add a RETURN statement (for example, <code>return 1;</code>).</p>\n\n<pre><code>CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlAddNotNullColumnInspection",
          "displayName": "Adding not null column without default value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports attempts to create NOT NULL columns without DEFAULT values.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;</code></pre>\n<p>By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\n  If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n</p>\n<pre><code>ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;</code></pre>\n<p>You can quickly add the DEFAULT value by using the <b>Add DEFAULT value</b> quick-fix.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlIllegalCursorStateInspection",
          "displayName": "Illegal cursor state",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports illegal cursor states inside SQL routines.\n<ul>\n  <li>A routine has CLOSE or FETCH statements but a cursor might be closed.</li>\n  <li>A routine has the OPEN statement but a cursor might be opened.</li>\n</ul>\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;</code></pre>\n<p>According to <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql\">CLOSE (Transact-SQL) at\n  docs.microsoft.com</a>, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\n  already closed. So, we need to open the cursor to fix the warning.</p>\n<pre><code>CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlDtInspection",
          "displayName": "Ill-formed date/time literals",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQLDateTime",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n<p>Example (MySQL):</p>\n<pre><code>SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;</code></pre>\n<p>In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\n  For more information about date and time literals in MySQL, see <a\n    href=\"https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html\">Date and Time Literals at dev.mysql.com</a>.</p>\n<p>The following date and type literals are valid for MySQL.</p>\n<pre><code>SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlCheckUsingColumnsInspection",
          "displayName": "Check using clause columns",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports columns in the USING clause that does not exist in both tables.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);</code></pre>\n<p>In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\n  those tables by using the given column name. As we do not have the <code>j</code> column in <code>t2</code>, we can\n  rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.</p>\n<pre><code>SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlDuplicateColumnInspection",
          "displayName": "Duplicating column name in SELECT",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicated names of column aliases in SELECT lists.\n<p>Example (Sybase ASE):</p>\n<pre><code>CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;</code></pre>\n<p>The <code>x</code> alias name is used for <code>a</code> and <code>b</code> columns. These assignments are highlighted as errors because\n  you cannot use identical alias names for columns in Sybase ASE.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlDialectInspection",
          "displayName": "SQL dialect detection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when a dialect is not assigned to an SQL file.\n<p>For example, when you open a new SQL file without assigning a dialect\n  to it, you see a notification where the best matching dialect is advised. Click the <b>Use &lt;dialect&gt;</b> link to use the advised\n  dialect. Alternatively, click the <b>Change dialect to</b> link to select the other dialect.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlErrorHandlingInspection",
          "displayName": "SQL error handling",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid usages of constructs that handle exceptions in SQL routines.\n</body>\n</html>"
        },
        {
          "shortName": "SqlSignatureInspection",
          "displayName": "Function signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports signature issues for built-in functions.\n<p>The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.</p>\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error</code></pre>\n<p>In MySQL, the <code>IFNULL()</code> function accepts strictly two arguments. So, only the <code>SELECT IFNULL(a, b) FROM foo;</code>\n  query is correct.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlShouldBeInGroupByInspection",
          "displayName": "Column should be in group by clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports columns that are not in the GROUP BY clause or inside an aggregate function call.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;</code></pre>\n<p>If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the <code>b</code> column in GROUP BY or used\n  inside an aggregate function. The following two examples will fix the error.</p>\n<pre><code>SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlTransactionStatementInTriggerInspection",
          "displayName": "Use of transaction management statements in triggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n<p>With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\n  The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\n  COMMIT\n  terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\n  Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.</p>\n<p>Example (Oracle):</p>\n<pre><code>CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlRedundantAliasInspection",
          "displayName": "Redundant alias expressions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports alias expressions that duplicate names of columns in tables and might be redundant.\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);</code></pre>\n<p>The first two aliases use the same column names as in the <code>foo</code> table. They are considered redundant because they\n  column names are identical.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlTriggerTransitionInspection",
          "displayName": "Suspicious code in triggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports incorrect usages of transition table variables in triggers.\n<p>Example (HSQLDB):</p>\n<pre><code>CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)</code></pre>\n<p>In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\n  example, NEW in <code>SELECT * FROM NEW;</code> will be highlighted as well as OLD in <code>REFERENCING OLD ROW AS newrow</code>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SqlInsertNullIntoNotNullInspection",
          "displayName": "Insert NULL into NOT NULL column",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when you insert NULL values into columns that accept only NOT NULL values.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);</code></pre>\n<p>You cannot insert NULL values in <code>col1</code> and <code>col2</code> because they are defined as NOT NULL. If you run the script as\n  is,\n  you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, <code>42</code> and\n  <code>'bird'</code>).</p>\n<pre>INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');</pre>\n</body>\n</html>"
        },
        {
          "shortName": "SqlDropIndexedColumnInspection",
          "displayName": "Index is dependent on column",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n<p>Example (Microsoft SQL Server):</p>\n<pre><code>CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;</code></pre>\n<p>You cannot delete the <code>col</code> column because it is in the indexed table. To delete the column, you need to delete the\n  <code>aaaa</code> index first (for example, DROP INDEX aaaa).</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlConstantConditionInspection",
          "displayName": "Constant condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditions in WHERE or JOIN clauses that are always TRUE or always FALSE.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';</code></pre>\n<p>The <code>'Cat' = 'Cat'</code> is always true and will be reported.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SqlTypeInspection",
          "displayName": "Types compatibility",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports type-related errors.\n</body>\n</html>"
        },
        {
          "shortName": "SqlAggregatesInspection",
          "displayName": "Aggregate-related problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid usages of SQL aggregate functions.\n<p>The following situations are considered:</p>\n<ul>\n  <li><p>Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.</p>\n    <pre><code>CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;</code></pre>\n    <p>This rule does not apply when grouping is made by the primary key.</p>\n    <pre><code>SELECT * FROM foo GROUP BY id ORDER BY b;</code></pre>\n  </li>\n  <li><p>Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n    SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.</p>\n    <pre><code>SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);</code></pre>\n  </li>\n  <li><p>Nested calls of aggregate functions.</p>\n    <pre><code>SELECT MAX(SUM(a)) FROM foo GROUP BY a;</code></pre>\n    <p>This rule does not apply to analytic functions. The following query is valid and correct.</p>\n    <pre><code>SELECT MAX(SUM(a) OVER ()) FROM foo;</code></pre>\n  </li>\n  <li><p>Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.</p>\n    <pre><code>SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;</code></pre>\n  </li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Feature usage statistics",
      "inspections": [
        {
          "shortName": "CollectorDetection",
          "displayName": "Statistics collectors detection",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.plugins.fus-test",
          "pluginVersion": "1.0.0",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nThis inspections detects statistics collectors.\n</body>\n</html>"
        },
        {
          "shortName": "WhitelistPresence",
          "displayName": "Not whitelisted usage collector",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.fus-test",
          "pluginVersion": "1.0.0",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nAll feature usage groups should be whitelisted.\n<br/><br/>\nTo whitelist the group:\n<ol>\n    <li>Create an <a href=\"https://youtrack.jetbrains.com/issues/FUS\">issue</a> with group id, version and type (i.e. state or counter);</li>\n    <li>Write group description as it should be shown in analytics UI;</li>\n    <li>Describe all possible event ids with their meaning and event data (i.e. FeatureUsageData);</li>\n    <li>Set issue state to <i>Implemented</i>;</li>\n</ol>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Oracle",
      "inspections": [
        {
          "shortName": "OraOverloadInspection",
          "displayName": "Overloading errors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid cases of subprogram overloading in Oracle.\n<p>Example (Oracle):</p>\n<pre><code>DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;</code></pre>\n<p>You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\n  BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee <a href=\"https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm\">Restrictions on Overloading at docs.oracle.com</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "OraUnmatchedForwardDeclarationInspection",
          "displayName": "Forward declaration without definition",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations of procedures and functions that are missing their implementation in code.\n<p>In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.</p>\n<p>Example (Oracle):</p>\n<pre><code>DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;</code></pre>\n<p>The <code>foo</code> procedure is declared but is missing implementation. We can add the implementation to get rid of the error.</p>\n<pre><code>DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "OraMissingBodyInspection",
          "displayName": "Missing body for package/object type specification",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "Oracle",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports package and object type specifications that are missing body declarations.\n<p>Package specifications and object types that declare routines as well as package specifications with cursors must have body\n  declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\n  invoked in program code.</p>\n<p>Example (Oracle):</p>\n<pre><code>CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "GroovyOverlyNestedMethod",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose bodies are too deeply nested.\n<p>\n  Methods with too much statement\n  nesting may be confusing, and are a good sign that refactoring may be necessary.\n</p>\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable nesting depth a method might have.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexMethod",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have too high a cyclomatic complexity.\n<p>\n  Cyclomatic\n  complexity is basically a measurement of the number of branching points in a method. Methods with too high\n  a cyclomatic complexity may be confusing and difficult to test.\n</p>\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyLongMethod",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are too long.\n<p>\n  Methods that are too long\n  may be confusing, and are a good sign that refactoring is necessary.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the field provided below to specify the maximum acceptable number of non-comment source\n  statements a method might have.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMethodParameterCount",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many parameters. Method with too many parameters\nis a good sign that refactoring is necessary. Methods whose signatures are inherited from\nlibrary classes are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum acceptable number of parameters a method might have.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with too many return points. Methods with too\nmany return points may be confusing, and hard to refactor.\n<p><b>Example:</b></p>\n<pre>\n<code>\n  int foo(int a) {\n    if (a > 0) {\n      return a\n    }\n    if (a &lt; 0) return -a\n    return 0\n  }\n</code>\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the field provided below to specify the maximum acceptable number of return points a method\n  might have.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMethodWithMoreThanThreeNegations",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with three or more negation operations (<code>!</code> or <code>!=</code>).\nSuch methods may be unnecessarily confusing.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Description file",
      "inspections": [
        {
          "shortName": "InspectionDescriptionNotFoundInspection",
          "displayName": "Inspection description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports missing HTML description file for an inspection.\n<p>\n  Descriptions are shown in <b>Settings/Preferences | Editor | Inspections</b>.\n</p>\n<p>\n  Quick-fix <b>Create description file</b> creates template description HTML file.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PostfixTemplateDescriptionNotFound",
          "displayName": "Postfix template description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports missing HTML description file and <code>before/after.template</code> for postfix template.\n<p>\n  These are shown in <b>Settings/Preferences | Editor | General | Postfix Completion</b>.\n</p>\n<p>\n  Quick-fix <b>Create description file</b> creates template description HTML file.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "IntentionDescriptionNotFoundInspection",
          "displayName": "Intention description checker",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports missing HTML description file and <code>before/after.template</code> for an intention.\n<p>\n  These are shown in <b>Settings/Preferences | Editor | Intentions</b>.\n</p>\n<p>\n  Quick-fix <b>Create description file</b> creates template description HTML file.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Other",
      "inspections": [
        {
          "shortName": "GrMethodMayBeStatic",
          "displayName": "Method may be 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods which may safely be made <code>static</code>.\n<p>\n  A method may be <code>static</code> if it is not <code>synchronized</code>,\n  it does not reference any of its class' instance methods and instance fields,\n  and it is not overridden in a subclass.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "TypeCustomizer",
          "displayName": "Type customizer inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports files which can be custom type checkers and are not added to compiler resources yet.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Compiler issues",
      "inspections": [
        {
          "shortName": "PreviewFeature",
          "displayName": "Preview Feature warning",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the Preview Feature API. The Preview Feature API is a set of elements that are annotated with <code>@PreviewFeature</code>.\n<p>\n  A preview feature is a new feature of the Java language, Java Virtual Machine, or Java SE API that is fully specified, fully implemented,\n  and yet impermanent. The notion of a preview feature is defined in <a href=\"https://openjdk.java.net/jeps/12\">JEP 12</a>.\n</p>\n<p>\n  If a code depends on a preview feature it might stop compiling in the future JDK versions if the feature get no positive feedback and,\n  hence, it either gets removed or changed.\n</p>\n<!-- tooltip end -->\n<p>It's enabled only if the language level of the current project is a preview one.</p>\n<p><small>New in 2021.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnValueBasedClass",
          "displayName": "Value-based warnings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nAttempts to synchronize on an instance of a value-based class will produce compile-time warnings and raise run-time exceptions starting from Java 16.\n<p>\n  For example, java.lang.Double is annotated with <code>jdk.internal.ValueBased</code>, so the following code will produce a compile-time warning\n</p>\n<pre>\nDouble d = 20.0;\nsynchronized (d) { ... } // javac warning\n</pre>\n<!-- tooltip end -->\n<p>Since 2021.1</p>\n</body>\n</html>"
        },
        {
          "shortName": "UNCHECKED_WARNING",
          "displayName": "Unchecked warning",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the code in which an unchecked warning is issued by the compiler.\n<p>Every unchecked warning may potentially trigger <code>ClassCastException</code> at runtime.</p>\n<p>Example:</p>\n<pre><code>\n  List items = Arrays.asList(\"string\", \"string\");\n  List&lt;Integer&gt; numbers = Collections.unmodifiableList(items);\n</code></pre>\n<p>The quick-fix tries to make the code more generic and put all missed types to the current file:</p>\n<pre><code>\n  List&lt;String&gt; items = Arrays.asList(\"string\", \"string\");\n  List&lt;Integer&gt; numbers = Collections.unmodifiableList(items);\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "JavacQuirks",
          "displayName": "Javac quirks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports known Javac issues, performance problems, and incompatibilities.\nFor example, type inference may be slow when it has to process many nested calls.\n<p>The following code triggers a warning, as vararg method call has 50+ poly arguments:</p>\n<pre><code>\n  Arrays.asList(\n      Arrays.asList(\"a\", \"b\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));\n</code></pre>\n<p>The quick-fix adds explicit type arguments, which makes compilation and IDE processing much faster:</p>\n<pre><code>\n  //noinspection RedundantTypeArguments\n  Arrays.&lt;List&lt;String&gt;&gt;asList(\n      Arrays.asList(\"a\", \"b\"),\n      ...\n      Arrays.asList(\"a100\", \"b100\"));\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Buildout",
      "inspections": [
        {
          "shortName": "BuildoutUnresolvedPartInspection",
          "displayName": "Unresolved parts of Buildout config",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "BuildoutCfg",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved references in the <code>parts</code> option of the Buildout configuration file.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "AOP",
      "inspections": [
        {
          "shortName": "AroundAdviceStyleInspection",
          "displayName": "Around advice style inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>When using <code>@Around</code> advice, remember two things:\n<ul>\n  <li>Calling <code>org.aspectj.lang.ProceedingJoinPoint#proceed</code> is necessary, otherwise the call won't reach the target.</li>\n  <li>Returning the result value (typed <code>java.lang.Object</code>) of that call is necessary, otherwise the return value will never\n    reach the original caller.</li>\n</ul>\n<p>However, the following two conditions almost always indicate a coding error:<p>\n<ul>\n  <li>The signature for the <code>@Around</code> method does not have <code>ProceedingJoinPoint</code> as the first argument: in this case,\n    it's impossible for the call to reach the target.</li>\n  <li>The signature for the <code>@Around</code> method does not have <code>Object</code> as a return type: in this case, the return\n    value of the target method is always lost.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PointcutMethodStyleInspection",
          "displayName": "Pointcut method style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nValidates <code>@Pointcut</code> methods: the <code>void</code> return type, no <code>throws</code> clause, and an empty method body.\n</body>\n</html>"
        },
        {
          "shortName": "ArgNamesErrorsInspection",
          "displayName": "Advice parameters (argNames, returning, throwing) consistency check",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if an <code>@AspectJ</code> <code>argNames</code> attribute value does not correspond to the actual method parameter name.\n</body>\n</html>"
        },
        {
          "shortName": "ArgNamesWarningsInspection",
          "displayName": "Warning: argNames not defined ",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if an <code>argNames</code> attribute is not defined in an <code>@AspectJ</code> annotation.\n<p>Defining <code>argNames</code> attributes in <code>@AspectJ</code> annotations is recommended since the method parameter names\nmay not be available at runtime.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DeclareParentsInspection",
          "displayName": "Introductions (declare parents) errors",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.aop",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>@AspectJ</code> Introduction inconsistency: it checks whether the <code>defaultImpl</code> is required and if yes, whether it implements\nthe given interface.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Internationalization",
      "inspections": [
        {
          "shortName": "LossyEncoding",
          "displayName": "Lossy encoding",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n\nReports characters that cannot be displayed because of the current document encoding.\n<p>Examples:</p>\n<ul>\n  <li>If you type international characters in a document with the <b>US-ASCII</b> charset, some characters will be lost on save.</li>\n  <li>If you load a <b>UTF-8</b>-encoded file using the <b>ISO-8859-1</b> one-byte charset, some characters will be displayed incorrectly.</li>\n</ul>\n\n<p>You can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing <code>encoding=</code> attribute in the XML prolog of XML file,\n  or by changing the corresponding options in <b>Settings | Editor | File Encodings</b>.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonAsciiCharacters",
          "displayName": "Non-ASCII characters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code elements that uses non-ASCII symbols in an unusual context.\n\n<p>Example:</p>\n<ul>\n  <li>Non-ASCII characters used in identifiers, strings, or comments.</li>\n  <li>Identifiers written in different languages, such as <code>my<b>C</b>ollection</code> with the\n    letter <code><b>C</b></code> written in Cyrillic.</li>\n  <li>Comments or strings containing Unicode symbols, such as long dashes and arrows.</li>\n</ul>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "GroovyLocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.\n (Regular expressions are in standard <code>java.util.regex</code> format.)\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInstanceVariableNamingConvention",
          "displayName": "Instance variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for\n instance variable names.\n (Regular expressions are in standard <code>java.util.regex</code> format.)\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are either too short, too\nlong, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n  Use the fields provided below to specify minimum length, maximum length and regular expression\n  expected for method parameter names.\n  (Regular expressions are in standard <code>java.util.regex.Pattern</code> format.)\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstantNamingConvention",
          "displayName": "Constant naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constant with names which don't match the specified convention.\n<p>Constants are fields of immutable type declared with <code>static</code> and <code>final</code> modifiers.</p>\nReports constants whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Pattern</b> field to specify <code>java.util.regex.Pattern</code> which a constant name is expected to match.</li>\n  <li>Use the <b>Min length</b> field to specify the minimum length of a constant name.</li>\n  <li>Use the <b>Max length</b> field to specify the maximum length of a constant name.</li>\n</ul>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyStaticMethodNamingConvention",
          "displayName": "Static method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports static methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names\n (Regular expressions are in standard <code>java.util.regex.Pattern</code> format).\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "NewGroovyClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are either too short, too long, or do not follow\nthe specified regular expression pattern.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.\n (Regular expressions are in standard <b>java.util.regex</b> format.)\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInstanceMethodNamingConvention",
          "displayName": "Instance method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance methods whose names are either too short, too long, or do not follow\nthe specified regular expression pattern. Instance methods that override library\nmethods are ignored by this inspection.\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.\n (Regular expressions are in standard <code>java.util.regex</code> format.)\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyStaticVariableNamingConvention",
          "displayName": "Static variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> variables whose names are either too short, too long,\nor do not follow\nthe specified regular expression pattern.\n<p>\n  Constants, i.e. variables of immutable type declared\n  <code>static final</code>, are not checked by this inspection\n</p>\n<!-- tooltip end -->\n<p>\n Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names\n (Regular expressions are in standard <code>java.util.regex.Pattern</code> format).\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Code quality tools",
      "inspections": [
        {
          "shortName": "W3CssValidation",
          "displayName": "W3C CSS validator",
          "defaultSeverity": "WARNING",
          "pluginId": "W3Validators",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a discrepancy detected by the <a href=\"https://jigsaw.w3.org/css-validator/\">W3C CSS Validator</a>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "UnusedLabel",
          "displayName": "Unused label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports labels that are not targets of any <code>break</code> or <code>continue</code> statements.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  label: <b>for</b> (int i = 0; i &lt; 10; i++) {\n    <b>if</b> (i == 3) {\n      <b>break</b>;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied, the label is removed:</p>\n<pre><code>\n  <b>for</b> (int i = 0; i &lt; 10; i++) {\n    <b>if</b> (i == 3) {\n      <b>break</b>;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnusedReturnValue",
          "displayName": "Method can be void",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods whose return values are never used when called.\n<p>The return type of such methods can be made <code>void</code>.\nMethods annotated with Error Prone's or AssertJ's <code>@CanIgnoreReturnValue</code> annotation will not be reported.\n  The quick-fix updates the method signature and removes <code>return</code> statements from inside the method.</p>\n<p><b>Example:</b></p>\n<pre>\n  // reported if visibility setting is Protected or Public\n  protected String myToUpperCase(String s) {\n    return s.toUpperCase();\n  }\n\n  // simple setter, reporting depends on setting\n  public String setStr(String str) {\n    myStr = str;\n    return myStr;\n  }\n\n  void test() {\n    setStr(\"value\");          // return value is unused\n    myToUpperCase(\"result\");  // return value is unused\n  }\n</pre>\n<p>After the quick-fix is applied to both methods:</p>\n<pre>\n    protected void myToUpperCase(String s) {\n      // 'return' removed completely\n      // as 's.toUpperCase()' has no side effect\n    }\n\n    public void setStr(String str) {\n      myStr = str;\n      // 'return' removed\n    }\n  ...\n</pre>\n<p>\n  <b>NOTE:</b> Some methods might not be reported during in-editor highlighting due to performance reasons.\n  To see all results, run the inspection using <b>Analyze | Inspect Code...</b> or <b>Analyze | Run Inspection by Name...</b>\n</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore simple setters</b> option to ignore unused return values from simple setter calls.</p>\n<p>Use the <b>Maximal reported method visibility</b> option to control the maximum visibility of methods to be reported.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "Java9RedundantRequiresStatement",
          "displayName": "Redundant 'requires' statement in module-info",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations in which a Java 9 module <code>A</code> requires a Java 9 module <code>B</code>,\nbut <code>A</code> doesn't use any package from <code>B</code>.\nAlso, the directive that requires the <code>java.base</code> module is redundant.\n<!-- tooltip end -->\n<p>\n  The fix deletes the <code>requires</code> directive for such redundant dependencies.\n  If the deleted dependency re-exported the modules that are actually used, the fix adds a <code>requires</code> directive for these modules.\n</p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "WeakerAccess",
          "displayName": "Declaration access can be weaker",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports all fields, methods or classes, found in the specified inspection\nscope that may have their access modifier narrowed down.\n<p>Example:</p>\n<pre><code>\n  class Sample {\n    void foo() {\n        bar(\"foo\", \"foo\");\n    }\n    void bar(String x, String y) { } // can be private\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the inspection's options to define the rules for the modifier change suggestions.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantRecordConstructor",
          "displayName": "Redundant record constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant constructors declared inside Java records.</p>\n<p><b>Example 1:</b></p>\n<pre><code>\n  record Point(int x, int y) {\n    public Point {} // could be removed\n  }\n  \n  record Point(int x, int y) {\n    public Point(int x, int y) { // could be removed\n      this.x = x;\n      this.y = y;\n    }\n  }\n</code></pre>\n<p>The quick-fix removes the redundant constructors.</p>\n<p><b>Example 2:</b></p>\n<pre><code>\n   // could be converted to compact constructor\n  record Range(int from, int to) {\n    public Range(int from, int to) {\n      if (from > to) throw new IllegalArgumentException();\n      this.from = from;\n      this.to = to;\n    }\n  }\n</code></pre>\n<p>The quick-fix converts this code into a compact constructor.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 14 Preview or 15 Preview.</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "unused",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports classes, methods, or fields in the specified inspection scope that are not used or unreachable from entry points.</p>\n<p> An entry point can be the main method, tests, classes mentioned outside the specified scope, classes accessible from\n  <code>module-info.java</code>, and so on. You can also configure custom entry points by using name patterns or annotations.\n<p><b>Example:</b></p>\n<pre><code>public class Department {\n   private Organization myOrganization;\n}</code></pre>\n<p>In this example, <code>Department</code> explicitly references <code>Organization</code> but if <code>Department</code> class itself is unused, then inspection will report both classes. </p>\n<p>\n  The inspection also reports parameters that are not used by their methods and all method implementations and overriders, as well as local\n  variables that are declared but not used.\n</p>\n<p>\n  <b>Note:</b> Some unused members may not be reported during in-editor code highlighting. For performance reasons, a non-private member is\n  checked only when its name rarely occurs in the project.\n  To see all results, run the inspection by selecting <b> Analyze | Inspect Code...</b> or <b>Analyze | Run Inspection by Name...</b> from the main menu.\n</p>\n\n<!-- tooltip end -->\n<p>Use the visibility settings below to configure members to be reported. For example, configuring report <code>private</code> methods only means\n  that <code>public</code> methods of <code>private</code> inner class will be reported but <code>protected</code> methods of top level class\n  will be ignored.</p>\n<p>\n  Use the <b>entry points</b> tab to configure entry points to be considered during the inspection run.</p>\n<p> You can add entry points manually when inspection results are ready.</p>\n<p> If your code uses unsupported frameworks, there are several options:</p>\n<ul>\n  <li>If the framework relies on annotations, use the <b>Annotations...</b> button to configure the framework's annotations.</li>\n  <li>If the framework doesn't rely on annotations, try to configure class name patterns that are expected by the framework.</li>\n</ul>\n<p>This way the annotated code accessible by the framework internals will be treated as used.</p>\n</body>\n</html>"
        },
        {
          "shortName": "EmptyInitializer",
          "displayName": "Empty class initializer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty class initializer blocks.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateThrows",
          "displayName": "Duplicate throws",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate exceptions in a method <code>throws</code> list.\n<p>Example:</p>\n<pre><code>\n  void f() throws Exception, Exception {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f() throws Exception {}\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore exceptions subclassing others </b> option to ignore exceptions subclassing other exceptions.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "SillyAssignment",
          "displayName": "Variable is assigned to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports assignments of a variable to itself.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  a = a;\n</code></pre>\n<p>The quick-fix removes the assigment.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantImplements",
          "displayName": "Redundant interface declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes declaring that they implement or extend an interface, when\nthat interface is already declared as <code>implemented</code> by a superclass or extended by another interface\nof that class. Such declarations are unnecessary and may be safely removed.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessStaticViaInstance",
          "displayName": "Access static member via instance reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports references to static methods and fields via a class instance rather than the class itself.\n<p>Even though referring to static members via instance variables is allowed by The Java Language Specification,\n  this makes the code confusing as the reader may think that the result of the method depends on the instance.</p>\n<p>The quick-fix replaces the instance variable with the class name.</p>\n<p>Example:</p>\n<pre><code>\n  String s1 = s.valueOf(0);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String s = String.valueOf(0);\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "TrivialFunctionalExpressionUsage",
          "displayName": "Trivial usage of functional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports functional interface methods calls that are directly invoked on the definition of the lambda, method reference, or anonymous class.</p>\n<p>Such method calls can be replaced with the body of the functional interface implementation.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  boolean contains(List&lt;String&gt; names, String name) {\n    return ((Predicate&lt;String&gt;)x -> {\n      return names.contains(x);\n    }).test(name);\n  }\n</code></pre>\n<p>When the quick-fix is applied, the method call changes to:</p>\n<pre><code>\n  boolean contains(List&lt;String&gt; names, String name) {\n    return names.contains(name);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedMemberInFinalClass",
          "displayName": "'protected' member in 'final' class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>protected</code> members in <code>final</code>classes.\n<p>Since <code>final</code> classes cannot be inherited, marking the method as <code>protected</code>\n  may be confusing. It is better to declare such members as <code>private</code> or package-visible instead.</p>\n<p><b>Example:</b></p>\n<pre><code>record Bar(int a, int b) {\n  protected sum() { \n     return a + b;\n  }\n}\n</code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>record Bar(int a, int b) {\n  sum() { \n     return a + b;\n  }\n}\n</code></pre>\n\n<p>As shown in the example, a class can be marked as <code>final</code> explicitly or implicitly.</p>\n\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SameParameterValue",
          "displayName": "Actual method parameter is the same constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods in which a parameter appears to always be the same constant.\n\n<p>Example:</p>\n<pre>\n<code>static void printPoint(int x, int y) { // x is always 0\n  System.out.println(x + \", \" + y);\n}\n\npublic static void main(String[] args) {\n  printPoint(0, 1);\n  printPoint(0, 2);\n}\n</code>\n</pre>\n<p>The quick-fix inlines the constant value. This may simplify the method implementation.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionalExpressionCanBeFolded",
          "displayName": "Functional expression can be folded",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method references or lambda expressions that point to a method of their own functional interface type and hence can be\nreplaced with their qualifiers removing unnecessary object allocation.\n\n<p>Example:</p>\n<pre><code>\n  SwingUtilities.invokeLater(r::run);\n  SwingUtilities.invokeAndWait(() -> r.run());\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  SwingUtilities.invokeLater(r);\n  SwingUtilities.invokeAndWait(r);\n</code></pre>\n<!-- tooltip end -->\n<p>Reports only if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLambdaParameterType",
          "displayName": "Redundant lambda parameter types",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports lambda formal parameter types that are redundant because they can be inferred from the context.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Map&lt;String, Integer&gt; map = ...\n  map.forEach((String s, Integer i) -> log.info(s + \"=\" + i));\n</code></pre>\n<p>The quick-fix removes the parameter types from the lambda.</p>\n<pre><code>\n  Map&lt;String, Integer&gt; map = ...\n  map.forEach((s, i) -> log.info(s + \"=\" + i));\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "DefaultAnnotationParam",
          "displayName": "Default annotation parameter value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an annotation parameter assignment if it is assigned to its <code>default</code> value.\n<p>Example:</p>\n<pre><code>\n  @interface Test {\n      Class<?> expected() default Throwable.class;\n  }\n\n  @Test(expected = Throwable.class)\n  void testSmth() {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Test()\n  void testSmth() {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnusedLibrary",
          "displayName": "Unused library",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports libraries attached to the specified inspection scope that\nare not used directly in code.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeFinal",
          "displayName": "Declaration can have final modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports all fields, methods, or classes found in the specified inspection scope that may have the <code>final</code> modifier added to their\ndeclarations.\n<p>Final classes can't be extended, final methods can't be overridden, and final fields can't be reassigned.</p>\n<!-- tooltip end -->\n<p>Use the <b>Report classes</b> and <b>Report methods</b> options to define which declarations are to be reported.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryModuleDependencyInspection",
          "displayName": "Unnecessary module dependency",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports dependencies on modules that are not used. The quick-fix safely removes such unused dependencies.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantThrows",
          "displayName": "Redundant 'throws' clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports exceptions that are declared in a method's signature but never thrown by the method itself or its implementations and derivatives.</p>\n<p>The inspection ignores methods related to the serialization, for example methods <code>readObject()</code> or <code>writeObject()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void method() throws InterruptedException {\n    System.out.println();\n  }\n</code></pre>\n<p>The quick-fix removes unnecessary exceptions from the declaration and normalizes the redundant <code>try</code>-<code>catch</code> statements:</p>\n<pre>\n  void method() {\n    System.out.println();\n  }\n</pre>\n<p>\n  <b>Note:</b> Some exceptions might not be reported during in-editor highlighting.\n  For performance reasons, a non-private method is checked only when its name rarely occurs in the project.\n  To see all results, run the inspection by selecting  <b>Analyze | Inspect Code...</b> or <b>Analyze | Run Inspection by Name...</b> from the main menu.\n</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore exceptions thrown by entry points methods</b> option to ignore exceptions thrown by entry points methods.\n  Entry points methods are configured the following inspection: <b>Editor | Inspections | Java | Declaration redundancy | Unused declaration</b>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SameReturnValue",
          "displayName": "Method returns the same value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods and method hierarchies in which the return value always appears to\nbe the same constant.\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyMethod",
          "displayName": "Empty method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty methods that can be removed.\n<p>Methods are considered empty if they are empty themselves and if they are overridden or\n implemented by empty methods only. Note that methods containing only comments and the <code>super()</code> call with own parameters are\n  also considered empty.</p>\n<p>The inspection ignores methods with special annotations, for example, the <code>javax.ejb.Init</code> and <code>javax.ejb.Remove</code> EJB annotations .</p>\n<p>The quick-fix safely removes unnecessary methods.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Comments and javadoc count as content</b> option to select whether methods with comments should be treated as non-empty.</li>\n  <li>Use the <b>Additional special annotations</b> option to configure additional annotations that should be ignored by this inspection.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantExplicitClose",
          "displayName": "Redundant 'close()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary calls to <code>close()</code> at the end of a try-with-resources block and suggests removing them.\n<p><b>Example</b>:</p>\n<pre><code>\n  try(MyAutoCloseable ac = new MyAutoCloseable()) {\n    foo();\n    ac.close();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try(MyAutoCloseable ac = new MyAutoCloseable()) {\n    foo();\n  }\n</code></pre>\n<!-- tooltip end -->\n<small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "FinalMethodInFinalClass",
          "displayName": "'final' method in 'final' class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>final</code> methods in <code>final</code> classes.\n<p>Since <code>final</code> classes cannot be inherited, marking a method as <code>final</code>\n  may be unnecessary and confusing.</p>\n<p><b>Example:</b></p>\n<pre><code>record Bar(int a, int b) {\n  public final sum() { \n     return a + b;\n  }\n}\n</code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>record Bar(int a, int b) {\n  public sum() { \n     return a + b;\n  }\n}\n</code></pre>\n\n<p>As shown in the example, a class can be marked as <code>final</code> explicitly or implicitly.</p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Quality tools",
      "inspections": [
        {
          "shortName": "MessDetectorValidationInspection",
          "displayName": "PHP Mess Detector validation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP Mess Detector.\n<!-- tooltip end -->\n<p>\n  The inspection requires PHP Mess Detector to be properly installed and set up in the IDE under <b>Settings/Preferences | PHP | Quality Tools | Mess Detector</b>.\n</p>\n<p>\n  To learn more about installing PHP Mess Detector, see <a href=\"https://phpmd.org/download/index.html\">PHP Mess Detector installation (phpmd.org)</a> for details.\n</p>\n<p>\n  You can use a predefined set of rules or add your own by specifying valid <i>ruleset.xml</i> files. See the <a href=\"https://phpmd.org/rules/index.html\">rules index (phpmd.org)</a> and <a href=\"https://phpmd.org/documentation/creating-a-ruleset.html\">How to create a custom rule set (phpmd.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCSFixerValidationInspection",
          "displayName": "PHP CS Fixer validation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP CS Fixer.\n<!-- tooltip end -->\n<p>\n  The inspection requires PHP CS Fixer to be properly installed and set up in the IDE under <b>Settings/Preferences | PHP | Quality Tools | PHP CS Fixer</b>.\n</p>\n<p>\n  To learn more about installing PHP CS Fixer, see <a href=\"https://github.com/FriendsOfPHP/PHP-CS-Fixer#installation\">PHP-CS-Fixer installation (GitHub)</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCSValidationInspection",
          "displayName": "PHP_CodeSniffer validation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports coding style problems detected by PHP_CodeSniffer.\n<!-- tooltip end -->\n<p>\n  The inspection requires PHP_CodeSniffer to be properly installed and set up in the IDE under <b>Settings/Preferences | PHP | Quality Tools | PHP_CodeSniffer</b>.\n</p>\n\n<p>\n  To learn more about installing PHP_CodeSniffer, see <a\n    href=\"https://github.com/squizlabs/PHP_CodeSniffer#installation\">PHP_CodeSniffer installation (GitHub)</a>.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Invalid elements",
      "inspections": [
        {
          "shortName": "CssUnknownTarget",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved file reference, for example, an incorrect path in an <code>@import</code> statement.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidPseudoSelector",
          "displayName": "Invalid pseudo-selector",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an incorrect CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">pseudo-class</a>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">pseudo-element</a>.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidMediaFeature",
          "displayName": "Invalid media feature",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">CSS media feature</a> or an incorrect media feature value.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedClassInComposesRule",
          "displayName": "Unresolved class in 'composes' rule",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a CSS class reference in the <a href=\"https://github.com/css-modules/css-modules#composition\">'composes'</a> rule that cannot be resolved to any valid target.\n<!-- tooltip end -->\n<br/><br/>\nExample:<br/>\n<br/>\n<code>\n  .className {/* ... */}<br/>\n  <br/>\n  .otherClassName {<br/>\n  &nbsp;&nbsp;composes: className;<br/>\n  }\n</code>\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidFunction",
          "displayName": "Invalid function",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions\">CSS function</a> or an incorrect function parameter.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidImport",
          "displayName": "Misplaced @import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a misplaced <code>@import</code> statement.\n<!-- tooltip end -->\n<br/><br/>\nAccording to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@import\">specification</a>,\n<code>@import</code> rules must precede all other types of rules, except <code>@charset</code> rules.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidHtmlTagReference",
          "displayName": "Invalid type selector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a CSS <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">type selector</a> that matches an unknown HTML element.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidCharsetRule",
          "displayName": "Misplaced or incorrect @charset",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a misplaced <code>@charset</code> at-rule or an incorrect charset value.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidAtRule",
          "displayName": "Unknown at-rule",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\">CSS at-rule</a>.\n</body>\n</html>"
        },
        {
          "shortName": "CssNegativeValue",
          "displayName": "Negative property value",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnknownProperty",
          "displayName": "Unknown property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown CSS property or a property used in a wrong context.\n<!-- tooltip end -->\n<br/><br/>\nAdd the unknown property to the 'Custom CSS properties' list to skip validation.\n</body>\n</html>"
        },
        {
          "shortName": "CssUnresolvedCustomProperty",
          "displayName": "Unresolved custom property",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved reference to a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\">custom property</a> among the arguments of the <code>var()</code> function.\n</body>\n</html>"
        },
        {
          "shortName": "CssInvalidPropertyValue",
          "displayName": "Invalid property value",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an incorrect CSS property value.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Finalization",
      "inspections": [
        {
          "shortName": "FinalizeNotProtected",
          "displayName": "'finalize()' should be protected, not public",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any implementations of the <code>Object.finalize()</code> method that are\ndeclared <code>public</code>.\n<p>\n  According to the contract of the <code>Object.finalize()</code>, only the garbage\n  collector calls this method. Making this method public may be confusing, because it\n  means that the method can be used by users.\n</p>\n<p>\n  The quick-fix makes the method protected to prevent it from being explicitly invoked\n  by other classes.\n</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre><code>\n  <b>class</b> X {\n    <b>public void</b> finalize() {\n      /* ... */\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>class</b> X {\n    <b>protected void</b> finalize() {\n      /* ... */\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "Finalize",
          "displayName": "'finalize()' should not be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports overriding the <code>Object.finalize()</code> method.\n<p>According to the <code>Object.finalize()</code> documentation:</p>\n<blockquote>\n  <p>\n    The finalization mechanism is inherently problematic. Finalization can lead\n    to performance issues, deadlocks, and hangs. Errors in finalizers can lead\n    to resource leaks; there is no way to cancel finalization if it is no longer\n    necessary; and no ordering is specified among calls to <code>finalize</code>\n    methods of different objects. Furthermore, there are no guarantees regarding\n    the timing of finalization. The <code>finalize</code> method might be called\n    on a finalizable object only after an indefinite delay, if at all.\n  </p>\n</blockquote>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the <b>Ignore for trivial 'finalize()' implementations</b> option to ignore\n    <code>finalize()</code> implementations with an empty method body or a body\n    containing only <code>if</code> statements that have a condition which evaluates\n    to <code>false</code> at compile time. For performance reasons it can be beneficial\n    to override a non-trivial <code>finalize()</code> with an empty implementation in a\n    subclass. An empty final <code>finalize()</code> implementation can also be used to\n    prevent subclasses from overriding.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NoExplicitFinalizeCalls",
          "displayName": "'finalize()' called explicitly",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Object.finalize()</code>.\n<p>Calling <code>Object.finalize()</code> explicitly may result in objects being placed in an\ninconsistent state.\n  The garbage collector automatically calls this method on an object when it determines that there are no references to this object.</p>\n<p>The inspection doesn't report calls to <code>super.finalize()</code> from within implementations of <code>finalize()</code> as\n  they're benign.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  MyObject m = new MyObject();\n  m.finalize();\n  System.gc()\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 8",
      "inspections": [
        {
          "shortName": "Java8CollectionRemoveIf",
          "displayName": "Loop can be replaced with 'Collection.removeIf()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops which can be collapsed into a single <code>Collection.removeIf</code> call.\n<p>Example:</p>\n<pre><code>\n  for (Iterator&lt;String&gt; it = collection.iterator(); it.hasNext(); ) {\n    String aValue = it.next();\n    if(shouldBeRemoved(aValue)) {\n      it.remove();\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  collection.removeIf(aValue -> shouldBeRemoved(aValue));\n</code></pre>\n<!-- tooltip end -->\n<p>\n  This inspection only reports if the language level of the project or module is 8 or higher.\n</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8ListSort",
          "displayName": "Collections.sort() can be replaced with List.sort()",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls of <code>Collections.sort(list, comparator)</code> which can be replaced with <code>list.sort(comparator)</code>.\n<p><code>Collections.sort</code> is just a wrapper, so it is better to use an instance method directly.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapForEach",
          "displayName": "Map.forEach() can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nSuggests replacing <code>for(Entry&lt;?,?&gt; entry : map.entrySet()) {...}</code> or\n<code>map.entrySet().forEach(entry -&gt; ...)</code> with <code>map.forEach((key, value) -> ...)</code>.\n<p>Example</p>\n<pre><code>\n  void print(Map&lt;String, Integer&gt; map) {\n    map.entrySet().forEach(entry -> {\n      String str = entry.getKey();\n      System.out.println(str + \":\" + entry.getValue());\n    });\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void print(Map&lt;String, Integer&gt; map) {\n    map.forEach((str, value) -> System.out.println(str + \":\" + value));\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  When the <b>Do not report loops</b> option is enabled, only <code>entrySet().forEach()</code> cases will be reported.\n  However, the quick-fix action will be available for <code>for</code>-loops as well.\n</p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousHasLambdaAlternative",
          "displayName": "Anonymous type has shorter lambda alternative",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports anonymous classes which could be transformed to a constructor or a factory method call with a lambda expression argument.\n<p>The following classes are reported by this inspection:\n<ul>\n  <li>Anonymous classes extending <code>ThreadLocal</code> which have an <code>initialValue()</code> method (can be replaced with <code>ThreadLocal.withInitial</code>)</li>\n  <li>Anonymous classes extending <code>Thread</code> which have a <code>run()</code> method (can be replaced with <code>new Thread(Runnable)</code></li>\n</ul>\n<p>Example:</p>\n<pre><code>\n  <b>new</b> Thread() {\n    @Override\n    <b>public void</b> run() {\n      System.out.println(\"Hello from thread!\");\n    }\n  }.start();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>new</b> Thread(() -> {\n    System.out.println(\"Hello from thread!\");\n  }).start();\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java8MapApi",
          "displayName": "Simplifiable 'Map' operations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports common usage patterns of <code>java.util.Map</code> and suggests replacing them with:\n<code>getOrDefault()</code>, <code>computeIfAbsent()</code>, <code>putIfAbsent()</code>, <code>merge()</code>, or <code>replaceAll()</code>.\n<p>Example:</p>\n<pre><code>\n  map.containsKey(key) ? map.get(key) : \"default\";\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  map.getOrDefault(key, \"default\");\n</code></pre>\n<p>Example:</p>\n<pre><code>\n  List&lt;String&gt; list = map.get(key);\n  if (list == null) {\n    list = new ArrayList&lt;&gt;();\n    map.put(key, list);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  map.computeIfAbsent(key, localKey -> new ArrayList&lt;&gt;());\n</code></pre>\n<p>Example:</p>\n<pre><code>\n  Integer val = map.get(key);\n  if (val == null) map.put(key, 1);\n  else map.put(key, val + 1);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  map.merge(key, 1, (localKey, localValue) -> localValue + 1);\n</code></pre>\n<p>Example:</p>\n<pre><code>\n  for (Map.Entry&lt;String, String&gt; entry : map.entrySet()) {\n    map.put(entry.getKey(), transform(entry.getValue()));\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  map.replaceAll((localKey, localValue) -> transform(localValue));\n</pre>\n\n<!-- tooltip end -->\n<p>Note that the replacement with <code>computeIfAbsent()</code> or <code>merge()</code> might work incorrectly for some <code>Map</code>\n  implementations if the code extracted to the lambda expression modifies the same <code>Map</code>. By default,\n  the warning doesn't appear if this code might have side effects. If necessary, enable the\n  <b>Suggest replacement even if lambda may have side effects</b> option to always show the warning.</p>\n<p>Also, due to different handling of the <code>null</code> value in old methods like <code>put()</code> and newer methods like\n  <code>computeIfAbsent()</code> or <code>merge()</code>, semantics might change if storing the <code>null</code> value into given\n  <code>Map</code> is important. The inspection won't suggest the replacement when the value is statically known to be nullable,\n  but for values with unknown nullability the replacement is still suggested. In these cases, we recommended suppressing the warning\n  and adding an explanatory comment.\n</p>\n<p>This inspection works only if the language level of the project or module is 8 or higher.</p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaCanBeMethodCall",
          "displayName": "Lambda can be replaced with method call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions which can be replaced with a JDK method call.\n<p>For example, the expression <code>x -&gt; x</code> of the <code>Function&lt;T, T&gt;</code> type\n  can be replaced with the <code>Function.identity()</code> call.</p>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyForEach",
          "displayName": "Simplifiable forEach() call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>forEach()</code> calls that can be replaced with a more concise method or from which intermediate steps can be extracted.\n<p><b>Example:</b></p>\n<pre><code>\n  List&lt;String&gt; findNStrings(List&lt;String&gt; list, int n) {\n    List&lt;String&gt; other = new ArrayList&lt;>();\n    list.forEach(s -> {\n      if(s.length() > n) other.add(s);\n    });\n    return other;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  List&lt;String&gt; findNStrings(List&lt;String&gt; list, int n) {\n    List&lt;String&gt; other = list.stream()\n      .filter(s -> s.length() > n)\n      .collect(Collectors.toList());\n    return other;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is eight or higher.</p>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2MethodRef",
          "displayName": "Lambda can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambdas that can be replaced with method references. While often it could be a matter of taste, method references are more clear\nand readable compared to lambdas.\n<p>Example:</p>\n<pre><code>\n  Runnable r = () -> System.out.println();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Runnable r = System.out::println;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  The inspection may suggest method references even if a lambda doesn't call any method, like replacing <code>obj -> obj != null</code>\n  with <code>Objects::nonNull</code>. \n  Use the <a href=\"settings://preferences.sourceCode.Java?Lambda%20Body\">Settings | Editor | Code Style | Java | Code Generation</a>\n  settings to configure special method references.\n</p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ComparatorCombinators",
          "displayName": "'Comparator' combinator can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases where a <code>Comparator</code> is defined as a lambda expression which could be expressed using\nmethods like <code>Comparator.comparing()</code>.\n<p>This inspection also reports chain comparisons which can be replaced by <code>Comparator.thenComparing()</code>.</p>\n<p>Example:</p>\n<pre><code>\n  myList.sort((person1, person2) -> person1.getName().compareTo(person2.getName()));\n\n  myList2.sort((person1, person2) -> {\n      int res = person1.first().compareTo(person2.first());\n      if(res == 0) res = person1.second().compareTo(person2.second());\n      if(res == 0) res = person1.third() - person2.third();\n      return res;\n  });\n</code></pre>\n<p>After the quick-fixes are applied:</p>\n<pre><code>\n  myList.sort(Comparator.comparing(Person::getName));\n\n  myList2.sort(Comparator.comparing(Person::first)\n                         .thenComparing(Person::second)\n                         .thenComparingInt(Person::third));\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "FoldExpressionIntoStream",
          "displayName": "Expression can be folded into Stream chain",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions with a repeating pattern which could be replaced with <i>Stream API</i> or <code>String#join</code>.\n<p>Example:</p>\n<pre>\n  boolean allStartWith(String a, String b, String c, String d, String prefix) {\n    return a.startsWith(prefix) && b.startsWith(prefix) && c.startsWith(prefix) && d.startsWith(prefix);\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  boolean foo(String a, String b, String c, String d, String prefix) {\n    return Stream.of(a, b, c, d).allMatch(s -> s.startsWith(prefix));\n  }\n</pre>\n<p>Example:</p>\n<pre>\n  String joinAll(String a, String b, String c, String d) {\n    return a + \",\" + b + \",\" + c + \",\" + d;\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String joinAll(String a, String b, String c, String d) {\n    return String.join(\",\", a, b, c, d);\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CodeBlock2Expr",
          "displayName": "Statement lambda can be replaced with expression lambda",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions with code block bodies when expression-style bodies can be used instead.\nThe result of the conversion is shorter and more clear.\n<p>Example:</p>\n<pre><code>\n  Comparable&lt;String&gt; c = o -> {return 0;};\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Comparable&lt;String&gt; c = o -> 0;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StaticPseudoFunctionalStyleMethod",
          "displayName": "Pseudo-functional expression using static class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of pseudo-functional code if <code>Java Stream API</code> is available.\n<p>Though <code>guava Iterable API</code> provides functionality similar to <code>Java Streams API</code>, it's slightly different and\n  may miss some features.\n  Especially, primitive-specialized stream variants like <code>IntStream</code> are more performant than generic variants.</p>\n<p><b>Example:</b></p>\n<pre><code>\nList&lt;String&gt; transformedIterable = Iterables.transform(someList, someTransformFunction);//warning: Pseudo functional style code\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>List&lt;String&gt; transformedIterable = someList.stream().map(someTransformFunction).collect(Collectors.toList());</code></pre>\n<p>\n  <b>Note:</b> Code semantics can be changed; for example, guava's <code>Iterable.transform</code> produces a lazy-evaluated iterable,\n  but the replacement is eager-evaluated.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Static method calls translated to the 'Steam' API</b> option\n  to configure static method calls that should be translated to the <code>stream</code> API.\n</p>\n\n<p>This inspection only reports if the language level of the project or module is eight or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2streamapi",
          "displayName": "Loop can be collapsed with Stream API",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops which can be replaced with stream API calls using lambda expressions.\n<p>Such a replacement changes the style from imperative to more functional and makes the code more compact.</p>\n<p>Example:</p>\n<pre><code>\n  <b>boolean</b> check(List&lt;String> data) {\n    <b>for</b> (String e : data) {\n      String trimmed = e.trim();\n      <b>if</b> (!trimmed.startsWith(\"xyz\")) {\n        <b>return</b> false;\n      }\n    }\n    return true;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>boolean</b> check(List&lt;String> data) {\n    <b>return</b> data.stream().map(String::trim).allMatch(trimmed -> trimmed.startsWith(\"xyz\"));\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.\n</body>\n</html>"
        },
        {
          "shortName": "Guava",
          "displayName": "Guava's functional primitives can be replaced with Java",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of Guava's functional primitives that can be replaced with Java API.\n<p>For example, the inspection reports usages of classes and interfaces like <code>FluentIterable</code>, <code>Optional</code>, <code>Function</code>,\n  <code>Predicate</code>, or <code>Supplier</code>.</p>\n<p>Example:</p>\n<pre>\n  ImmutableList&lt;String&gt; results = FluentIterable.from(List.of(1, 2, 3)).transform(Object::toString).toList();\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  List&lt;String&gt; results = List.of(1, 2, 3).stream().map(Object::toString).collect(Collectors.toList());\n</pre>\n<p>\nThe quick-fix may change the semantics. Some lazy-evaluated Guava's iterables can be transformed to eager-evaluated.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "Anonymous2MethodRef",
          "displayName": "Anonymous type can be replaced with method reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports anonymous types which can be replaced with method references.\n<p>\n  Note that if an anonymous class is converted into an unbound method reference, the same method reference object \n  can be reused by the Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\n  separate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases, \n  e.g. when anonymous class instances are used as <code>HashMap</code> keys.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n    Runnable r = new Runnable() {\n      @Override\n      public void run() {\n        System.out.println();\n      }\n    };\n</code></pre>\n<p>The quick-fix changes this code to the compact form: <code>Runnable r = System.out::println;</code>.</p>\n<!-- tooltip end -->\n<p>Use the <b>Report when interface is not annotated with @FunctionalInterface</b> option to enable this inspection for\n  interfaces which are not annotated with @FunctionalInterface.</p>\n\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Lambda",
          "displayName": "Anonymous type can be replaced with lambda",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports anonymous classes which can be replaced with lambda expressions.\n<p>Example:</p>\n<pre><code>\n  new Thread(new Runnable() {\n    @Override\n    public void run() {\n      // run thread\n    }\n  });\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  new Thread(() -> {\n    // run thread\n  });\n</code></pre>\n<p>\nNote that if an anonymous class is converted into a stateless lambda, the same lambda object\ncan be reused by Java runtime during subsequent invocations. On the other hand, when an anonymous class is used,\nseparate objects are created every time. Thus, applying the quick-fix can cause the semantics change in rare cases,\ne.g. when anonymous class instances are used as <code>HashMap</code> keys.\n</p>\n<p>Lambda syntax is not supported in Java 1.7 and earlier JVMs.</p>\n<!-- tooltip end -->\n<p>\nUse the <b>Report when interface is not annotated with @FunctionalInterface </b> option to ignore the cases in which an anonymous\nclass implements an interface without <code>@FunctionalInterface</code> annotation.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "PhpNamedArgumentUsageInspection",
          "displayName": "Argument with name identifier",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>Reports arguments with name identifiers.</body>\n</html>"
        },
        {
          "shortName": "PhpLanguageLevelInspection",
          "displayName": "Language level",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the language features used in source code that are not supported for the selected language level.\n  <p>For example, union types can be used only in PHP 8.0 and later.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecatedImplodeUsageInspection",
          "displayName": "Deprecated 'implode/join' usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usage of the <code>implode</code> and <code>join</code> functions.\n<!-- tooltip end -->\n<p>Starting from PHP 7.4, using <code>implode</code> and <code>join</code> with an array as the first argument and a string as the second argument is deprecated.</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/deprecations_php_7_4#implode_parameter_order_mix\">Deprecations for PHP 7.4 (php.net)</a> for details.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassImplementsSolelyTraversableInspection",
          "displayName": "Class can't implement Traversable directly",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the classes that are implementing the <code>Traversable</code> interface alone, not as part of <code>Iterator</code> or <code>IteratorAggregate</code> interfaces.\n<!-- tooltip end -->\n<p>\n  The <code>Traversable</code> interface is an internal engine interface; it cannot be implemented in PHP scripts. See <a href=\"https://www.php.net/manual/en/class.traversable.php\">The Traversable interface (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDisabledExtensionStubsInspection",
          "displayName": "Disabled extension stubs",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of classes, functions, and constants, for which the stubs for the corresponding PHP interpreter extensions are disabled.\n<p>\n  You can configure the set of stubs under <b>Settings/Preferences | PHP | PHP Runtime</b>.\n</p>\n<p>\n  See <a href=\"https://blog.jetbrains.com/phpstorm/2018/03/how-to-provide-stubs-for-phpstorm/\">PhpStorm stubs (blog.jetbrains.com/phpstorm)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecatedCastInspection",
          "displayName": "Deprecated cast",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated cast expressions:\n<ul>\n  <li>\n    <code>(unset)</code> cast expressions, which are deprecated in PHP 7.2 and later.\n  </li>\n  <li>\n    <code>(real)</code> cast expressions, which are deprecated in PHP 7.4 and later.\n  </li>\n</ul>\n<p>\n  See <a href=\"https://www.php.net/manual/en/migration72.deprecated.php#migration72.deprecated.unset-cast\">Deprecated features in PHP 7.2.x (php.net)</a> and <a href=\"https://wiki.php.net/rfc/deprecations_php_7_4#the_real_type\">Deprecations for PHP 7.4 (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIgnoredClassAliasDeclaration",
          "displayName": "Ignored class alias declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the class alias declarations that are ignored by the IDE because the actual class declaration with the same FQN exists.\n<!-- tooltip end -->\n<p>\n  The inspection is intended to clarify the IDE’s behavior in the cases when both the class and the class alias declarations are present.\n  When several declarations with the same FQN exist, the IDE usually fails to choose a single one between them.\n  This leads to missing code completion, erroneous type inference, and so on. Since the class declaration prevails\n  over the class alias declaration, the latter becomes redundant and therefore ignored by the IDE.\n</p>\n<p>\n  Note that ignoring class alias declarations does not affect the behavior of the PHP interpreter.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncludeInspection",
          "displayName": "Unresolved include",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports non-resolved <code>include</code>, <code>include_once</code>, <code>require</code>, and <code>require_once</code> expressions.\n</body>\n</html>"
        },
        {
          "shortName": "PhpParameterNameChangedDuringInheritanceInspection",
          "displayName": "Parameter's name changed during inheritance",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports the methods' parameters whose names differ from the same parameters defined in parent methods. Starting with PHP 8.0, such code can cause runtime errors.\n  </body>\n</html>"
        },
        {
          "shortName": "PhpSuperClassIncompatibleWithInterfaceInspection",
          "displayName": "Method declaration in parent class is incompatible with implemented interface",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the methods declarations in parent classes that are incompatible with implemented interfaces.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArgumentWithoutNamedIdentifierInspection",
          "displayName": "Argument without name identifier",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports arguments without name identifiers.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDynamicAsStaticMethodCallInspection",
          "displayName": "Dynamic method called as static",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports static calls to dynamic class methods.\n  <!-- tooltip end -->\n  <p>For classes having the magic method <code>__callStatic</code>, a separate inspection severity and highlighting level can be set.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCurlyBraceAccessSyntaxUsageInspection",
          "displayName": "Curly brace access syntax usage",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of curly brace syntax for accessing array elements and string offsets.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNamedArgumentMightBeUnresolvedInspection",
          "displayName": "Named argument may be unresolved",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the named arguments in method calls that might be unresolved depending on a specific class instance within the hierarchy.\n</body>\n</html>"
        },
        {
          "shortName": "PhpHierarchyChecksInspection",
          "displayName": "Class hierarchy checks",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nChecks the classes' hierarchy: abstract methods implementation, the compatibility of implementing/overriding methods with their declarations in parent classes, and properties' types redeclarations.\n  <p>All reported violations result in PHP fatal errors. It is not recommended disabling or suppressing this inspection.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncorrectMagicMethodSignatureInspection",
          "displayName": "Incorrect magic method signature",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports incompatible magic methods signatures.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/magic-methods-signature\">RFC: Ensure correct signatures of magic methods (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpFieldCanBePromotedInspection",
          "displayName": "Property can be promoted",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the properties that can be replaced with promoted versions.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNestedTernaryExpressionUsageInspection",
          "displayName": "Nested ternary operator usage",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports nested ternary expressions, which are deprecated starting from PHP 7.4.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDeprecationInspection",
          "displayName": "Deprecated",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of deprecated entities.\n<p>\n  In most cases, such usages should be removed or replaced with other constructs.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpStaticAsDynamicMethodCallInspection",
          "displayName": "Static method called as dynamic",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports dynamic calls to static class methods.\n<!-- tooltip end -->\n<p>If the target has the magic method <code>__call</code>, a separate inspection severity and highlighting level can be set.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpElementIsNotAvailableInCurrentPhpVersionInspection",
          "displayName": "Element is not available in configured PHP version",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of entities which were introduced in PHP version later than configured one.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInvalidMagicMethodModifiersInspection",
          "displayName": "Invalid magic method modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the magic methods that are not declared as public or are declared as static.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPromotedFieldUsageInspection",
          "displayName": "Promoted property usage",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties declared through promoted constructor parameters.\n<p>\n  Using promoted properties is only possible since PHP 8.0. In earlier PHP versions, it leads to a parse error.\n</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInternalEntityUsedInspection",
          "displayName": "Usage of internal entity",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the usages of the entities that are marked as <code>@internal</code> and are located in different source roots. The usages located in the same source root are not reported.\n  <p>\n    In most cases, the reported usages should be removed or replaced with other constructs.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "GroovySillyAssignment",
          "displayName": "Silly assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments of a variable to itself.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedAssignment",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions.\nWhile admirably terse, such expressions may be confusing, and violate the general design principle that a given construct\nshould do precisely one thing.\n<p><b>Example:</b></p>\n<pre>\n<code>\na = b = 1\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentToForLoopParameter",
          "displayName": "Assignment to 'for' loop parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports assignments to <b>for</b> loop parameters inside the <b>for</b> loop body.\n<p>While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  for (value in [1, 2, 3]) {\n      value = 4 // warning\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUncheckedAssignmentOfMemberOfRawType",
          "displayName": "Unchecked assignment from members of raw type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unchecked assignments from members of raw type.\n<p><b>Example:</b></p>\n<pre><code>\n  List list = new ArrayList()\n  List&ltString&gt a = <b>list.get(0)</b>\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfAssignmentUsed",
          "displayName": "Result of assignment used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment expressions nested inside other expressions to use the assigned value immediately.\n<p>\n  Such expressions may be confusing and violating the general design principle that a\n  given construct should do precisely one thing.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports assignment to method parameters.\n<p>While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  def m(a, b, c) {\n      a = [] // warning\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignmentCanBeOperatorAssignment",
          "displayName": "Assignment can be replaced with operator assignment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments which can be replaced by an operator assignment.\n<p><b>Example:</b></p>\n<pre><code>\n  a = a + b\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a += b\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore conditional operators</b> option to ignore <code>&amp;&amp;</code> and <code>||</code> operators.</li>\n  <li>Use the <b>Ignore obscure operators</b> option to ignore <code>^</code> and <code>%</code> operators.</li>\n</ul>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAssignabilityCheck",
          "displayName": "Incompatible type assignments",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments with incompatible types.\n<p>Such assignments might result in various runtime exceptions.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class A {}\n  class B {}\n\n  // incompatible assignment\n  A a = new B()\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "toString() issues",
      "inspections": [
        {
          "shortName": "FieldNotUsedInToString",
          "displayName": "Field not used in 'toString()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any fields that are not used in the <code>toString()</code> method of a class.\n<p>This inspection can help discover the\nfields that were added after the <code>toString()</code> method was created and for which the <code>toString()</code> method was not\n  updated. The quick-fix regenerates the <code>toString()</code> method.</p>\n<p>\nIn the <b>Generate | toString()</b> dialog, it is possible to exclude fields from this check.\nThis inspection will also check for problems with getter methods if the <em>Enable getters in code generation</em> option is enabled there.\n<p>Example:</p>\n<pre><code>\n  <b>public class</b> Relevant {\n    <b>private</b> String name; // not used in toString()\n    <b>private int</b> index;\n    <b>private int</b> length;\n\n    @Override\n    <b>public</b> String toString() {\n        <b>return</b> \"Relevant{\" + \"index=\" + index +\n          \", length=\" + length + '}';\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Relevant {\n    <b>private</b> String name;\n    <b>private int</b> index;\n    <b>private int</b> length;\n\n    @Override\n    <b>public</b> String toString() {\n        <b>return</b> \"Relevant{\" + \"name='\" + name + '\\'' +\n          \", index=\" + index + \", length=\" + length + '}';\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ClassHasNoToStringMethod",
          "displayName": "Class does not override 'toString()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without a <code>toString()</code> method.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 10",
      "inspections": [
        {
          "shortName": "VariableTypeCanBeExplicit",
          "displayName": "Variable type can be explicit",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables of the <code>var</code> type that can be replaced withvan explicit type.\n<p>The inspection can help find and eliminate usages of implicit types in case of downgrading.</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre><code>\n  var str = \"Hello\";\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String str = \"Hello\";\n</code></pre>\n<p>This inspection only reports if the language level of the project or module is ten or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantExplicitVariableType",
          "displayName": "Local variable type can be omitted",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant local variable types.\n<p>These types can be inferred from the context and thus replaced with <code>var</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void test(InputStream s) {\n    try (InputStream in = s) {}\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  void test(InputStream s) {\n    try (var in = s) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHPUnit",
      "inspections": [
        {
          "shortName": "PhpUnitAssertCanBeReplacedWithFailInspection",
          "displayName": "Assertion can be replaced with 'fail'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of <code>assertTrue</code>/<code>assertFalse</code> methods with the <code>false</code>/<code>true</code> arguments in PHPUnit tests. Such usages can be replaced with <code>fail</code> calls to indicate that a test is expected to fail.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitExpectedExceptionDocTagIsDeprecatedInspection",
          "displayName": "Deprecated exception handling via doc tags",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of the following deprecated PHPUnit doc tags:\n<ul>\n  <li><code>@expectedException</code></li>\n  <li><code>@expectedExceptionMessage</code></li>\n  <li><code>@expectedExceptionCode</code></li>\n  <li><code>@expectedExceptionMessageRegExp</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitCoversByAccessModifierIsDeprecatedInspection",
          "displayName": "Deprecated @covers/@uses by access modifier annotation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>@covers</code> and <code>@uses</code> PHPUnit doc tags that are using <code>ClassName::&lt;*&gt;</code>. Such annotations won't be supported in PHPUnit 10 and later.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitDeprecatedExpectExceptionInspection",
          "displayName": "Deprecated expectException usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of <code>expectException()</code>.\n<p>\n  Support for using the <code>expectException()</code> method with\n  <code>\\PHPUnit\\Framework\\Error\\Deprecated</code>,\n  <code>\\PHPUnit\\Framework\\Error\\Error</code>,\n  <code>\\PHPUnit\\Framework\\Error\\Notice</code>, and\n  <code>\\PHPUnit\\Framework\\Error\\Warning</code> is deprecated and will be removed in PHPUnit 10.\n</p>\n<p>\n  Instead, the <code>expectDeprecation()</code>, <code>expectError()</code>, <code>expectNotice()</code>, and\n  <code>expectWarning()</code> methods should be used.\n</p>\n\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/9.0/writing-tests-for-phpunit.html#testing-php-errors-warnings-and-notices\">Testing PHP Errors, Warnings, and Notices (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitMissingTargetForTestInspection",
          "displayName": "Missing target element for PHPUnit test",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the test classes and methods, for which no corresponding production classes or methods were found.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertFileEqualsInspection",
          "displayName": "Deprecated 'assertFileEquals/assertStringEqualsFile' usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the deprecated usages of the <code>assertFileEquals</code>, <code>assertFileNotEquals</code>, <code>assertStringEqualsFile</code>, and <code>assertStringNotEqualsFile</code> functions with the <code>$canonicalize</code> and <code>$ignoreCase</code> parameters.\n<!-- tooltip end -->\n<p>The optional <code>$canonicalize</code> and <code>$ignoreCase</code> parameters\n  of the <code>assertFileEquals</code> and <code>assertFileNotEquals</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertfileequals\">Usage of the assertFileEquals function (phpunit.readthedocs.io)</a> or <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertstringequalsfile\">Usage of the assertFileEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitUndefinedDataProviderInspection",
          "displayName": "Undefined PHPUnit data provider",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the references to functions/methods in the <code>@dataProvider</code> PHPDoc tag that are not resolved.\n\n  <p>Note that when resolving <code>dataProvider</code>, PHPUnit doesn't take <code>use</code> statements into account.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertEqualsInspection",
          "displayName": "Deprecated 'assertEquals/assertNotEquals' usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of the <code>assertEquals</code> and <code>assertNotEquals</code> functions with <code>$delta</code>, <code>$maxDepth</code>,\n<code>$canonicalize</code>, and <code>$ignoreCase</code> parameters.\n<!-- tooltip end -->\n<p>The optional <code>$delta</code>, <code>$maxDepth</code>, <code>$canonicalize</code>, and <code>$ignoreCase</code> parameters\n  of the <code>assertEquals</code> and <code>assertNotEquals</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertequals\">Usage of the assertEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertCanBeReplacedWithEmptyInspection",
          "displayName": "Assertion can be replaced with 'assertEmpty/assertNotEmpty'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>assertTrue</code>/<code>assertFalse</code> usages that can be replaced with <code>assertEmpty</code>/<code>assertNotEmpty</code> in PHPUnit tests.\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/9.5/assertions.html#assertempty\">assertEmpty (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertArrayHasKeyInspection",
          "displayName": "Method 'assertArrayHasKey/assertArrayNotHasKey' can be used instead",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports alternative usage of the <code>assertTrue</code> and <code>assertNotTrue</code> methods with <code>array_key_exists</code> function\nas a parameter\n\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/ru/latest/assertions.html#assertarrayhaskey\">assertArrayHasKey</a> for details.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertContainsInspection",
          "displayName": "Deprecated 'assertContains/assertNotContains' usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated usages of the <code>assertContains</code> and <code>assertNotContains</code> functions with string <code>$needle</code> and <code>$ignoreCase</code> parameter.\n<!-- tooltip end -->\n<p>The string <code>$needle</code> and optional boolean <code>$ignoreCase</code> parameters\n  of the <code>assertContains</code> and <code>assertNotContains</code> functions are deprecated and will be removed in PHPUnit 9.</p>\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertstringcontainsstring\">Usage of the assertEquals function (phpunit.readthedocs.io)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitMisorderedAssertEqualsArgumentsInspection",
          "displayName": "Misordered 'assertEquals/assertNotEquals' arguments",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to PHPUnit <code>assertEquals</code> and <code>assertNotEquals</code> which have a non-literal as the expected result\nargument and a literal as the actual result argument. Such calls will behave fine for assertions which pass, but may give confusing error\nreports if their expected and actual arguments differ.\n<p>\n  See <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertequals\">assertEquals</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitAssertCountInspection",
          "displayName": "Usage 'assertCount/assertSameSize' methods instead of assertEquals",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports alternative usage of the <code>assertEquals</code> and <code>assertNotEquals</code> methods with <code>count</code> function as a parameter\n\n<p>\nSee <a href=\"https://phpunit.readthedocs.io/en/8.4/assertions.html#assertcount\">Usage of the assertCount</a> for details.\n</p>\n<p>\nSee <a href=\"https://hotexamples.com/examples/-/PHPUnit_Framework_Assert/assertSameSize/php-phpunit_framework_assert-assertsamesize-method-examples.html\">Usage of the assertSameSize</a> for details.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnitCoversFunctionWithoutScopeResolutionOperatorInspection",
          "displayName": "Covered function reference is provided without ‘::’",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to functions/methods in the <code>@covers</code> PHPDoc tags that are not prepended with the scope resolution operator (<code>::</code>).\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "KotlinLoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Logger</code> instances initialized with a class literal other than the class the <code>Logger</code>\nresides in.\n<p>\n    This can happen when copy-pasting from another class.\n    It may result in logging events under an unexpected category and incorrect filtering.\n</p>\n<p>\n    Use the inspection options to specify the logger factory classes and methods recognized by this inspection.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code smell",
      "inspections": [
        {
          "shortName": "PhpExpressionWithSameOperandsInspection",
          "displayName": "Logical expression has same operands",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the expressions that use the same operands, but should rather use different operands (for example, <code>$var == $var</code>). These include comparison, logical, null-coalescing, subtraction, and division expressions.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInArrayCanBeReplacedWithComparisonInspection",
          "displayName": "'in_array' can be replaced with comparison",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>in_array</code> calls that are provided with a single-element array as the <code>$haystack</code> argument. Such calls can be replaced with direct comparisons.\n<p>\n  See <a href=\"https://www.php.net/manual/en/function.in-array.php\">in_array (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUselessTrailingCommaInspection",
          "displayName": "Useless trailing comma",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the trailing commas in parameters lists and closures' <code>use</code> lists that do not bring any benefit.\n<ul>\n  <li>In a single-line list, a trailing comma is redundant and can be removed.</li>\n  <li>In a multiline list, if no line break is provided after a trailing comma, it becomes impossible to easily add, remove, or move\n    lines.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpContinueTargetingSwitchInspection",
          "displayName": "'continue' is targeting 'switch' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>continue</code> statements that are targeting <code>switch</code> statements. In PHP 7.3 and later, such usages are deprecated and will emit an <code>E_WARNING</code>, since they are most likely the result of a programming mistake.\n<!-- tooltip end -->\n<ul>\n  <li>\n    In PHP, such <code>continue</code> statements are equivalent to <code>break</code>, that is, they end the execution of the current <code>switch</code> structure.\n  </li>\n  <li>\n    In other languages, such <code>continue</code> statements behave as <code>continue 2</code> in PHP, that is, they take the execution to a higher level control structure (for example, the next iteration of an outer loop).\n  </li>\n</ul>\n<p>\n  See <a href=\"https://www.php.net/manual/en/control-structures.continue.php\">continue (php.net)</a>, <a href=\"https://www.php.net/manual/en/control-structures.break.php\">break (php.net)</a>, and <a href=\"https://www.php.net/manual/en/control-structures.switch.php\">switch (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringMayProduceExceptionInspection",
          "displayName": "'__toString' may throw an exception",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of <code>__toString</code> that may throw an exception, which is not allowed for PHP language level lower than 7.4.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantMethodOverrideInspection",
          "displayName": "Redundant method override",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the overriding methods that only consist of a single call to the parent method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpFormatCallWithSingleArgumentInspection",
          "displayName": "Format function call with single argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>sprintf</code> and <code>vsprintf</code> calls with a single argument. Such calls can be safely unwrapped.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateCatchBodyInspection",
          "displayName": "Duplicate branch in 'catch' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>catch</code> statements with duplicated bodies.\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopCanBeReplacedWithStrRepeatInspection",
          "displayName": "Loop can be replaced with 'str_repeat'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>for</code> loops that can be safely replaced with <code>str_repeat</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryLocalVariableInspection",
          "displayName": "Unnecessary local variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the local variables that are used in exit statements, such as <code>throw</code>, <code>return</code>, or <code>yield</code>, immediately after assignment.\n</body>\n</html>"
        },
        {
          "shortName": "PhpFuncGetArgCanBeReplacedWithParamInspection",
          "displayName": "'func_get_arg' call can be replaced with parameter access",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>func_get_arg</code> calls that can be replaced with direct parameter access.\n</body>\n</html>"
        },
        {
          "shortName": "PhpReturnValueOfMethodIsNeverUsedInspection",
          "displayName": "Method's return value is never used",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the private methods returning the values that are not used.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayAccessCanBeReplacedWithForeachValueInspection",
          "displayName": "Array access can be replaced with 'foreach' value",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the array access expressions inside <code>foreach</code> loops that can be replaced with a <code>foreach</code> value.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDefineConstantNameStartsWithLeadingSlashInspection",
          "displayName": "Constant name defined with a leading slash",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>define</code> constructs in which the constant's FQN starts with a leading slash. Such constants will not be correctly registered by PHP.\n</body>\n</html>"
        },
        {
          "shortName": "PhpExceptionImmediatelyRethrownInspection",
          "displayName": "Exception is immediately rethrown",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>catch</code> statements that only rethrow a caught exception, which is located in a class hierarchy different from the subsequent exception types.\n</body>\n</html>"
        },
        {
          "shortName": "PhpConcatenationWithEmptyStringCanBeInlinedInspection",
          "displayName": "Concatenation to empty string can be merged with assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>.=</code> concatenation assignments performed right after assignment to an empty string literal. Such assignments can be merged together.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantDefaultBreakContinueArgumentInspection",
          "displayName": "Redundant 'continue/break' argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the redundant <code>1</code> argument of <code>continue</code> and <code>break</code> statements. Since this argument is optional and its default value is <code>1</code>, such usages can be omitted.\n\n<p>\n  See <a href=\"https://www.php.net/manual/en/control-structures.continue.php\">continue (php.net)</a> and <a href=\"https://www.php.net/manual/en/control-structures.break.php\">break (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpBooleanCanBeSimplifiedInspection",
          "displayName": "Boolean expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the boolean expressions that contain the <code>true</code> or <code>false</code> literals and can be simplified.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantAssignmentToPromotedFieldInspection",
          "displayName": "Redundant assignment to promoted property",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports redundant assignments to class properties that duplicate automatic assignments performed through promoted constructor parameters.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/constructor_promotion\">Constructor Property Promotion (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopCanBeReplacedWithImplodeInspection",
          "displayName": "Loop can be replaced with 'implode'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> loops that can be safely replaced with <code>implode</code> calls.\n<p>\n  See <a href=\"https://www.php.net/manual/en/function.implode.php\">implode (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpClassConstantAccessedViaChildClassInspection",
          "displayName": "Class constant referenced via child class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the class constant references that target the constant from the parent class of the referenced class.\n</body>\n</html>"
        },
        {
          "shortName": "PhpParameterByRefIsNotUsedAsReferenceInspection",
          "displayName": "Unnecessary pass-by-ref",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are passed by reference to a function/method but are not modified in the function/method body. In such cases, the <code>&</code> in parameter's declaration can be safely removed.\n<!-- tooltip end -->\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.references.pass.php\">Passing by Reference (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpOverridingMethodVisibilityInspection",
          "displayName": "Method visibility should not be overridden",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nChecks that the methods don't override visibility.\n<p>\n  Overriding a <code>protected</code> method with a <code>public</code> method in a child class makes this method accessible from everywhere.\n  This violates the encapsulation principle and is considered bad practice.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.oop5.visibility.php#language.oop5.visiblity-methods\">Method Visibility (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUsageOfSilenceOperatorInspection",
          "displayName": "Usage of a silence operator",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of the silence operator (<code>@</code>), which is highly discouraged.\n<p>See <a href=\"https://www.php.net/manual/en/language.operators.errorcontrol.php\">Error Control Operators (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNestedDirNameCallsCanBeReplacedWithLevelParameterInspection",
          "displayName": "Nested 'dirname' call can be replaced with 'levels' parameter usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the nested <code>dirname</code> calls that can be omitted by using the <code>levels</code> parameter instead.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryStaticReferenceInspection",
          "displayName": "Redundant 'static' in final class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>static</code> usages inside final class\n</body>\n</html>"
        },
        {
          "shortName": "PhpIfCanBeMergedWithSequentialConditionInspection",
          "displayName": "'if' can be merged with subsequent condition",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>if</code> statements that are followed by <code>elseif</code> or other <code>if</code> statements having the same bodies. Such statements can be merged together.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMatchExpressionWithOnlyDefaultArmInspection",
          "displayName": "'match' expression has only default arm and should be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>match</code> expressions only containing a <code>default</code> arm. Such expressions are redundant and should be simplified.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPropertyOnlyWrittenInspection",
          "displayName": "Property usages have same access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the private properties that are:\n<ul>\n  <li>written but never read</li>\n  <li>read but never written</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayUsedOnlyForWriteInspection",
          "displayName": "Array used only with write access",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports local arrays that are only updated, but never queried.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTooManyParametersInspection",
          "displayName": "Too many parameters in function declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the function/method declarations with the number of parameters exceeding the specified limit.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInvalidInstanceofInspection",
          "displayName": "Argument of 'instanceof' should be only objects or strings",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n  <body>\n    Reports arguments of 'instanceof' that are not objects or strings\n  </body>\n</html>"
        },
        {
          "shortName": "PhpArrayIsAlwaysEmptyInspection",
          "displayName": "Array is always empty at the point of access",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the iterated/accessed arrays that are known to be empty at the point of access.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryStopStatementInspection",
          "displayName": "Unnecessary 'return/continue' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports unnecessary <code>return</code> and <code>continue</code> statements that can be safely removed.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSameParameterValueInspection",
          "displayName": "Parameter's value is always the same",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters in private methods that have the same value across all method calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTernaryExpressionCanBeReplacedWithConditionInspection",
          "displayName": "Ternary expression can be replaced with condition",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the ternary expressions specified as <code>condition ? true : false</code> that can be safely replaced with just <code>condition</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryStringCastInspection",
          "displayName": "Redundant cast to string",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>(string)</code> casts and <code>strval</code> calls that are redundant since casting to string is performed implicitly.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMethodParametersCountMismatchInspection",
          "displayName": "Parameters number mismatch declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the function/method calls that take more parameters than specified in their declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPrivateFieldCanBeLocalVariableInspection",
          "displayName": "Private property can be local",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the private properties that are used only in a single method. Such properties can be replaced with local variables.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInconsistentReturnPointsInspection",
          "displayName": "Inconsistent return points",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports inconsistencies in function/method exit points.\n<!-- tooltip end -->\n<p>\nThe following types of inconsistencies are reported:\n</p>\n  <ul>\n    <li>The function/method contains the <code>return</code> statements both with and without arguments.</li>\n    <li>The function/method may return a value or otherwise end its execution without returning anything.</li>\n  </ul>\n<p>\nTechnically these are not errors, but practically they usually indicate a programming mistake.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnnecessaryBoolCastInspection",
          "displayName": "Redundant cast to boolean",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>(bool)</code>/<code>(boolean)</code> casts and <code>boolval</code> calls that are redundant since casting to <code>bool</code> is performed implicitly.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTernaryExpressionCanBeReducedToShortVersionInspection",
          "displayName": "Ternary expression can be replaced with short version",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>?:</code> ternary expressions in which the condition and the <code>true</code> statement are matching.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantOptionalArgumentInspection",
          "displayName": "Redundant optional argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant arguments that match the corresponding default values for optional parameters.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessarySemicolonInspection",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary semicolons.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Style",
      "inspections": [
        {
          "shortName": "ChangeToMethod",
          "displayName": "Operator invocation can be replaced with method call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports operator invocations that can be replaced with method calls.\n<p><b>Example:</b></p>\n<pre><code>\n  a + b\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a.plus(b)\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaStylePropertiesInvocation",
          "displayName": "Java-style property access",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties accessed via method calls.\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n      int foo\n  }\n\n  def bar = new Foo()\n  print(<b>bar.getFoo()</b>)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo {\n      int foo\n  }\n\n  def bar = new Foo()\n  print(<b>bar.foo</b>)\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryPublicModifier",
          "displayName": "Unnecessary 'public'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary <b>public</b> modifiers as Groovy classes and methods are <b>public</b> by default.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Foo{\n      public void bar(){\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo{\n      void bar(){\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryAlias",
          "displayName": "Unnecessary import alias",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary import aliases\n<p><b>Example:</b></p>\n<pre><code>\n  import com.foo.Bar as Bar\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  import com.foo.Bar\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConditional",
          "displayName": "Ternary expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary expressions.\n<p>Some coding standards prohibit the use of the condition operator in favor of <code>if</code> statements.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ChangeToOperator",
          "displayName": "Method call can be replaced with operator invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls that can be replaced with operator invocations.\n<p><b>Example:</b></p>\n<pre><code>\n  a.plus(b)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a + b\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessaryDefModifier",
          "displayName": "Unnecessary 'def'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary <b>def</b> modifiers when used with explicit type declaration.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>def</b> boolean foo() {} // modifier is unnecessary\n  <b>def</b> Object bar // modifier is unnecessary\n\n  // modifier is required and therefore not highlighted\n  <b>def</b> (int a, String b) = []\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary semicolons.\n<p><b>Example:</b></p>\n<pre><code>\n  print 2; print 3 // semicolon is required\n  print 2; // semicolon is unnecessary\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrStringStyleViolation",
          "displayName": "String style violation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports strings with quotation that doesn't match code style.\n<p><b>Example:</b></p>\n<pre><code>\n  def hw = \"Hello, world!\"\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  def hw = 'Hello, world!'\n</code></pre>\n<!-- tooltip end -->\n<p>Use the fields provided below to specify code style for different kinds of strings.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "JCenterRepository",
          "displayName": "Builds will no longer be able to resolve artifacts from JCenter after February 1st, 2022",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nDetects usages of the JCenter repository to resolve dependencies.\nBuilds will no longer be able to resolve artifacts from JCenter after February 1st, 2022.\n</body>\n</html>"
        },
        {
          "shortName": "MultipleRepositoryUrls",
          "displayName": "Multiple repository urls",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usage of multiple URLs per repository (maven or ivy) block.\nThe problem is that only one URL can be picked up for the repository, the other URLs will be ignored.\n</body>\n</html>"
        },
        {
          "shortName": "BintrayPublishingPlugin",
          "displayName": "Bintray publishing plugin may stop working on May 1st, 2021",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.plugins.gradle",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>                                            \n<p>Detects usages of Gradle plugin <code>com.jfrog.bintray</code>.\n  The plugin is used for publishing build results to Bintray.\n  Publishing to\n  <a href=\"https://www.jfrog.com/confluence/display/BT/Welcome+to+JFrog+Bintray\">Bintray</a> service is disabled.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Manifest",
      "inspections": [
        {
          "shortName": "MissingFinalNewline",
          "displayName": "Missing final new line",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "Manifest",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if manifest files do not end with a final newline as required by the JAR file specification.\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledHeader",
          "displayName": "Unknown or misspelled header name",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "Manifest",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports any unknown and probably misspelled header names and provides possible variants.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java interop issues",
      "inspections": [
        {
          "shortName": "FakeJvmFieldConstant",
          "displayName": "Kotlin non-const property used as Java constant",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports non-<b>const</b> Kotlin properties used as Java annotation arguments.\nFor example a property which is annotated with <b>@JvmField</b>,\nhas an initializer that can be evaluated at compile-time, has a primitive or <b>String</b> type.\n\n<p>\nSuch properties have a <b>ConstantValue</b> attribute in bytecode in Kotlin 1.1-1.2.\nThis attribute allows javac to fold usages of the corresponding field and use that field in annotations.\nThis can cause incorrect behavior in case of separate or incremental compilation in mixed Java/Kotlin code.\nThis behavior is subject to change in Kotlin 1.3 (no <b>ConstantValue</b> attribute any more).\nRecommended action: replace the <b>@JvmField</b> annotation with a <b>const</b> modifier on a relevant Kotlin property or inline it.\n</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "PackageDirectoryMismatch",
          "displayName": "Package name does not match containing directory",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>package</code> directives that do not match the location of the file.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinSealedInheritorsInJava",
          "displayName": "Inheritance of Kotlin sealed interface/class from Java",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports attempts to inherit from Kotlin sealed interfaces or classes in Java code.\n</body>\n</html>"
        },
        {
          "shortName": "PlatformExtensionReceiverOfInline",
          "displayName": "'inline fun' with nullable receiver until Kotlin 1.2",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports potentially unsafe calls of inline functions with flexible nullable (platform type with unknown nullability) extension receivers.</p>\n<p>\n    Before Kotlin 1.2, calls of <code>inline fun</code> with flexible nullable extension receiver (a platform type with an unknown\n    nullability) did not include nullability checks in bytecode. Since Kotlin 1.2, nullability checks are included into the bytecode\n    (see <a href=\"https://youtrack.jetbrains.com/issue/KT-12899\">KT-12899</a>).\n</p>\n<p>\n    It's recommended to add an explicit <code>!!</code> you want an exception to be thrown,\n    or consider changing the function's receiver type to nullable if it should work without exceptions.\n</p>\n<p>After the quick-fix is applied: an explicit <code>!!</code> is added to receiver.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is lower than 1.2.</p>\n</body>\n</html>"
        },
        {
          "shortName": "KotlinInternalInJava",
          "displayName": "Usage of Kotlin internal declarations from Java",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of Kotlin <code>internal</code> declarations in Java code that is located in a different module.\n<p>\n    The <code>internal</code> keyword is designed to restrict access to a class, function, or property from other modules.\n    Due to JVM limitations, <code>internal</code> classes, functions, and properties can still be\n    accessed from outside Kotlin, which may later lead to compatibility problems.\n</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantNotNullExtensionReceiverOfInline",
          "displayName": "'inline fun' extension receiver can be explicitly nullable until Kotlin 1.2",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports inline functions with non-nullable extension receivers which don't use the fact that extension receiver is not nullable.</p>\n<p>\n    Before Kotlin 1.2, calls of <code>inline fun</code> with flexible nullable extension receiver (a platform type with an unknown \n    nullability) did not include nullability checks in bytecode. Since Kotlin 1.2, nullability checks are included into the bytecode\n    (see <a href=\"https://youtrack.jetbrains.com/issue/KT-12899\">KT-12899</a>).\n</p>\n<p>\n    Thus functions which do not use the fact that extension receiver is not nullable are dangerous in Kotlin until 1.2 and it's\n    recommended to make such functions to have nullable receiver.\n</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is lower than 1.2.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "HasPlatformType",
          "displayName": "Function or property has platform type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports functions and properties that have a platform type.\n<p>In order to prevent unexpected errors, the type should be declared explicitly.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaCollectionsStaticMethodOnImmutableList",
          "displayName": "Call of Java mutator method on immutable Kotlin collection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReport calls of Java mutator methods (like <b>fill</b>, <b>reverse</b>, <b>shuffle</b>, <b>sort</b>) on an immutable Kotlin collection.\n<p>This will likely produce an <b>UnsupportedOperationException</b> at runtime.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "JUnit",
      "inspections": [
        {
          "shortName": "TestMethodIsPublicVoidNoArg",
          "displayName": "Malformed test method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any JUnit test methods that are declared <code>static</code>, not declared\n  <code>public</code>, do not return <code>void</code>, or have parameters.</p>\n<p>Such test methods are easy to create inadvertently, but they will not be executed by\n  JUnit test runners.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Test\n  void test() {\n    assertEquals(1, 1);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Test\n  public void test() {\n    assertEquals(1, 1);\n  }\n</code></pre>\n<!-- tooltip end -->\n\n<p>Use the inspection options to specify annotations.\n  Any parameter annotated with one of these annotations will not be reported.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MigrateAssertToMatcherAssert",
          "displayName": "JUnit assertion can be 'assertThat()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Assert.assertEquals()</code>, <code>Assert.assertTrue()</code>, etc. methods\nwhich can be migrated to Hamcrest declarative style <code>Assert.assertThat()</code> calls.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> SubstantialTest {\n    @Test\n    <b>public void</b> testContents(Collection&lt;String> c, String s) {\n      Assert.assertTrue(c.contains(s));\n      Assert.assertEquals(c, s);\n      Assert.assertNotNull(c);\n      Assert.assertNull(c);\n      Assert.assertFalse(c.contains(s));\n    }\n  }\n</code></pre>\n<p>A quick-fix is provided to perform the migration:</p>\n<pre><code>\n  <b>public class</b> SubstantialTest {\n    @Test\n    <b>public void</b> testContents(Collection&lt;String> c, String s) {\n      assertThat(c, hasItem(o));\n      assertThat(o, is(c));\n      assertThat(c, notNullValue());\n      assertThat(c, nullValue());\n      assertThat(c, not(hasItem(o)));\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection requires that the Hamcrest library is available on the classpath.\n<p>Use the <b>Statically import matcher's methods</b> option to specify if you want the quick-fix to statically import the Hamcrest matcher methods.\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseInProductCode",
          "displayName": "JUnit TestCase in product source",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 3 test classes in product source trees.\nThis most likely indicates a programmer's error and can result in test code being shipped\ninto production.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuperTearDownInFinally",
          "displayName": "'super.tearDown()' not called from 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the calls of the JUnit 3's <code>super.tearDown()</code> method that are not performed inside the <code>finally</code> block.\nIf there are other method calls in the <code>tearDown()</code> method that may throw\nan exception before the <code>super.tearDown()</code> call, this may lead to inconsistencies and leaks.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> AnotherTest <b>extends</b> CompanyTestCase {\n    <b>private</b> Path path;\n\n    @Override\n    <b>protected void</b> setUp() <b>throws</b> Exception {\n      <b>super</b>.setUp();\n      path = Files.createTempFile(\"abcde\", \".tmp\");\n    }\n\n    @Override\n    <b>protected void</b> tearDown() <b>throws</b> Exception {\n      Files.delete(path);\n      <b>super</b>.tearDown();\n    }\n  }\n</code></pre>\n<p>The improved code:</p>\n<pre><code>\n  <b>public class</b> AnotherTest <b>extends</b> CompanyTestCase {\n    <b>private</b> Path path;\n\n    @Override\n    <b>protected void</b> setUp() <b>throws</b> Exception {\n      <b>super</b>.setUp();\n      path = Files.createTempFile(\"abcde\", \".tmp\");\n    }\n\n    @Override\n    <b>protected void</b> tearDown() <b>throws</b> Exception {\n      <b>try</b> {\n        Files.delete(path);\n      } <b>finally</b> {\n        <b>super</b>.tearDown();\n      }\n    }\n  }\n</code></pre>\n  <!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ExpectedExceptionNeverThrown",
          "displayName": "Expected exception never thrown in test method body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the checked exceptions expected by a JUnit 4 test method that are never thrown inside the method body.\nSuch test methods will never succeed.\n<p><b>Example:</b></p>\n<pre><code>\n  @Test(expected = CloneNotSupportedException.class)\n  <b>public void</b> testIt() {\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JUnit3StyleTestMethodInJUnit4Class",
          "displayName": "Old style JUnit test method in JUnit 4 class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit 3 style test methods that are located inside a class\n  that does not extend the JUnit 3 <code>TestCase</code> class and contains JUnit 4 or JUnit 5 <code>@Test</code> annotated methods.</p>\n<p>Such test methods cannot be run.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MetaAnnotationWithoutRuntimeRetention",
          "displayName": "Test annotation without '@Retention(RUNTIME)' annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports annotations with the <code>SOURCE</code> or <code>CLASS</code> retention policy when they are supposed to be used by JUnit 5.</p>\n<p>Note that if the retention policy is not specified, then the default retention policy <code>CLASS</code> is used.\n  Such annotations are not available at runtime and most probably their retention policy should be fixed to be accessible through reflection. </p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Testable\n  public @interface UnitTest {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n<code>\n  @Retention(RetentionPolicy.RUNTIME)\n  @Testable\n  public @interface UnitTest {}\n</code></pre>\n<!-- tooltip end -->\n<!--<p><small>New in 2017.2</small></p>-->\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithNoTestMethods",
          "displayName": "Test class with no tests",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>abstract</code> test cases which do not\ncontain any test methods. Such test cases usually indicate unfinished code,\nor could be a refactoring leftover that should be removed.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> CrucialTest {\n    @Before\n    <b>public void</b> setUp() {\n      System.out.println(\"setting up\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to specify that test cases which have super classes with\ntest methods should be ignored by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JUnit4AnnotatedMethodInJUnit3TestCase",
          "displayName": "JUnit 4 test method in class extending JUnit 3 TestCase",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit 4 <code>@Test</code> annotated methods inside the inheritor\n  of <code>junit.framework.TestCase</code>. Mixing API of JUnit can lead to problems running the tests.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class MyTest extends TestCase {\n      @Test //name doesn't start from \"test\", thus would be ignored\n      public void wouldBeIgnored() {}\n  \n      @Test   //name starts from \"test\"\n      @Ignore //thus would be executed despite @Ignore annotation\n      public void testWouldBeExecuted() {}\n  }\n</code></pre>\n<p><b>Provided fixes:</b></p>\n<ul>\n  <li>Remove the <code>@Ignore</code> annotation and rename the test method, so the name doesn't start with \"test\".</li>\n  <li>Convert a JUnit 3 test class to JUnit 4.</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodInProductCode",
          "displayName": "JUnit test method in product source",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the methods annotated with the JUnit 4 or JUnit 5 <code>@Test</code> annotation that are located in production source trees.\nThis most likely indicates a programmer error and can result in test code being shipped into production.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JUnitDatapoint",
          "displayName": "Malformed @DataPoint field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields or methods annotated with <code>@DataPoint</code> that are not <code>public</code> and/or not <code>static</code>.\nA <a href=\"https://github.com/junit-team/junit4/wiki/Theories\">theories</a> test class with a malformed <code>@DataPoint</code> member\ncannot be run.\n<p>For example:</p>\n<pre><code>\n  @RunWith(Theories.class)\n  <b>public class</b> SeriousTest {\n    @DataPoint\n    <b>private</b> String dataPoint = \"value\";\n\n    @DataPoint(\"generated\")\n    <b>private</b> String generatedDataPoint() {\n      <b>return</b> \"generated value\";\n    }\n\n    @Theory\n    <b>public void</b> theoryMethod(String param) {\n      // ...\n    }\n  }\n</code></pre>\n<p>A quick fix is provided to fix the modifiers:</p>\n<pre><code>\n  @RunWith(Theories.class)\n  <b>public class</b> SeriousTest {\n    @DataPoint\n    <b>public static</b> String dataPoint = \"value\";\n\n    @DataPoint(\"generated\")\n    <b>public static</b> String generatedDataPoint() {\n      <b>return</b> \"generated value\";\n    }\n\n    @Theory\n    <b>public void</b> theoryMethod(String param) {\n      // ...\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "JUnit5Converter",
          "displayName": "JUnit 4 test can be JUnit 5",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the JUnit 4 tests that can be automatically migrated to JUnit 5.\nWhile default runners are automatically convertible, custom runners, method- and field- rules are not and require manual changes.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>import</b> org.junit.Assert;\n  <b>import</b> org.junit.Test;\n\n  <b>public class</b> RelevantTest {\n\n    @Test\n    <b>public void</b> testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>import</b> org.junit.jupiter.api.Assertions;\n  <b>import</b> org.junit.jupiter.api.Test;\n\n  <b>public class</b> RelevantTest {\n\n    @Test\n    <b>public void</b> testIt() {\n      Assertions.assertEquals(\"expected\", \"actual\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection requires that the JUnit 5 library is available in the classpath, and JDK 1.8 or later is configured for the project.</p>\n<!--<small>New in 2017.1</small>-->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteAssert",
          "displayName": "Usage of obsolete 'junit.framework.Assert' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to methods from the <code>junit.framework.Assert</code> class. This class is\nobsolete and the calls can be replaced by calls to methods from the <code>org.junit.Assert</code> class.\n<p>For example:</p>\n<pre><code>\n  <b>import</b> org.junit.*;\n  <b>public class</b> NecessaryTest {\n    @Test\n    <b>public void</b> testIt() {\n      junit.framework.Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n</code></pre>\n<p>After the quick fix is applied, the result looks like the following:</p>\n<pre><code>\n  <b>import</b> org.junit;\n  <b>public class</b> NecessaryTest {\n\n    <b>public void</b> testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5AssertionsConverter",
          "displayName": "Obsolete assertions in JUnit 5 tests",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any calls to methods from the <code>junit.framework.Assert</code>, <code>org.junit.Assert</code>, or <code>org.junit.Assume</code>\n  classes inside JUnit 5 tests.</p>\n<p>Although the tests work properly, migration to <code>org.junit.jupiter.api.Assertions</code>/<code>org.junit.jupiter.api.Assumptions</code>\n  will help you avoid dependencies on old JUnit version.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  import org.junit.Assert;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      // old Assert class is used\n      Assert.assertEquals(4, 2 + 2);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  import org.junit.jupiter.api.Assertions;\n  import org.junit.jupiter.api.Test;\n\n  public class MyTest {\n    @Test\n    public void simpleTest() {\n      Assertions.assertEquals(4, 2 + 2);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IgnoredJUnitTest",
          "displayName": "JUnit test annotated with '@Ignore'/'@Disabled'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of JUnit 4's <code>@Ignore</code> or JUnit 5's <code>@Disabled</code> annotations.\nThe tests annotated with these annotations for a long time, especially without a specified reason, are a code smell.\n<p><b>Example:</b></p>\n<pre><code>\n  @Ignore\n  <b>public class</b> UrgentTest {\n\n    @Test\n    <b>public void</b> testIt() {\n      Assert.assertEquals(\"expected\", \"actual\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n    Use the <b>Only report annotations without reason</b> option to only report the cases when no reason is specified as the annotation's\n    <code>value</code> attribute.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsMayBeAssertSame",
          "displayName": "'assertEquals()' may be 'assertSame()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the calls of the JUnit's <code>assertEquals()</code> method that\ncan be replaced with the equivalent <code>assertSame()</code> method.\nThis is possible when the arguments are instances of a final class that does not override\nthe <code>Object.equals()</code> method and makes it explicit that the object identity is compared.\n<p>Suggests replacing <code>assertEquals()</code> with </p> <code>assertSame()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Test\n  <b>public void</b> testObjectType() {\n    Object o = getObject();\n    Assert.assertEquals(String.<b>class</b>, o.getClass());\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  @Test\n  <b>public void</b> testSort() {\n    Object o = getObject();\n    Assert.assertSame(String.<b>class</b>, o.getClass());\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedNestedClass",
          "displayName": "JUnit 5 malformed '@Nested' class",
          "defaultSeverity": "WARNING",
          "pluginId": "JUnit",
          "pluginVersion": "212.4746.2",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports static inner classes annotated with <code>@Nested</code>.</p>\n<p>The <code>@Nested</code> annotation cannot be used on static classes.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TestMethodWithoutAssertion",
          "displayName": "JUnit test method without any assertions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the test methods that do not contain any assertions. Such methods may indicate either incomplete or weak test cases.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> ExtensiveTest {\n\n    @Test\n    <b>public void</b> testAlive() {\n      System.out.println(\"nothing\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n      Use the table to specify the combinations of fully qualified class name and method name regular expression\n      that should qualify as assertions. Class names also match subclasses.\n  </li>\n  <li>\n      Use the <b>'assert' keyword is considered an assertion</b> option to specify if the Java <code>assert</code> statements using the <code>assert</code> keyword should be considered an assertion.\n  </li>\n  <li>\n      Use the <b>Ignore test methods which declare exceptions</b> option to ignore the test methods that declare exceptions.\n      This can be useful when you have tests that will throw an exception on failure and thus don't need any assertions.\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertEqualsCalledOnArray",
          "displayName": "'assertEquals()' called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the calls of the JUnit <code>assertEquals()</code> methods that take arguments of the array type.\nSuch methods compare the arrays' identities instead of the arrays' contents.\n<p>Suggests using one of the <code>assertArrayEquals()</code> methods to compare the arrays' contents.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Test\n  <b>public void</b> testSort() {\n    <b>int</b>[] actual = {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertEquals(<b>new int</b>[] {0, 56, 248, 496}, actual);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Test\n  <b>public void</b> testSort() {\n    <b>int</b>[] actual = {248, 496, 0, 56};\n    Arrays.sort(actual);\n    Assert.assertArrayEquals(<b>new int</b>[] {0, 56, 248, 496}, actual);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticSuite",
          "displayName": "'suite()' method not declared 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports JUnit test case classes with <code>suite()</code> methods which aren't declared as <code>static</code>.<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BeforeClassOrAfterClassIsPublicStaticVoidNoArg",
          "displayName": "Malformed @BeforeClass/@BeforeAll or @AfterClass/@AfterAll method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit 4.0 <code>@BeforeClass</code> or <code>@AfterClass</code> methods\n  that are not declared <code>public</code> and <code>static</code>,\n  do not return <code>void</code>, or take arguments.</p>\n<p>Such methods are easy to create inadvertently, but they will not be executed by JUnit tests runners.</p>\n<p><b>Example:</b></p>\n<pre>\n<code>\n  public class MainTest {\n    @BeforeClass\n    String beforeClass(int i) {\n    }\n  }\n</code>\n</pre>\n<p>After the quick-fix is applied, the method changes to:</p>\n<pre><code>\n  class MainTest {\n    @BeforeClass\n    public static void beforeClass() {\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TestCaseWithConstructor",
          "displayName": "JUnit TestCase with non-trivial constructors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test cases with initialization logic in their constructors.\nIf a constructor fails, the <code>@After</code> annotated or <code>tearDown()</code> method won't be called.\nThis can leave the test environment partially initialized, which can adversely affect other tests.\nInstead, initialization of JUnit test cases should be done in a <code>setUp()</code> or <code>@Before</code> annotated method.\n<p>Bad example:</p>\n<pre><code>\n  <b>public class</b> ImportantTest {\n    <b>private</b> File file;\n    <b>public</b> ImportantTest() <b>throws</b> IOException {\n      file = File.createTempFile(\"xyz\", \".tmp\");\n    }\n\n    // ... tests go here\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnconstructableTestCase",
          "displayName": "Unconstructable JUnit TestCase",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit test cases that are not <code>abstract</code> and do not\n  expose a public <code>no-arg</code> constructor or a public constructor that takes a single string\n  as an argument. </p>\n<p>Such test cases cannot be run by most JUnit test runners.</p>\n<p><b>Example:</b></p>\n<pre><code>\npublic class MyTest {\n\n  private MyTest() {} // no-arg constructor is private\n\n  @Test\n  public void testSomething() {\n    assertEquals(1, 1);\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Junit4Converter",
          "displayName": "JUnit 3 test can be JUnit 4",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit 3 test classes that can be converted to JUnit 4 test classes.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class MainTestCase extends junit.framework.TestCase {\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n<code>\n  public class MainTestCase {\n    @org.junit.Test\n    public void test() {\n      Assert.assertTrue(true);\n    }\n  }\n</code>\n</pre>\n<!-- tooltip end -->\n<p>This inspection reports if the language level of the project or module is 5 or higher and JUnit 4 available on the classpath.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JUnit5MalformedRepeated",
          "displayName": "JUnit 5 malformed repeated test",
          "defaultSeverity": "WARNING",
          "pluginId": "JUnit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the following problems with JUnit 5 <code>@RepeatedTest</code>:</p>\n<ul>\n  <li><code>@Test</code> and <code>@RepeatedTest</code> are used on the same method. Even though it is allowed to use them, they have no additional\n    effect together.</li>\n  <li><code>RepetitionInfo</code> parameter is used in the <code>@BeforeAll</code> and <code>@AfterAll</code> methods. The parameter is\n    not injected in these methods.</li>\n  <li><code>RepetitionInfo</code> parameter is used in the <code>@BeforeEach</code> and <code>@AfterEach</code> methods in classes\n    with <code>@Test</code>  methods. In this case, the parameter won't be injected in <code>@Test</code> methods.</li>\n</ul>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ParameterizedParametersStaticCollection",
          "displayName": "Parameterized test class without data provider method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the JUnit 4 <a href=\"https://github.com/junit-team/junit4/wiki/parameterized-tests\">parameterized test</a> classes that are annotated\nwith <code>@RunWith(Parameterized.class)</code> but either do not include a data provider method annotated with <code>@Parameterized.Parameters</code> or\nthis method has an incorrect signature. Such test classes cannot be run.\nThe data provider method should be <code>public</code> and <code>static</code> and have a return type of <code>Iterable</code> or\n<code>Object[]</code>.\n<p>Suggests creating an empty parameter provider method.</p>\n\n<p><b>Example:</b><p>\n<pre><code>\n  @RunWith(Parameterized.class)\n  <b>public class</b> ImportantTest {\n    <b>private int</b> input;\n    <b>private int</b> expected;\n\n    ImportantTest(<b>int</b> input, <b>int</b> expected) {\n      <b>this</b>.input = input;\n      <b>this</b>.expected = expected;\n    }\n\n    // ... test cases\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @RunWith(Parameterized.class)\n  <b>public class</b> ImportantTest {\n    <b>private int</b> input;\n    <b>private int</b> expected;\n\n    ImportantTest(<b>int</b> input, <b>int</b> expected) {\n      <b>this</b>.input = input;\n      <b>this</b>.expected = expected;\n    }\n\n    @Parameters\n    <b>public static</b> Iterable&lt;Object[]> parameters() {\n      <b>return null</b>;\n    }\n\n    // ... test cases\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleExceptionsDeclaredOnTestMethod",
          "displayName": "Multiple exceptions declared on test method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit test method <code>throws</code> clauses with more than one exception.\nSuch clauses are unnecessarily verbose.\nTest methods will not be called from other project code, so there is no need to handle these exceptions separately.\n<p>For example:</p>\n<pre><code>\n  @Test\n  <b>public void</b> testReflection() <b>throws</b> NoSuchMethodException,\n      InvocationTargetException, IllegalAccessException {\n    String result = (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }\n</code></pre>\n<p>A quick fix is provided to replace the exception declarations with a single exception:</p>\n<pre><code>\n  @Test\n  <b>public void</b> testReflection() <b>throws</b> Exception {\n    String result = (String) String.class.getMethod(\"trim\")\n        .invoke(\" hello \");\n    assertEquals(\"hello\", result);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BeforeOrAfterIsPublicVoidNoArg",
          "displayName": "Malformed @Before or @After method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports JUnit 4 <code>@Before</code> or <code>@After</code> methods that are not declared <code>public</code>, do not return\n  <code>void</code>, or take arguments. Such methods are easy to create inadvertently, but they will not be executed by JUnit tests runners.</p>\n<p>The inspection provides fixes for method signatures.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Before private int foo(int arg) { ... }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Before public void foo() { ... }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "MalformedSetUpTearDown",
          "displayName": "Malformed 'setUp()' or 'tearDown()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JUnit 3 <code>setUp()</code> or <code>tearDown()</code> methods that either are not declared\n<code>public</code>, do not return <code>void</code>, or take arguments.\nSuch <code>setUp()</code> or <code>tearDown()</code> methods are most likely created unintentionally,\nand will not be executed by JUnit test runners.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> WeightyTest <b>extends</b> TestCase {\n    <b>private</b> File file;\n    <b>private int</b> setUp(String prefix) <b>throws</b> IOException {\n      file = File.createTempFile(prefix, \".tmp\");\n      <b>return</b> 0;\n    }\n\n    // ... tests go here\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Concurrency annotation issues",
      "inspections": [
        {
          "shortName": "NonFinalGuard",
          "displayName": "Non-final @GuardedBy field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>@GuardedBy</code> annotations in which the guarding field\nis not <code>final</code>.\n<p>Guarding on a non-final field may result in unexpected race conditions, as locks will\n  be held on the value of the field (which may change), rather than the field itself.</p>\n<p>Example:</p>\n<pre><code>\n    private ReadWriteLock lock = new ReentrantReadWriteLock(); //not final guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state = new Object();\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceGuardedByStatic",
          "displayName": "Instance member guarded by static field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>@GuardedBy</code> annotations on instance fields or methods\nin which the guard is a <code>static</code> field. Guarding a non-static by a static may result in excessive lock contention,\nas access to each locked field in any object instance will prevent simultaneous access to that field in every object instance.\n<p>Example:</p>\n<pre><code>\n    private static ReadWriteLock lock = new ReentrantReadWriteLock(); //static guarding field\n    private Object state;\n\n    @GuardedBy(\"lock\")\n    public void bar() {\n        state = new Object();\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "StaticGuardedByInstance",
          "displayName": "Static member guarded by instance field or this",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>@GuardedBy</code> annotations on <code>static</code> fields or methods in which the guard is either a non-static field or\n<code>this</code>.\n<p>Guarding a static element with a non-static element may result in\n  excessive concurrency, multiple threads may be able to access the guarded field simultaneously by locking in different object contexts.</p>\n<p>Example:</p>\n<pre><code>\n    private ReadWriteLock lock = new ReentrantReadWriteLock();\n\n    @GuardedBy(\"lock\")\n    public static void bar() {\n        // ...\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessNotGuarded",
          "displayName": "Unguarded field access or method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of fields declared as <code>@GuardedBy</code> that are not guarded by an appropriate synchronization structure.\n<p>Example:</p>\n<pre><code>\n    @GuardedBy(\"this\")\n    void x() {\n        notify();\n    }\n    void y() {\n        x(); // unguarded method call\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldInImmutable",
          "displayName": "Non-final field in @Immutable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any non-final field in a class with the <code>@Immutable</code> annotation.\nThis violates the contract of the <code>@Immutable</code> annotation.\n<p>Example:</p>\n<pre><code>\n  import javax.annotation.concurrent.Immutable;\n  @Immutable\n  class Foo {\n    String bar = \"foo\";\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnknownGuard",
          "displayName": "Unknown @GuardedBy field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>@GuardedBy</code> annotations in which the specified guarding field is unknown.\n<p>Example:</p>\n<pre><code>\n    private Object state;\n\n    @GuardedBy(\"lock\") //unknown guard reference\n    public void bar() {\n        state = new Object();\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Supported <code>@GuardedBy</code> annotations are:</p>\n<ul>\n  <li><code>net.jcip.annotations.GuardedBy</code></li>\n  <li><code>javax.annotation.concurrent.GuardedBy</code></li>\n  <li><code>org.apache.http.annotation.GuardedBy</code></li>\n  <li><code>com.android.annotations.concurrency.GuardedBy</code></li>\n  <li><code>androidx.annotation.GuardedBy</code></li>\n  <li><code>com.google.errorprone.annotations.concurrent.GuardedBy</code></li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Packaging issues",
      "inspections": [
        {
          "shortName": "EmptyDirectory",
          "displayName": "Empty directory",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports an empty directory.\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n<p>Use the <b>Only report empty directories located under a source folder</b> option to have only directories under the source\n  roots reported.<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassUnconnectedToPackage",
          "displayName": "Class independent of its package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that doesn't depend on any other class in its package and is not a dependency for any other class in its package.\n<p>Such classes indicate ad-hoc or incoherent packaging strategies and often may be profitably moved.\n  <!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageInMultipleModules",
          "displayName": "Package with classes in multiple modules",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a non-empty package that is present in several modules.\n<p>Suppose, your project has modules <code>first</code> and <code>second</code> that both have the same package <code>foo</code>.\n  These modules cannot be used together because of a package conflict.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooManyClasses",
          "displayName": "Package with too many classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a package that contains too many classes.\n<p>Overly large packages may indicate a lack of design clarity.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n<p>Use the <b>Maximum number of classes</b> field to specify the maximum allowed number of classes in a package.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DisjointPackage",
          "displayName": "Package with disjoint dependency graph",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a package whose classes can be separated into mutually independent subsets.\n<p>Such disjoint packages indicate ad-hoc packaging or a lack of conceptual cohesion.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassOnlyUsedInOnePackage",
          "displayName": "Class only used from one other package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that doesn't depend on any other class in its package, depends on classes from another package, and itself is a dependency\nonly for classes from this other package.\n<p>Consider moving such a class to the package on which it depends.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageWithTooFewClasses",
          "displayName": "Package with too few classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a package that contains fewer classes than the specified minimum.\n<p>Overly small packages may indicate fragmented design.</p>\n<!-- tooltip end -->\n<p>Available only from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n<p>Use the <b>Minimum number of classes</b> field to specify the minimum allowed number of classes in a package.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionPackage",
          "displayName": "Exception package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports a package only with classes that extend <code>java.lang.Throwable</code>, either directly or indirectly.\n  <p>Although exceptions usually don't depend on other classes for their implementation, they are normally not used separately.\n    It is often a better design to locate exceptions in the same package as the classes that use them.</p>\n  <!-- tooltip end -->\n  <p>Available only from <b>Analyze | Inspect Code</b> or\n    <b>Analyze | Run Inspection by Name</b> and isn't reported in the editor.</p>\n  <!--<p><small>New in 2017.3</small>-->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "CSS",
      "inspections": [
        {
          "shortName": "CssConvertColorToRgbInspection",
          "displayName": "Color could be replaced with rgb()",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an <code>hsl()</code> or <code>hwb()</code> color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent <code>rgb()</code> or <code>rgba()</code> color function.\n<!-- tooltip end -->\n<br/><br/>\nExample:<br>\n<code>#0c0fff</code> → <code>rgb(12, 15, 255)</code>.\n</body>\n</html>"
        },
        {
          "shortName": "CssConvertColorToHexInspection",
          "displayName": "Color could be replaced with #-hex",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an <code>rgb()</code>, <code>hsl()</code>, or other color function. Suggests replacing a color function with an equivalent hexadecimal notation.\n<!-- tooltip end -->\n<br/><br/>\nExample:<br>\n<code>rgb(12, 15, 255)</code> → <code>#0c0fff</code>.\n</body>\n</html>"
        },
        {
          "shortName": "CssReplaceWithShorthandSafely",
          "displayName": "Properties may be safely replaced with a shorthand",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n<!-- tooltip end -->\n<br/><br/>\nFor example, 4 properties: <code>padding-top</code>, <code>padding-right</code>, <code>padding-bottom</code>, and <code>padding-left</code>\nmay be safely replaced with a single <code>padding</code> property.\n<br/><br/>\nNote that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 <code>padding-xxx</code> properties in a ruleset)\nbecause switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.\n</body>\n</html>"
        },
        {
          "shortName": "CssBrowserCompatibilityForProperties",
          "displayName": "Property is incompatible with selected browsers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a CSS property that is not supported by the specified browsers.\nBased on the <a href=\"https://github.com/mdn/browser-compat-data\">MDN Compatibility Data</a>.\n</body>\n</html>"
        },
        {
          "shortName": "CssOverwrittenProperties",
          "displayName": "Overwritten property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a duplicated CSS property within a ruleset. Respects shorthand properties.\n<!-- tooltip end -->\n<p>Example:</p>\n<code>\n.foo {<br/>\n&nbsp;&nbsp;margin-bottom: 1px;<br/>\n&nbsp;&nbsp;margin-bottom: 1px; /* duplicates margin-bottom */<br/>\n&nbsp;&nbsp;margin: 0;          /* overrides margin-bottom */<br/>\n}<br/>\n</code>\n</body>\n</html>"
        },
        {
          "shortName": "CssUnusedSymbol",
          "displayName": "Unused selector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n<!-- tooltip end -->\n<br/><br/>\nNote that complete inspection results are available only when running it via 'Analyze | Inspect Code...' or 'Analyze | Run Inspection by Name...'.\nDue to performance reasons, style sheet files are not inspected on the fly.\n</body>\n</html>"
        },
        {
          "shortName": "CssReplaceWithShorthandUnsafely",
          "displayName": "Properties may probably be replaced with a shorthand",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a set of longhand CSS properties. Suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n<!-- tooltip end -->\n<br/><br/>\nFor example, 2 properties: <code>outline-color</code> and <code>outline-style</code> may be replaced with a single <code>outline</code> one.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the <code>outline</code> shorthand means that <code>outline-width</code> is also set to its initial value, which is <code>medium</code>.\n<br/><br/>\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XSLT",
      "inspections": [
        {
          "shortName": "XsltTemplateInvocation",
          "displayName": "Incorrect template invocation",
          "defaultSeverity": "ERROR",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports one of the following problems in an invocation of a named XSLT template: a  missing argument, passing\n  an argument that is not declared by the template, or passing an argument for a certain parameter more than once .\n</p>\n\n<p>\nParameters declared with a default value are optional and therefore ignored.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "XsltUnusedDeclaration",
          "displayName": "Unused variable or parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports a local variable parameter that id never used.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "XsltVariableShadowing",
          "displayName": "Shadowed variable",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports a shadowed XSLT variable.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "XsltDeclarations",
          "displayName": "Incorrect declaration",
          "defaultSeverity": "ERROR",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\nReports a discrepancy in the declaration of an XSLT variable, parameter, or named template:\n</p>\n<ul>\n  <li>Duplicate declarations</li>\n  <li>Illegal identifiers</li>\n</ul>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code style",
      "inspections": [
        {
          "shortName": "PhpDocMissingThrowsInspection",
          "displayName": "Missing @throws tag(s)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Checks that the PHPDoc block contains the <code>@throws</code> tag for each exception thrown by a function/method.\n  <!-- tooltip end -->\n  <p>The exception classes added to the <b>Unchecked Exceptions</b> list under <b>Settings/Preferences | PHP | Analysis</b> are excluded from the inspection scope.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingDocCommentInspection",
          "displayName": "Missing PHPDoc comment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the elements without a PHPDoc comment or with a PHPDoc comment only containing the <code>@noinspection</code> tag.\n  <!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDocSignatureIsNotCompleteInspection",
          "displayName": "PHPDoc comment signature is not complete",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the PHPDoc comments that contain at least one <code>@param</code> or <code>@return</code> tag but are missing some of the <code>@param</code> or <code>@return</code> tags for parameters or return types specified in the function/method declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNonCanonicalElementsOrderInspection",
          "displayName": "Non-canonical order of elements",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the PHPDoc tags that have elements listed in non-canonical order.\n  <p>For example, for such tags as <code>@property</code>, <code>@param</code>, or <code>@var</code>, the inspection will report the usages of <code>[name] [\"Type\"]</code> instead of <code>[\"Type\"] [name]</code>.\n  </p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Imports",
      "inspections": [
        {
          "shortName": "SingleClassImport",
          "displayName": "Single class import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>import</code> statements that cover single classes (as opposed to entire packages).\n<p>Some coding standards prohibit such <code>import</code> statements.</p>\n<p>\n  You can configure IntelliJ IDEA to detect and fix such statements with its <b>Optimize Imports</b> command. Go to\n  <a href=\"settings://preferences.sourceCode.Java?Use%20single%20class%20import\">Settings | Editor | Code Style | Java | Imports</a>\n  and clear the <b>Use single class import</b> checkbox. Thus this inspection is mostly useful for\n  offline reporting on code bases that you don't intend to change.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UNUSED_IMPORT",
          "displayName": "Unused import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>import</code> statements.\n<p>Regular <code>import</code> statements are unnecessary when not using imported classes and packages in the source file.\nThe same applies to imported <code>static</code> fields and methods that aren't used in the source file.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  import java.util.ArrayList;\n  public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }\n</code></pre>\n<p>After the quick fix is applied:\n<pre><code>\n  public class Example {\n    public static void main(String[] args) {\n      System.out.println(\"Hello World!\");\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "StaticImport",
          "displayName": "Static import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>import static</code> statements.\n<p>Such <code>import</code> statements are not supported under Java 1.4 or earlier JVMs.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the table below to specify the classes that will be ignored by the inspection when used in an <code>import static</code>\n    statement.</li>\n  <li>Use the <b>Ignore single field static imports</b> checkbox to ignore single-field <code>import static</code> statements.</li>\n  <li>Use the <b>Ignore single method static imports</b> checkbox to ignore single-method <code>import static</code> statements.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "OnDemandImport",
          "displayName": "'*' import",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any <code>import</code> statements that cover entire packages ('* imports').\n<p>Some coding standards prohibit such <code>import</code> statements.</p>\n<p>\n  You can configure IntelliJ IDEA to detect and fix such statements with its <b>Optimize Imports</b>\n  command. Go to <a href=\"settings://preferences.sourceCode.Java?Use%20single%20class%20import\">Settings | Editor | Code Style | Java | Imports</a>,\n  make sure that the <b>Use single class import</b> option is enabled, and specify values in the\n  <b>Class count to use import with '*'</b> and <b>Names count to use static import with '*'</b> fields.\n  Thus this inspection is mostly useful for offline reporting on code bases that you don't\n  intend to change.\n</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangImport",
          "displayName": "Unnecessary import from the 'java.lang' package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>import</code> statements that refer to the <code>java.lang</code> package.\n<p>\n  <code>java.lang</code> classes are always implicitly imported, so such import statements are\n  redundant and confusing.\n</p>\n<p>\n  Since IntelliJ IDEA can automatically detect and fix such statements with its <b>Optimize Imports</b> command, this inspection is mostly useful for offline reporting on code bases that you don't intend to change.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SamePackageImport",
          "displayName": "Unnecessary import from the same package",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>import</code> statements that refer to the same package as the\ncontaining file.\n<p>\n  Same-package files are always implicitly imported, so such <code>import</code>\n  statements are redundant and confusing.\n</p>\n<p>\n  Since IntelliJ IDEA can automatically detect and fix such statements with its <b>Optimize Imports</b>\n  command, this inspection is mostly useful for offline reporting on code bases that you\n  don't intend to change.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Initialization",
      "inspections": [
        {
          "shortName": "DoubleBraceInitialization",
          "displayName": "Double brace initialization",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <a href=\"https://www.c2.com/cgi/wiki?DoubleBraceInitialization\">Double Brace Initialization</a>.\n<p>Double brace initialization may cause memory leaks when used in a non-static context because it creates an anonymous class\n  that will reference the surrounding object.</p>\n<p>Compared to regular initialization, double brace initialization provides worse performance since it requires loading an\n  additional class.</p>\n<p>It may also cause failure of <code>equals()</code> comparisons if the <code>equals()</code> method doesn't accept subclasses as\n  parameters.</p>\n<p>In addition, before Java 9, double brace initialization couldn't be combined with the diamond operator since it was incompatible\n  with anonymous classes.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  List&lt;Integer&gt; list = new ArrayList&lt;&gt;() {{\n    add(1);\n    add(2);\n  }};\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n  list.add(1);\n  list.add(2);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InstanceVariableInitialization",
          "displayName": "Instance field may not be initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables that may be uninitialized upon object initialization.\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n    public int bar;\n\n    static { }\n  }\n</code></pre>\n<p>Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\n  reported as initialized will always be initialized.</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore primitive fields</b> option to ignore uninitialized primitive fields.</p>\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableUninitializedUse",
          "displayName": "Static field used before initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> variables that are read before initialization.\n<p>The inspection ignores equality checks with <code>null</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n    public static int bar;\n\n    public static void main(String[] args) {\n      System.out.println(bar);\n    }\n  }\n</code></pre>\n<p>Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report <code>static</code> variables as uninitialized. Variables\n  reported as initialized will always be initialized.</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore primitive fields</b> option to ignore uninitialized primitive fields.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "OverridableMethodCallDuringObjectConstruction",
          "displayName": "Overridable method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to overridable methods of the current class during object construction.\n<p>A method is called during object construction if it is inside a:\n<ul>\n  <li>Constructor</li>\n  <li>Non-static instance initializer</li>\n  <li>Non-static field initializer</li>\n  <li><code>clone()</code> method</li>\n  <li><code>readObject()</code> method</li>\n  <li><code>readObjectNoData()</code> method</li>\n<p>Methods are overridable if they are not declared as <code>final</code>, <code>static</code>, or <code>private</code>.\n  Package-local methods are considered safe, even though they are overridable. Such calls may result in subtle bugs,\n  as object initialization may happen before the method call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n  <p>This inspection shares the functionality with the following inspections:</p>\n<ul>\n  <li>Abstract method called during object construction</li>\n  <li>Overridden method called during object construction</li>\n</ul>\n  <p>Only one inspection should be enabled at once to prevent warning duplication.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ThisEscapedInConstructor",
          "displayName": "'this' reference escaped in object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports possible escapes of <code>this</code> during the object initialization. The escapes occur when <code>this</code> is used as a method argument\nor an object of assignment in a constructor or initializer. Such escapes may result in subtle bugs, as the object is now available in the\ncontext where it is not guaranteed to be initialized.\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    {\n      System.out.println(this);\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "InstanceVariableUninitializedUse",
          "displayName": "Instance field used before initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables that are read before initialization.\n<p>The inspection ignores equality checks with <code>null</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n    int bar;\n\n    Foo() {\n      System.out.println(bar);\n    }\n  }\n</code></pre>\n<p>Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report instance variables as uninitialized. Variables\n  reported as initialized will always be initialized.\n<!-- tooltip end -->\n<p>Use the <b>Ignore if annotated by</b> option to specify special annotations. The inspection will ignore fields\n  annotated with one of these annotations.</p>\n<p>Use the <b>Ignore primitive fields</b> option to ignore uninitialized primitive fields.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "AbstractMethodCallInConstructor",
          "displayName": "Abstract method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>abstract</code> methods of the current class during object construction.\n<p>A method is called during object construction if it is inside a:\n<ul>\n  <li>Constructor</li>\n  <li>Non-static instance initializer</li>\n  <li>Non-static field initializer</li>\n  <li><code>clone()</code> method</li>\n  <li><code>readObject()</code> method</li>\n  <li><code>readObjectNoData()</code> method</li>\n</ul>\n<p>Such calls may result in subtle bugs, as object initialization may happen before the method call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Parent {\n    abstract void abstractMethod();\n  }\n\n  class Child extends Parent {\n    Child() {\n      abstractMethod();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection shares the functionality with the following inspections:</p>\n<ul>\n  <li>Overridable method called during object construction</li>\n  <li>Overridden method called during object construction</li>\n</ul>\n<p>Only one inspection should be enabled at once to prevent warning duplication.</p>\n</body>\n</html>"
        },
        {
          "shortName": "OverriddenMethodCallDuringObjectConstruction",
          "displayName": "Overridden method called during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any calls to overridden methods of the current class during object construction.\nA call is during object construction if it is inside:\n<ul>\n  <li>A Constructor</li>\n  <li>A Non-static instance initializer</li>\n  <li>A Non-static field initializer</li>\n  <li><code>clone()</code></li>\n  <li><code>readObject()</code></li>\n  <li><code>readObjectNoData()</code></li>\n</ul>\nSuch calls may result in subtle bugs, as the object is not guaranteed to be initialized before the method call occurs.\n<p>Example:</p>\n<pre>\n  abstract class Parent {\n    void someMethod() { }\n  }\n\n  class Child extends Parent {\n    Child() {\n      someMethod();\n    }\n\n    @Override\n    void someMethod() { }\n  }\n</pre>\n<!-- tooltip end -->\nThis inspection shares functionality with:\n<ul>\n  <li>Abstract method called during object construction inspection</li>\n  <li>Overridable method called during object construction inspection</li>\n</ul>\nOnly one inspection should be enabled at the same time to prevent duplicate warnings.\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalStaticVariableUsedInClassInitialization",
          "displayName": "Non-final static field is used during class initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the use of non-<code>final</code> <code>static</code> variables during class initialization.\n<p>In such cases, the code semantics may become dependent on the class creation order. Additionally, such cases may lead to the use of\n  variables before their initialization, and generally cause difficult and confusing bugs.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n    public static int bar = 0;\n\n    static {\n      System.out.println(bar);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StaticVariableInitialization",
          "displayName": "Static field may not be initialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> variables that may be uninitialized upon class initialization.\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n    public static int bar;\n\n    static { }\n  }\n</code></pre>\n<p>Note that this inspection uses a very conservative dataflow algorithm and may incorrectly report <code>static</code> variables as uninitialized. Variables\n  reported as initialized will always be initialized.</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore primitive fields</b> option to ignore uninitialized primitive fields.</p>\n</body>\n</html>"
        },
        {
          "shortName": "NonThreadSafeLazyInitialization",
          "displayName": "Unsafe lazy initialization of 'static' field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> variables that are lazily initialized in a non-thread-safe manner.\n<p>Lazy initialization of <code>static</code> variables should be done with an appropriate synchronization construct\n  to prevent different threads from performing conflicting initialization.</p>\n<p>When applicable, a quick-fix, which introduces the\n<a href=\"https://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom\">lazy initialization holder class idiom</a>, is suggested.\n  This idiom makes use of the fact that the JVM guarantees that a class will not be initialized until it is used.\n<p><b>Example:</b></p>\n<pre><code>\n  class X {\n    private static List&lt;String&gt; list;\n\n    public List&lt;String&gt; getList() {\n      if (list == null) {\n        list = List.of(\"one\", \"two\", \"tree\");\n      }\n      return list;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class X {\n    private static final class ListHolder {\n      static final List&lt;String&gt; list = List.of(\"one\", \"two\", \"tree\");\n    }\n\n    public List&lt;String&gt; getList() {\n      return ListHolder.list;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Redundant definitions",
      "inspections": [
        {
          "shortName": "RedundantSlf4jDefinition",
          "displayName": "@Slf4j",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases in which Slf4j Logger is defined explicitly instead of using the @Slf4j annotation.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Gradle",
      "inspections": [
        {
          "shortName": "GradleKotlinxCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Gradle",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>kotlinx.coroutines</b> libraries dependencies in Gradle that should be updated in order\nto be compatible with Kotlin 1.3+.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java language level issues",
      "inspections": [
        {
          "shortName": "ForeachStatement",
          "displayName": "Enhanced 'for' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the enhanced <code>for</code> statements.\nSuch <code>for</code> statements are not supported under Java 1.4 and older.\n<p>Example:</p>\n<pre>\n  for (int x: Arrays.asList(1, 2, 3)) {\n    System.out.println(x);\n  }\n</pre>\n<p>After the quick-fix is applied, the result looks like this: </p>\n<pre>\n  for (Iterator&lt;Integer&gt; iterator = Arrays.asList(1, 2, 3).iterator(); iterator.hasNext(); ) {\n    final int x = iterator.next();\n    System.out.println(x);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AnnotationClass",
          "displayName": "Annotation class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports annotation interfaces.\nSuch interfaces are not supported in Java 1.4 and earlier JVM.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "Annotation",
          "displayName": "Annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports annotations.\nAnnotations are not supported in Java 1.4 and earlier JVM.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "VarargParameter",
          "displayName": "Varargs method",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods that accept an arbitrary number of parameters (also known as varargs methods).\n<p>Such methods are not supported under Java 1.4 or earlier JVMs.</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre><code>\n  enum EnumConstants {\n  A(null), B, C;\n\n  EnumConstants(String... ss) {}\n}\n</code></pre>\n<p>A quick-fix is available to replace a variable argument\n  parameter with an equivalent array parameter. Relevant arguments in method calls are wrapped in an array initializer expression.\n  After the quick-fix is applied:</p>\n<pre><code>\n  enum EnumConstants {\n  A(null), B(new String[]{}), C(new String[]{});\n\n  EnumConstants(String[] ss) {}\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "EnumClass",
          "displayName": "Enumerated class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>enum</b> classes.\nSuch statements are not supported in Java 1.4 and earlier JVM.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertStatement",
          "displayName": "'assert' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>assert</code> statements. By default, <code>assert</code> statements are disabled during execution in the production\nenvironment. Consider using logger or exceptions instead.\n<p>The <code>assert</code> statements are not supported in Java 1.3 and earlier JVM.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ForwardCompatibility",
          "displayName": "Forward compatibility",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Java code constructs that may fail to compile in future Java versions.\n<p>The following problems are reported:</p>\n<ul>\n  <li>Use of <code>assert</code>>, <code>enum</code> or </code>_</code> as an identifier</li>\n  <li>Use of the <code>var</code>, <code>yield</code>, or <code>record</code> restricted identifier as a type name</li>\n  <li>Unqualified calls to the <code>yield</code> method</li>\n  <li>Modifiers on the <code>requires java.base</code> statement inside of <code>module-info.java</code></li>\n</ul>\n<p><b>Example:</b></p>\n<pre><code>\n  // Since Java 14, this class will stop compiling, as 'yield' becomes a restricted identifier.\n  public class yield {} \n</code></pre>\n<p>Fixing these issues timely may simplify migration to future Java versions.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UnusedMessageFormatParameter",
          "displayName": "Missing message format parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties values\nthat look like <code>java.text.MessageFormat</code> format strings\nbut do not use some the parameters of the <code>{xx}</code> kind.\n<p>Example:</p>\n<pre><code>\n# parameter {0} is not used\n<b>error.message</b>=Something happened in line <b>{1}</b>\n  </code></pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "AlphaUnsortedPropertiesFile",
          "displayName": "Properties file or resource bundle is alphabetically unsorted",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports alphabetically unsorted resource bundles or .properties files.\n</body>\n</html>"
        },
        {
          "shortName": "TrailingSpacesInProperty",
          "displayName": "Trailing spaces in property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all properties whose keys or values end with a whitespace. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "InconsistentResourceBundle",
          "displayName": "Inconsistent resource bundle",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems in the properties files contained in the resource bundle.\n<ul>\n  <li><b>Report missing translation</b>\n  </li>\n</ul>\noption controls search for an untranslated properties. <br>\nIt reports properties contained in parent properties file that are missing in inherited (unless it's a language dialect). <br>\nE.g. having this resource bundle: <br>\n\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : empty <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as untranslated.\n<ul>\n  <li>\n\n    <b>Report inconsistent properties</b>\n  </li>\n</ul>\noption controls invalid resource bundle structure inspection. <br>\nIt reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent). <br>\nE.g. having this resource bundle: <br>\n<b>messages.properties</b> : empty <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> translation here is not available for any language except French,\nand, thus, will be reported as missing in the (default) properties file <b>messages.properties</b> .\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with the same value</b>\n  </li>\n</ul>\noption checks for properties which are copy-pasted into several properties files verbatim. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n<b>messages_fr.properties</b> : <font color=\"#000080\"><b>abc=xxx</b></font> <br>\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as unnecessarily inherited in the file <b>messages_fr.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different placeholders</b>\n  </li>\n</ul>\noption checks for properties which are overridden for placeholder consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy{1}</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>qwe={0}xxx{0}xxx{1}</b></font> <br>\n<font color=\"#000080\"><b>abc={0}yyy</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains message format placeholders\nwith value not corresponding to <b>messages.properties</b> .\n<br>\n\n<ul>\n  <li>\n\n    <b>Report properties overridden with different values endings</b>\n  </li>\n</ul>\noption checks for properties which are overridden for ending consistency. <br>\nE.g. in this resource bundle: <br>\n<b>messages.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxxzzz</b></font> <br>\n<b>messages_fr.properties</b> : <br>\n<font color=\"#000080\"><b>abc=xxx;</b></font> <br>\n\n\nProperty <font color=\"#000080\"><b>abc</b></font> will be reported as property contains special signs\n( <b>'!'</b> , <b>'?'</b> , <b>'.'</b> , <b>':'</b> or <b>';'</b> ) at the end of value but\nvalue in <b>messages.properties</b> doesn't.\n<br>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedProperty",
          "displayName": "Unused property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all properties that are not referenced from the outside of the .properties file.\n</body>\n</html>\n"
        },
        {
          "shortName": "UseEllipsisInPropertyInspection",
          "displayName": "Three dot characters instead of the ellipsis",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports three \"dot\" characters which are used instead of the ellipsis character. <br>\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicatePropertyInspection",
          "displayName": "Duplicate property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports duplicate property keys with different values, duplicate keys, or duplicate property values.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\nproperty1=<b><font color=\"#000080\">value</font></b>;\nproperty2=<b><font color=\"#000080\">value</font></b>;\n</code></pre>\n<p>The <b>Options</b> list allows selecting the area in which the inspection should search for duplicates.</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousLocalesLanguages",
          "displayName": "Suspicious resource bundle locale languages",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports locales with language codes that are not supported by Java.\n</body>\n</html>"
        },
        {
          "shortName": "WrongPropertyKeyValueDelimiter",
          "displayName": "Property key/value delimiter doesn't match code style settings",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.properties",
          "pluginVersion": "212.4746.2",
          "language": "Properties",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties in which key or value delimiters do not match code style settings.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Class",
      "inspections": [
        {
          "shortName": "NonExceptionNameEndsWithException",
          "displayName": "Non-exception class name ends with 'Exception'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>exception</code> classes whose names end with '<code>Exception</code>'.\nSuch classes may cause confusion by breaking a common naming convention, and\nare often the sign that developer forgot <code>extends Exception</code> clause.\n<p><b>Example:</b>\n  <pre><code>public class NotStartedException {}</code></pre>\n<p>Quick-fix to rename the class is suggested only in the editor..</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NewClassNamingConvention",
          "displayName": "Class naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p><b>Example:</b> if the inspection is enabled for tests, and the specified length for the minimum class name is 8 (the default), the following test class\n   produces a warning because the length of its name is 6, which is less than 8: <code>public class MyTest{}</code>.\n<p>A quick-fix that renames such classes is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the list in the <b>Options</b> section to specify which classes should be checked. Deselect the checkboxes for the classes for which\n  you want to skip the check.</p>\n<p>For each class type, specify the minimum length, maximum length, and the regular expression expected for class names using the\n  provided input fields. Specify <b>0</b> in the length fields to skip corresponding checks.</p>\n<p>Regular expressions should be specified in the standard <code>java.util.regex</code> format.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassNamePrefixedWithPackageName",
          "displayName": "Class name prefixed with package name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes whose names are prefixed with their package names, ignoring differences in\ncapitalization.\n<p>While occasionally having such names is reasonable, they are often used due to a poor naming scheme, may be redundant and\n  annoying.</p>\n<p><b>Example:</b>\n  <pre><code>\n  package byteCode;\n  class ByteCodeAnalyzer {}\n</code></pre>\n<p>A quick-fix that renames such classes is available only in the editor.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionNameDoesntEndWithException",
          "displayName": "Exception class name does not end with 'Exception'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports exception classes whose names don't end with <code>Exception</code>.\n<p><b>Example:</b> <code>class NotStartedEx extends Exception {}</code>\n<p>A quick-fix that renames such classes is available only in the editor.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "ClassNameSameAsAncestorName",
          "displayName": "Class name same as ancestor name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that have the same name as one of their superclasses, while their fully qualified names remain different.\nSuch class names may be very confusing.\n<p><b>Example:</b></p>\n  <pre><code>\n  package util;\n  abstract class Iterable&lt;T&gt; implements java.lang.Iterable&lt;T&gt; {}\n</code></pre>\n<p>A quick-fix that renames such classes is available only in the editor.</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 7",
      "inspections": [
        {
          "shortName": "TryFinallyCanBeTryWithResources",
          "displayName": "'try finally' replaceable with 'try' with resources",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>try</code>-<code>finally</code> statements that can use Java 7 Automatic Resource Management,\nwhich is less error-prone.\n<p>A quick-fix is available to convert a <code>try</code>-<code>finally</code>\n  statement into a <code>try</code>-with-resources statement.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  PrintStream printStream = new PrintStream(fileName);\n  try {\n    printStream.print(true);\n  } finally {\n    printStream.close();\n  }\n</code></pre>\n<p>A quick-fix is provided to pass the cause to a constructor:</p>\n<pre>\n  try (PrintStream printStream = new PrintStream(fileName)) {\n    printStream.print(true);\n  }\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is seven or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "Convert2Diamond",
          "displayName": "Explicit type can be replaced with <>",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all <code>new</code> expressions with type arguments that can be replaced a with diamond type <code>&lt;&gt;</code>.\n<p>Example:</p>\n<pre><code>\n  List&lt;String&gt; list = new ArrayList&lt;String&gt;(); // reports array list type argument\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  List&lt;String&gt; list = new ArrayList&lt;&gt;();\n</code></pre>\n<p>The <code>&lt;&gt;</code> syntax isn't supported in Java 1.6 and earlier JVMs.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "TryWithIdenticalCatches",
          "displayName": "Identical 'catch' branches in 'try' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports identical <code>catch</code> sections in a single <code>try</code> statement.\n<p>Collapsing such sections into one <i>multi-catch</i> block reduces code duplication and prevents\n  the situations when one <code>catch</code> section is updated, and another one is not.</p>\n<p><b>Example:</b></p>\n<pre><code>\n    try {\n        doSmth();\n    }\n    catch (IOException e) {\n        LOG.error(e);\n    }\n    catch (URISyntaxException e) {\n        LOG.error(e);\n    }\n</code></pre>\n<p>A quick-fix is available to make the code more compact:</p>\n<pre><code>\n    try {\n        doSmth();\n    }\n    catch (IOException | URISyntaxException e) {\n        LOG.error(e);\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is seven or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SafeVarargsDetector",
          "displayName": "Possible heap pollution from parameterized vararg type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all methods with variable arity, which can be annotated as <code>@SafeVarargs</code>.\nThe <code>@SafeVarargs</code> annotation suppresses unchecked warnings about parameterized array creation at call sites.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Foo&lt;T&gt; {\n    private List&lt;T&gt; list = new ArrayList&lt;&gt;();\n\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public class Foo&lt;T&gt; {\n    private List&lt;T&gt; list = new ArrayList&lt;&gt;();\n\n    @SafeVarargs\n    public final void safeVarargs(T... elements) {\n      Collections.addAll(list, elements);\n    }\n  }\n</code></pre>\n<p>\n  This annotation is not supported under Java 1.6 or earlier JVMs.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EqualsReplaceableByObjectsCall",
          "displayName": "'equals()' expression replaceable by 'Objects.equals()' expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions that can be replaced with a call to <code>java.util.Objects#equals</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  void f(Object a, Object b) {\n    boolean result = a != null && a.equals(b);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f(Object a, Object b) {\n    boolean result = Objects.equals(a, b);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Replacing expressions like <code>a != null && a.equals(b)</code> with <code>Objects.equals(a, b)</code>\n  slightly changes the semantics. Use the <b>Highlight expressions like 'a != null && a.equals(b)'</b> option to enable or disable this behavior.\n</p>\n<p>This inspection only reports if the language level of the project or module is seven or higher.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "GroovyEmptyCatchBlock",
          "displayName": "Empty 'catch' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <code>catch</code> blocks. While occasionally intended,\nempty <code>catch</code> blocks can make debugging extremely difficult.\n<p><b>Example:</b></p>\n<pre>\n<code>\ntry {\n  throw new Exception()\n}\ncatch (Exception e) {\n}\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\ntry {\n  throw new Exception()\n}\ncatch (Exception ignored) {\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUnusedCatchParameter",
          "displayName": "Unused 'catch' parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>catch</b> parameters that are unused in their\ncorresponding blocks. This inspection will not report any <b>catch</b> parameters\nnamed \"ignore\" or \"ignored\".\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n      def arr = new int[3]\n      arr[5] = 5\n  } catch(Exception <b>ex</b>) {\n      println('Catching the exception')\n  }\n</code></pre>\n<p>Here the parameter <b>ex</b> is never used in <b>catch</b> block.\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try {\n      def arr = new int[3]\n      arr[5] = 5\n  } catch(Exception <b>ignored</b>) {\n      println('Catching the exception')\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' from 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>break</code> and <code>continue</code> statements inside of <code>finally</code> blocks.\n<p>While occasionally intended, such statements are very confusing, may mask thrown exceptions, and tremendously complicate debugging.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>throw</code> statements inside of <code>finally</code> blocks.\n<p>\n  While occasionally intended, such <code>throw</code> statements may mask exceptions thrown, and\n  tremendously complicate debugging.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyTryBlock",
          "displayName": "Empty 'try' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <code>try</code> blocks.\nEmpty <code>try</code> blocks usually indicate coding errors.\n<p><b>Example:</b></p>\n<pre>\n<code>\ntry {\n}\nfinally {\n  close()\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>return</code> statements inside of <code>finally</code> blocks.\n<p>\n  While occasionally intended, such <code>return</code> statements may mask exceptions thrown, and\n  complicate debugging.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports empty <code>finally</code> blocks.\nEmpty <code>finally</code> blocks usually indicate coding errors.\n<p><b>Example:</b></p>\n<pre>\n<code>\ntry {\n  throw new Exception()\n}\nfinally {\n}\n</code>\n</pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Plugin descriptor",
      "inspections": [
        {
          "shortName": "PluginXmlCapitalization",
          "displayName": "Plugin.xml text capitalization",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports text capitalization problems in <code>plugin.xml</code>.\n<p>\n  The following elements are checked:\n<ul>\n  <li><code>&lt;name></code></li>\n  <li><code>&lt;action>, &lt;group></code></li>\n  <li><code>&lt;separator, &lt;synonym>, &lt;override-text></code></li>\n  <li>extension point properties annotated with <code>org.jetbrains.annotations.Nls</code> specifying required <code>capitalization</code></li>\n</ul>\n<p>\n  Please see <a href=\"https://jetbrains.design/intellij/text/capitalization/\">Capitalization</a> in IntelliJ Platform UI Guidelines for more\n  information.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlI18n",
          "displayName": "Plugin.xml i18n verification",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports hardcoded texts in <code>plugin.xml</code>.\n<p>\n  Using texts defined in resource bundles allows supporting multiple languages in the IDE.\n</p>\n<p>\n  The following elements are checked:\n<ul>\n  <li><code>&lt;action>, &lt;group></code></li>\n  <li><code>&lt;separator, &lt;override-text></code></li>\n  <li>known extension points having <code>bundle/key</code> alternative</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlValidity",
          "displayName": "Plugin.xml validity",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems in <code>plugin.xml</code>.\n<p>\n  Invalid configuration can lead to problems at runtime.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "InspectionMappingConsistency",
          "displayName": "<inspection> tag consistency",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems for inspection extension point registration in <code>plugin.xml</code>.\n<p>\n  Inspection (group) name must be defined using respective attributes for proper presentation in IDE.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PluginXmlDynamicPlugin",
          "displayName": "Plugin.xml dynamic plugin verification",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports dynamic plugin problems.\n<p>\n  Dynamic plugins can be installed, updated and uninstalled without restarting the IDE (supported in 2020.1 and later).\n</p>\n<p>\n  Please see <a href=\"https://plugins.jetbrains.com/docs/intellij/dynamic-plugins.html?from=PluginXmlDynamicPlugin\">Dynamic Plugins</a> for further reference.\n</p>\n<p><small>New in 2020.1</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 11",
      "inspections": [
        {
          "shortName": "ReadWriteStringCanBeUsed",
          "displayName": "'Files.readString()' or 'Files.writeString()' can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code fragments that read or write a <code>String</code> as bytes using <code>java.nio.file.Files</code>.\n<p>These fragments can be replaced with calls to the <code>Files.readString()</code> and <code>Files.writeString()</code> methods introduced in Java 11.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  String s = \"example\";\n  Files.write(Paths.get(\"out.txt\"), s.getBytes(StandardCharsets.UTF_8), StandardOpenOption.WRITE);\n  s = new String(Files.readAllBytes(Paths.get(\"in.txt\")), StandardCharsets.ISO_8859_1);\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  String s = \"example\";\n  Files.writeString(Paths.get(\"out.txt\"), s, StandardOpenOption.WRITE);\n  s = Files.readString(Paths.get(\"in.txt\"), StandardCharsets.ISO_8859_1);\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringRepeatCanBeUsed",
          "displayName": "String.repeat() can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops that can be replaced with a single <code>String.repeat()</code> method (available since Java 11).\n<p><b>Example:</b></p>\n<pre><code>\n  void append(StringBuilder sb, int count, Object obj) {\n    for (int i = 0; i &lt; count; i++) {\n      sb.append(obj);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void append(StringBuilder sb, int count, Object obj) {\n    sb.append(String.valueOf(obj).repeat(Math.max(0, count)));\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  By default, the inspection may wrap <code>count</code> with <code>Math.max(0, count)</code> if it cannot prove statically that <code>count</code> is\n  not negative. This is done to prevent possible semantics change, as <code>String.repeat()</code> rejects negative numbers.\n  Use the <b>Add Math.max(0,count) to avoid possible semantics change</b> option to disable this behavior if required.</p>\n  <p>Similarly, a string you want to repeat can be wrapped in\n  <code>String.valueOf</code> to prevent possible <code>NullPointerException</code> if it's unknown whether it can be <code>null</code>.\n</p>\n<p>This inspection only reports if the language level of the project or module is 11 or higher.</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Django",
      "inspections": [
        {
          "shortName": "DjangoUnresolvedTemplateReferenceInspection",
          "displayName": "Unresolved template reference",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved file references in string literals of\n  <code>extends</code>> and <code>include</code>> Django tags.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% extends \"../DjangoApp/templatetags/base.html\"%}\n</pre>\n<p>In this example, the <code>base.html</code> tag is highlighted, because it is not available in the\n  specified location.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoBrokenLineCommentInspection",
          "displayName": "Broken line comment",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports <code>#}</code> line comment ends in Django templates that do not have a\n  matching line comment start.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ncomment #}\n</pre>\n<p>The IDE highlights <code>#}</code> as it requires the corresponding <code>{#</code> token.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoCloseTagInspection",
          "displayName": "Mismatched opening and closing tags",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when opening tags in Django templates are not correctly matched by closing tags.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% if error_message %}&lt;p&gt;&lt;strong&gt;{{ error_message }}&lt;/p&gt;{% endif %}\n</pre>\n<p>The IDE reports an error on the <code>strong</code> tag not being closed.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicatedBlockNamesInspection",
          "displayName": "Duplicated block names",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports duplicated block names in Django templates.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;title>{% block title %}My amazing site{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=\"sidebar\"&gt;\n        {% block title %}\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"/blog/\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n        {% endblock %}\n    &lt;/div&gt;\n\n    &lt;div id=\"content\"&gt;\n        {% block content %}{% endblock %}\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "EndBlockNamesInspection",
          "displayName": "Django endblock name doesn't match the block name",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports incorrect names of the closing blocks.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n  {% block my_block %}\n  {% endblock not_correct %}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUrlArgumentsInspection",
          "displayName": "Incorrect arguments in the ' {% url %}' tag",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports missing parameters in the template file if the <code>url()</code>\n  function has parameters in its URL path.</p>\n<p><b>Example:</b></p>\n<p>In the <code>url.py</code> file</p>\n<pre style=\"font-family: monospace\">\nurl(r'^(?P&lt;question_id&gt;[0-9]+)/', views.detail, name='detail')\n</pre>\n<p>In the template file</p>\n<pre style=\"font-family: monospace\">\n{% url 'polls:detail' %}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUnresolvedUrlInspection",
          "displayName": "Django {% url %} tag arguments are unresolved",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports a missing url in the <code>url</code> tag.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% url 'url_name' %}\n</pre>\n<p>The IDE shows a warning if <code>url_name</code> is not defined in the <code>urls</code> file.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoOrmInspection",
          "displayName": "Django ORM error",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports several methods that may not be called due to some ORM reasons.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Choice:\n    question = ForeignKey(Question, null=False)\n\n\nchoice_set = Question.objects.get(id=1).choice_set.remove()\n</pre>\n<p>The <code>remove</code> function can not be called if the foreign key has <code>null=False</code>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoRelationInspection",
          "displayName": "Incorrect relation expression in Django templates",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports missing whitespaces before and after comparison operators in Django templates.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% if my_var==1 %}\n{% endif %}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoIncompatibleInspection",
          "displayName": "Incompatible code in Django templates",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports features that are not available in the current Django version.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% if my_var is True %}\n{% endif %}\n</pre>\n<p>Available since 1.10. The IDE shows warning when discovered in the earlier versions.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUnresolvedStaticReferenceInspection",
          "displayName": "Unresolved static reference",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved references to static resources.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% load staticfiles %}\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" /&gt;\n</pre>\n<p>In this example, <code>style.css</code> is highlighted if there is no such a file in the <code>static/poll</code>\n  directory.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUnresolvedFilterInspection",
          "displayName": "Unresolved filter",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved filters in Django templates.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n  {{ my_value|cool_filter:\"arg\" }}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsTagPositionInspection",
          "displayName": "Misplaced {% extends %} tag",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the <code>{% extends %}</code> tag that is not the first tag in a\n  Django template.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n{% load my_custom_tags %}\n{% extends \"../DjangoApp/templatetags/my_custom_tags.py\"%}\n</pre>\n<p>In this example, the <code>{% extends %}</code> tag is highlighted, because it should be placed before\n  the <code>{% load %}</code> tag.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUnresolvedLoadInspection",
          "displayName": "Unresolved library inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved references in Django load tags.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n  {% load something_nonexistent %}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "DjangoUnresolvedTagInspection",
          "displayName": "Unresolved tag",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "DjangoTemplate",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports unresolved tags in Django templates.\n</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n&lt;h1&gt;{{ question.question_text }}&lt;/h1&gt;\n&lt;start&gt;\n</pre>\n<p>The IDE highlights <code>&lt;start&gt;</code>. You can either remove the tag or apply the quick-fix to\n  add <code>&lt;start&gt;</code> to custom HTML tags.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Lombok",
      "inspections": [
        {
          "shortName": "DeprecatedLombok",
          "displayName": "Deprecated Lombok annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated Lombok annotations and suggests quick-fixes to replace them with the ones promoted to the main package.\n</body>\n</html>\n"
        },
        {
          "shortName": "Lombok",
          "displayName": "Lombok annotations",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nOffers general inspections for Lombok annotations.\n</body>\n</html>\n"
        },
        {
          "shortName": "SpringQualifierCopyableLombok",
          "displayName": "@Qualifier not copyable by lombok",
          "defaultSeverity": "WARNING",
          "pluginId": "Lombook Plugin",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports definitions of Spring @Qualifier on class fields where corresponding Lombok <code>@RequiredArgsConstructor</code> or <code>@AllArgsConstructor</code>\ndoesn't copy it to the generated constructor because a of missing definition inside the lombok.config file with the <code>lombok.copyableAnnotations</code> key.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "PSR-12",
      "inspections": [
        {
          "shortName": "PhpMissingVisibilityInspection",
          "displayName": "Missing visibility",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the properties, constants, and methods that are declared without visibility definition.\n<!-- tooltip end -->\n<p>According to PSR-12, visibility MUST be defined on:</p>\n<ul>\n  <li>\n    All properties,\n  </li>\n  <li>\n    All constants if your project's PHP minimum version supports constant visibilities (PHP 7.1 or later),\n  </li>\n  <li>\n    All methods.\n  </li>\n</ul>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#43-properties-and-constants\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpModifierOrderInspection",
          "displayName": "Order of modifiers",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports visibility modifiers that are specified in the incorrect order.\n\n<p>According to PSR-12, the correct order is as follows:</p>\n\n<ul>\n  <li>When present, the <code>abstract</code> and <code>final</code> declarations MUST precede the visibility declaration.</li>\n\n  <li>When present, the <code>static</code> declaration MUST come after the visibility declaration.</li>\n</ul>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#46-abstract-final-and-static\">PSR-12: Extended Coding Style (php-fig.org)</a> for\n  details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpVarUsageInspection",
          "displayName": "Usage of var",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of the <code>var</code> keyword for declaring class properties.\n\n<p>According to PSR-12, the <code>var</code> keyword MUST NOT be used to declare a property.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#43-properties-and-constants\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpLongTypeFormInspection",
          "displayName": "Short form of type keywords",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of long form type keywords.\n<p>\n  According to PSR-12, short form of type keywords MUST be used, that is <code>bool</code> instead of <code>boolean</code>, <code>int</code> instead of <code>integer</code>, and so on.\n</p>\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#25-keywords-and-types\">Keywords and Types (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraitsUseListInspection",
          "displayName": "One-per-line trait uses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the cases of several traits being imported via a single <code>use</code> statement.\n\n<p>\n  According to PSR-12, each individual trait imported into a class MUST be included one-per-line, and each inclusion MUST have its own <code>use</code> import statement.\n</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#42-using-traits\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNewClassMissingParameterListInspection",
          "displayName": "Missing parameter list",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports missing parameter lists in a classes' instantiations.\n\n<p>According to the PSR-12 specification, when instantiating a new class, parentheses MUST always be present even when there are no arguments passed to the constructor.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#4-classes-properties-and-methods\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCompoundNamespaceDepthInspection",
          "displayName": "Compound namespace depth is more than 2",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of compound namespaces whose depth exceeds two levels.\n\n<p>According to PSR-12, compound namespaces with a depth of more than two MUST NOT be used.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#3-declare-statements-namespace-and-import-statements\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpSeparateElseIfInspection",
          "displayName": "Else if",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of the <code>else if</code> constructs specified in two words.\n\n<p>According to PSR-12, the keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-12/#51-if-elseif-else\">PSR-12: Extended Coding Style (php-fig.org)</a> for details.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Type compatibility",
      "inspections": [
        {
          "shortName": "PhpIllegalStringOffsetInspection",
          "displayName": "Illegal string offset",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of non-<code>integer</code> offsets in string access expressions such as <code>$str[42]</code>.\n<!-- tooltip end -->\n<p>\n  Starting from PHP 5.4, string offsets have to be either integers or integer-like strings.\n  Since it's considered bad practice to use strings as a string offset, the inspection reports them, as well.\n</p>\n<p>See <a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.substr\">String access and modification by character (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNullIsNotCompatibleWithParameterInspection",
          "displayName": "'null' is not compatible with parameter's declared type",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are initialised via passing them by reference to a parameter incompatible with <code>null</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArithmeticTypeCheckInspection",
          "displayName": "PHP 8 TypeError on arithmetic operations",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n\nReports arithmetic and bitwise expressions with unsupported operands.\n\n<p>\n  Starting with PHP 8, using the arithmetic and bitwise operators <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>**</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>>></code>, <code>&</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>++</code>, <code>--</code>\n  when one of the operands is an array, resource, or non-overloaded object will result in a <code>TypeError</code>. The only exception is the\n  <code>array + array</code> merge operation, which remains supported.\n</p>\n\n<p>\n  See <a href=\"https://github.com/php/php-src/blob/master/Zend/tests/operator_unsupported_types.phpt\">PHP's internal test source</a> for the complete list of operations.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingReturnTypeInspection",
          "displayName": "Missing return type declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the functions that have no return type declaration specified.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMissingFieldTypeInspection",
          "displayName": "Missing property's type declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the properties that have no type declaration.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpFieldAssignmentTypeMismatchInspection",
          "displayName": "Type mismatch in property assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports type violations in properties assignments.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpParamsInspection",
          "displayName": "Parameter type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters passed to a function call, whose types do not match the ones\nspecified in the function definition via type declaration or the PHPDoc <code>@param</code> tag.\n<!-- tooltip end -->\n\n<p>See <a href=\"http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration\">Type declarations (php.net)</a> and\n  <a href=\"http://docs.phpdoc.org/references/phpdoc/tags/param.html\">@param (phpdoc.org)</a> for details.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpWrongForeachArgumentTypeInspection",
          "displayName": "Invalid argument supplied for 'foreach()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> constructs used on variables of the <code>string</code>, <code>float</code>, <code>int</code>, or <code>boolean</code> type.\n\n<p>\n  See <a\n      href=\"http://www.php.net/manual/en/control-structures.foreach.php\">foreach (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIncompatibleReturnTypeInspection",
          "displayName": "Incompatible return type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>return</code> statements whose return value type is not compatible with the one declared for a function/method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParamTypeInspection",
          "displayName": "Missing parameter's type declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters that have no type declaration specified.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpRedundantTypeInUnionTypeInspection",
          "displayName": "Type declaration is redundant and could be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports union type declarations that contain redundant types, for example, a union type that contains both the class alias and the original class.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/union_types_v2#duplicate_and_redundant_types\">Union Types RFC: Duplicate and redundant types (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingStrictTypesDeclarationInspection",
          "displayName": "Missing strict types declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Detects the missing <code>declare(strict_types=1)</code> directive in the file.\n<!-- tooltip end -->\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict\">Strict typing (php.net)</a> to learn more about why you may need use this directive.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayAccessOnIllegalTypeInspection",
          "displayName": "Array offset access on illegal type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the array offset access expressions that are used on illegal types.\n</body>\n</html>"
        },
        {
          "shortName": "PhpStrictTypeCheckingInspection",
          "displayName": "Strict type checking rules violation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports violations of the strict type checking rules.\n<!-- tooltip end -->\n<p>\n  In strict mode, only the variables exactly matching the declaration types are accepted. Strict type-checking mode can be enabled:\n</p>\n<ul>\n  <li>Per file, if the <code>declare(strict_types=1)</code> directive is specified.\n    The directive must be the first statement in a file, block mode is explicitly disallowed.\n  </li>\n  <li>For all files, if the <b>Enable for all files</b> inspection option is enabled.</li>\n</ul>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.strict\">Strict typing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIllegalArrayKeyTypeInspection",
          "displayName": "Illegal array key type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the array keys that are of illegal type, such as objects or arrays.\n    <p>\n    See <a href=\"http://www.php.net/manual/en/language.types.array.php\">Arrays (php.net)</a> for details.\n  </p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "RELAX NG",
      "inspections": [
        {
          "shortName": "UnresolvedReference",
          "displayName": "Unresolved reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved reference to a named pattern (<code>define</code>) in RELAX-NG files that use XML syntax.\nSuggests creating the referenced <code>define</code> element.\n</body>\n</html>"
        },
        {
          "shortName": "UnusedDefine",
          "displayName": "Unused define",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an unused named pattern (<code>define</code>) in a RELAX-NG file (XML or Compact Syntax).\n<code>define</code> elements that are used through an include in another file are ignored.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "CssMissingComma",
          "displayName": "Missing comma in selector list",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n<!-- tooltip end -->\n<br/><br/>\nExample:<br/>\n<code>\ninput&nbsp;&nbsp;/* comma has probably been forgotten */<br/>\n.button {<br/>\n  &nbsp;&nbsp;margin: 1px;<br/>\n}\n</code>\n<br/><br/>\n</body>\n</html>"
        },
        {
          "shortName": "CssNoGenericFontName",
          "displayName": "Missing generic font family name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nVerifies that the <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/font-family\">font-family</a></code> property contains a generic font family name as a fallback alternative.\n<!-- tooltip end -->\nGeneric font family names are: <code>serif</code>, <code>sans-serif</code>, <code>cursive</code>, <code>fantasy</code>, and <code>monospace</code>.\n</body>\n</html>"
        },
        {
          "shortName": "CssNonIntegerLengthInPixels",
          "displayName": "Non-integer length in pixels",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a non-integer length in pixels.\n<!-- tooltip end -->\n<br/>\n<p>Example:</p>\n<code> width: 3.14px</code>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Reflective access",
      "inspections": [
        {
          "shortName": "JavaReflectionMemberAccess",
          "displayName": "Reflective access to nonexistent/not visible class member",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports reflective access to fields and methods that don't exist or aren't visible.\n<p>Example:</p>\n<pre><code>\n  Field stringHashField() throws NoSuchFieldException {\n    return String.class.getField(\"hash\");\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Field stringHashField() throws NoSuchFieldException {\n    return String.class.getDeclaredField(\"hash\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  With a <code>final</code> class, it's clear if there is a field or method with the specified name in the class.\n</p>\n<p>\n  With non-<code>final</code> classes, it's possible that a subclass has a field or method with that name, so there could be false positives.\n  Use the inspection's settings to get rid of such false positives everywhere or with specific classes.\n</p>\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "Java9ReflectionClassVisibility",
          "displayName": "Reflective access across modules issues",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>Class.forName()</code> and <code>ClassLoader.loadClass()</code> calls\nwhich try to access classes that aren't visible in the current scope due to Java 9 module accessibility rules.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 9 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaReflectionInvocation",
          "displayName": "Reflective invocation arguments mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases in which the arguments provided to <code>Method.invoke()</code> and <code>Constructor.newInstance()</code>\ndo not match the signature specified in <code>Class.getMethod()</code> and <code>Class.getConstructor()</code>.\n<p>Example:</p>\n<pre><code>\n  Method m = myObj.getClass().getMethod(\"myMethod\", <b>int</b>.class);\n  <i>// the argument should be an <b>int</b> value</i>\n  m.invoke(myObj, \"<b>abc</b>\");\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "JavaLangInvokeHandleSignature",
          "displayName": "MethodHandle/VarHandle type mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases in which the signature of a <code>MethodHandle</code> or the type of a <code>VarHandle</code> doesn't match the actual method or field.\n<p>It also checks that the arguments provided to the <code>MethodHandle.invoke()</code>, <code>VarHandle.set()</code>, and so on, match the method signature or field type, otherwise it will result in an exception.\n  <!-- tooltip end -->\n\n<p>Examples:</p>\n<pre>\n  MethodHandle mh = MethodHandles.lookup().findVirtual(\n      MyClass.class, \"foo\", MethodType.methodType(void.class, int.class));\n  <i>// the argument should be an <b>int</b> value</i>\n  mh.invoke(myObj, \"<b>abc</b>\");\n</pre>\n<br>\n<pre>\n  <i>// the argument should be <b>String</b>.class</i>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", <b>int</b>.class);\n</pre>\n<br>\n<pre>\n  VarHandle vh = MethodHandles.lookup().findVarHandle(\n      MyClass.class, \"text\", String.class);\n  <i>// the argument should be a <b>String</b> value</i>\n  vh.set(myObj, <b>42</b>);\n</pre>\n<p>\n  <small>New in 2017.2</small>\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "ReturnFromFinallyBlock",
          "displayName": "'return' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>return</code> statements inside of <code>finally</code> blocks.\n<p>While occasionally intended, such <code>return</code> statements may mask thrown exceptions\nand complicate debugging.</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    foo();\n  } finally {\n    if (bar()) return;\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "CaughtExceptionImmediatelyRethrown",
          "displayName": "Caught exception is immediately rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>catch</code> blocks that immediately rethrow\nthe caught exception without performing any action on it.\nSuch <code>catch</code> blocks are unnecessary and have no error\nhandling.\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre><code>\n        try {\n            new FileInputStream(\"\");\n        } catch (FileNotFoundException e) {\n            throw e;\n        }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "ExceptionFromCatchWhichDoesntWrap",
          "displayName": "'throw' inside 'catch' block which ignores the caught exception",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an exception that is constructed and thrown\nfrom  a <code>catch</code> block that does not \"wrap\" the caught\nexception.\n<p>When an exception is thrown in response to an exception, wrapping the initial exception prevents losing valuable context information,\n  such as stack frames and line numbers.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  ...\n  catch (IOException e) {\n    closeAllConnections();\n    throw new ConnectException(\"Connection problem.\"); // warning: 'throw' inside 'catch' block ignores the caught exception 'e'\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore if result of exception method call is used</b> option to indicate whether the inspection should ignore exceptions whose\n    argument is the result of a method\n    call on the original exception, such as <code>getMessage()</code>.</li>\n  <li>Use the <b>Ignore if thrown exception cannot wrap an exception</b> option to ignore <code>throw</code> statements that throw exceptions without a\n    constructor that accepts a <code>Throwable</code> cause.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowCaughtLocally",
          "displayName": "'throw' caught by containing 'try' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>throw</code> statement whose exceptions are always\ncaught by a containing <code>try</code> statement.\n<p>Using <code>throw</code>\n  statements as a \"goto\" to change the local flow of control is confusing and results in poor performance.\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    if (!Files.isDirectory(PROJECTS)) {\n        throw new IllegalStateException(\"Directory not found.\"); // warning: 'throw' caught by containing 'try' statement\n    }\n    ...\n  }\n  catch (Exception e) {\n      LOG.error(\"run failed\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore rethrown exceptions</b> option to ignore exceptions that are rethrown.</p>\n</body>\n</html>"
        },
        {
          "shortName": "UncheckedExceptionClass",
          "displayName": "Unchecked exception class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a subclass of <code>java.lang.RuntimeException</code>.\n<p>Some coding standards require that all user-defined exception classes are checked.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class EnigmaException extends RuntimeException {} // warning: Unchecked exception class 'EnigmaException'\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsThrowable",
          "displayName": "Class directly extends 'java.lang.Throwable'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that directly extends <code>java.lang.Throwable</code>.\n<p>Extending <code>java.lang.Throwable</code> directly is generally considered bad practice.\n  It is usually enough to extend <code>java.lang.RuntimeException</code>, <code>java.lang.Exception</code>, or - in special\n  cases - <code>java.lang.Error</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class EnigmaThrowable extends Throwable {} // warning: Class 'EnigmaThrowable' directly extends 'java.lang.Throwable'\n</code></pre>\n<!-- tooltip end -->\n<!--<p><small>New in 15</small><p>-->\n</body>\n</html>"
        },
        {
          "shortName": "EmptyTryBlock",
          "displayName": "Empty 'try' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty <code>try</code> blocks, including try-with-resources statements.\n<p><code>try</code> blocks with comments are considered empty.</p>\n<!-- tooltip end -->\n<p>\nThis inspection doesn't report empty <code>try</code> blocks found in JSP files.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CatchMayIgnoreException",
          "displayName": "Catch block may ignore exception",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>catch</code> blocks that are empty or may ignore an exception.\n<p>While occasionally intended, empty <code>catch</code> blocks may complicate debugging.\nAlso, ignoring a <code>catch</code> parameter might be wrong.\n  Finally, the static code analyzer reports if it detects that a <code>catch</code> block may silently ignore important VM\n  exceptions like <code>NullPointerException</code>. Ignoring such an exception\n(without logging or rethrowing it) may hide a bug.</p>\n\n<p>\n  The inspection won't report any <code>catch</code> parameters named <code>ignore</code> or <code>ignored</code>.\n  Conversely, the inspection will warn you about any <code>catch</code> parameters named <code>ignore</code> or <code>ignored</code> that are actually in use.\n  Additionally, the inspection won't report <code>catch</code> parameters inside test sources named <code>expected</code> or <code>ok</code>.\n</p>\n<p>\n  You can use a quick-fix to change the exception name to <code>ignored</code>.\n  For empty <b>catch</b> blocks, an additional quick-fix to generate the <b>catch</b> body is suggested.\n  You can modify the \"Catch Statement Body\" template on the Code tab in\n  <a href=\"settings://fileTemplates\">Settings | Editor | File and Code Templates</a>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    throwingMethod();\n  } catch (IOException ex) {\n\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try {\n    System.out.println(System.in.read());\n  } catch (IOException ignored) {\n\n  }\n</code></pre>\n  <!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the <b>Do not warn when 'catch' block contains a comment</b> option to ignore <code>catch</code> blocks with comments.\n  </li>\n  <li>\n    Use the <b>Do not warn when 'catch' block is not empty</b> option to ignore <code>catch</code> blocks that contain\n    statements or comments inside, while the variable itself is not used.\n  </li>\n  <li>\n    Use the <b>Do not warn when exception named 'ignore(d)' is not actually ignored</b> option to ignore\n    variables named <code>ignored</code> if they are in use.\n  </li>\n</ul>\n\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ContinueOrBreakFromFinallyBlock",
          "displayName": "'continue' or 'break' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>break</code> or <code>continue</code> statements inside of <code>finally</code> blocks.\n<p>While occasionally intended, such statements are very confusing, may mask thrown exceptions, and complicate debugging.</p>\n<p><b>Example:</b></p>\n<pre><code>\n    while (true) {\n        try {\n          throwingMethod();\n        } finally {\n            continue;\n        }\n    }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EmptyFinallyBlock",
          "displayName": "Empty 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty <code>finally</code> blocks.\n<p>Empty <code>finally</code> blocks usually indicate coding errors. They may also remain after code refactoring and can safely be removed.</p>\n<p>This inspection doesn't report empty <code>finally</code> blocks found in JSP files.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  } finally {\n\n  }\n</code></pre>\n<p>After the quick-fix is applied:\n<pre><code>\n  try {\n    Files.readString(Paths.get(\"in.txt\"));\n  } catch (IOException e) {\n    throw new RuntimeException(e);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDeathRethrown",
          "displayName": "'java.lang.ThreadDeath' not rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>try</code> statement that catches\n<code>java.lang.ThreadDeath</code> and does not rethrow the exception.\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    executeInParallel(request);\n  }\n  catch (ThreadDeath ex) { // warning: ThreadDeath 'ex' not rethrown\n    return false;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionDeclared",
          "displayName": "Prohibited exception declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that declares an inappropriate exception, such as\na <code>throws</code> clause that declares an overly generic exception (for example <code>java.lang.Exception</code> or <code>java.lang.Throwable</code>).\n<p><b>Example:</b></p>\n<pre><code>\n  void describeModule(String module) throws Exception {} // warning: Prohibited exception 'Exception' declared\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Prohibited exceptions</b> list to specify which exceptions should be reported.</li>\n  <li>Use the <b>Ignore exceptions declared on methods overriding a library method</b> option to ignore exceptions declared by methods\n    that override a library method.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "CheckedExceptionClass",
          "displayName": "Checked exception class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports checked exception classes (that is, subclasses of <code>java.lang.Exception</code> that are\nnot subclasses of <code>java.lang.RuntimeException</code>).\n<p>Some coding standards suppress checked user-defined exception classes.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class IllegalMoveException extends Exception {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ErrorRethrown",
          "displayName": "'java.lang.Error' not rethrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>try</code> statement that catches\n<code>java.lang.Error</code> or any of its subclasses and does not rethrow the error.\n<p>Statements that catch <code>java.lang.ThreadDeath</code> are not\n  reported.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    executeTests(request);\n  }\n  catch (OutOfMemoryError ex) { // warning: Error 'ex' not rethrown\n    return false;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadThrows",
          "displayName": "Overly broad 'throws' clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>throws</code> clause with an exception that is more generic than the\nexception that the method actually throws.\n<p><b>Example:</b></p>\n<pre><code>\n  public void createFile() throws Exception { // warning: 'throws Exception' is too broad, masking exception 'IOException'\n    File file = new File(\"pathToFile\");\n    file.createNewFile();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public void createFile() throws IOException {\n    File file = new File(\"pathToFile\");\n    file.createNewFile();\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Only warn on RuntimeException, Exception, Error or Throwable</b> option to have this inspection warn only on the most generic\n    exceptions.</li>\n  <li>Use the <b>Ignore exceptions declared on methods overriding a library method</b> option to ignore overly broad <code>throws</code> clauses\n    in methods that override a library method.</li>\n  <li>Use the <b>Ignore exceptions which hide others but are themselves thrown</b> option to ignore any exceptions that hide other exceptions\n    but still may be thrown from the method body and thus\n    are technically not overly broad.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NewExceptionWithoutArguments",
          "displayName": "Exception constructor called without arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports creation of a exception instance without any arguments specified.\n<p>When an exception is constructed without any arguments, it contains no information about the problem that occurred, which makes\n  debugging needlessly hard.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  throw new IOException(); // warning: exception without arguments\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadCatch",
          "displayName": "Overly broad 'catch' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>catch</code> block with parameters that are more generic than the\nexception thrown by the corresponding <code>try</code> block.\n<p><b>Example:</b></p>\n<pre><code>\n  try  {\n    File file = new File(pathToFile);\n    return file.getAbsolutePath();\n  }\n  catch (Exception ex) { // warning: 'catch' of 'Exception' is too broad, masking exceptions 'RuntimeException'\n    return defaultFilePath;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try  {\n    File file = new File(pathToFile);\n    return file.getAbsolutePath();\n  }\n  catch (RuntimeException ex) {\n    return defaultFilePath;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Only warn on RuntimeException, Exception, Error or Throwable</b> option to have this inspection warn only on the most generic exceptions.</li>\n  <li>Use the <b>Ignore exceptions which hide others but are themselves thrown</b> option to ignore any exceptions that hide other exceptions but\n    still may be thrown and thus are technically not overly broad.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionThrown",
          "displayName": "Prohibited exception thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>throw</code> statement\nthat throws an inappropriate exception, for example an overly generic one, such as\n<code>java.lang.Exception</code> or <code>java.io.IOException</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  void setup(Mode mode) {\n      if (mode == null)\n          throw new RuntimeException(\"Problem during setup\"); // warning: Prohibited exception 'RuntimeException' thrown\n      ...\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Prohibited exceptions</b> list to specify which exceptions should be reported.<p>\n</body>\n</html>"
        },
        {
          "shortName": "NullThrown",
          "displayName": "'null' thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>null</code> literal that is used as the argument of a <code>throw</code> statement.\n<p>Such constructs produce <code>java.lang.NullPointerException</code> that usually should not be thrown programmatically.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThrowFromFinallyBlock",
          "displayName": "'throw' inside 'finally' block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>throw</code> statements inside of <code>finally</code>\nblocks. While occasionally intended, such <code>throw</code> statements may mask exceptions thrown from <code>try</code>-<code>catch</code> and thus\ntremendously complicate debugging.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinallyBlockCannotCompleteNormally",
          "displayName": "'finally' block which can not complete normally",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>return</code>, <code>throw</code>, <code>break</code>, <code>continue</code>, and <code>yield</code> statements that are used inside <code>finally</code> blocks. These cause the <code>finally</code> block to not complete normally but to complete abruptly.\nAny exceptions thrown from the <code>try</code> and <code>catch</code> blocks of the same <code>try</code>-<code>catch</code> statement will be suppressed.\n<p><b>Example:</b></p>\n<pre><code>\n  void x() {\n    <b>try</b> {\n      throw new RuntimeException();\n    } <b>finally</b> {\n      // if bar() returns true, the RuntimeException will be suppressed\n      <b>if</b> (bar()) <b>return</b>;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldOfException",
          "displayName": "Non-final field of exception class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a field in a subclass of <code>java.lang.Exception</code> that is not declared\n<code>final</code>.\n<p>Data on exception objects should not be modified\n  because this may result in loosing the error context for later debugging and logging.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class EditorException extends Exception {\n    private String message; // warning: Non-final field 'message' of exception class\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NestedTryStatement",
          "displayName": "Nested 'try' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a nested <code>try</code> statement.\n<p>Nested <code>try</code> statements\n  may result in unclear code and should probably have their <code>catch</code> and <code>finally</code> sections\n  merged.\n  <!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThrowsRuntimeException",
          "displayName": "Unchecked exception declared in 'throws' clause",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declaration of an unchecked exception (<code>java.lang.RuntimeException</code> or one of its subclasses) in the <code>throws</code>\nclause of a method.\n<p>Declarations of unchecked exceptions are not required and may be deleted or moved to a Javadoc <code>@throws</code> tag.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class InvalidDataException extends RuntimeException {}\n\n  class TextEditor {\n    void readSettings() throws InvalidDataException {} // warning: Unchecked exception 'InvalidDataException' declared in 'throws' clause\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInitCause",
          "displayName": "Unnecessary call to 'Throwable.initCause()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Throwable.initCause()</code> where an exception constructor also takes a <code>Throwable cause</code> argument.\n<p>In this case, the <code>initCause()</code> call can be removed and its argument can be added to the call to the exception's constructor.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper = new RuntimeException(\"Error while processing\");\n    wrapper.initCause(ex); // Unnecessary call to 'Throwable.initCause()'\n    throw wrapper;\n  }\n</code></pre>\n<p>A quick-fix is available to pass the cause argument to the constructor. After the quick-fix is applied:</p>\n<pre><code>\n  try {\n      process();\n  }\n  catch (RuntimeException ex) {\n    RuntimeException wrapper = new RuntimeException(\"Error while processing\", ex);\n    throw wrapper;\n  }\n  </code></pre>\n<!-- tooltip end -->\n<small>New in 2016.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "BadExceptionCaught",
          "displayName": "Prohibited exception caught",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>catch</code> clause\nthat catches an inappropriate exception.\n<p>Some exceptions, for example\n  <code>java.lang.NullPointerException</code> or\n  <code>java.lang.IllegalMonitorStateException</code>, represent programming errors\n  and therefore almost certainly should not be caught in production code.\n<p><b>Example:</b></p>\n<pre><code>\n  try {\n    return component.getMousePosition(true) != null;\n  }\n  catch (NullPointerException e) { // warning: Prohibited exception 'NullPointerException' caught\n    return false;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Prohibited exceptions</b> list to specify which exceptions should be reported.<p>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofCatchParameter",
          "displayName": "'instanceof' on 'catch' parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports cases in which an <code>instanceof</code> expression is used for testing the type of a parameter in a <code>catch</code> block.\n<p>Testing the type of <code>catch</code> parameters is usually better done by having separate\n  <code>catch</code> blocks instead of using <code>instanceof</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(Runnable runnable) {\n    try {\n        runnable.run();\n    } catch (Throwable throwable) {\n        if (throwable instanceof NoClassDefFoundError) { // warning: 'instanceof' on 'catch' parameter 'throwable'\n            System.out.println(\"Class not found!\");\n        }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Migration",
      "inspections": [
        {
          "shortName": "ObsoleteExperimentalCoroutines",
          "displayName": "Experimental coroutines usages are deprecated since 1.3",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that uses experimental coroutines.\n<p>Such usages are incompatible with Kotlin 1.3+ and should be updated.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ProhibitTypeParametersForLocalVariablesMigration",
          "displayName": "Local variable with type parameters",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports local variables with type parameters.</p>\n<p>A type parameter for a local variable doesn't make sense because it can't be specialized.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      val &lt;T&gt; x = \"\"\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      val x = \"\"\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ProhibitJvmOverloadsOnConstructorsOfAnnotationClassesMigration",
          "displayName": "'@JvmOverloads' annotation cannot be used on constructors of annotation classes since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports <code>@JvmOverloads</code> on constructors of annotation classes because it's meaningless.</p>\n<p>\n    There is no footprint of <code>@JvmOverloads</code> in the generated bytecode and Kotlin metadata,\n    so <code>@JvmOverloads</code> doesn't affect the generated bytecode and the code behavior.\n</p>\n<p><code>@JvmOverloads</code> on constructors of annotation classes causes a compilation error since Kotlin 1.4.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  annotation class A <b>@JvmOverloads</b> constructor(val x: Int = 1)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  annotation class A constructor(val x: Int = 1)\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLabelMigration",
          "displayName": "Redundant label",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports redundant labels which cause compilation errors since Kotlin 1.4.</p>\n<p>Since Kotlin 1.0, one can mark any statement with a label:</p>\n<pre><code>\n  fun foo() {\n    L1@ val x = L2@bar()\n  }\n</code></pre>\nHowever, these labels can be referenced only in a limited number of ways:\n<ul>\n    <li>break / continue from a loop</li>\n    <li>non-local return from an inline lambda or inline anonymous function</li>sssss\n</ul>\n<p>Such labels are prohibited since Kotlin 1.4.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinDeprecation",
          "displayName": "Usage of redundant or deprecated syntax or deprecated symbols",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection is used during the code cleanup operation (<b>Analyze | Code Cleanup</b>) to automatically\nreplace usages of obsolete language features or unnecessarily verbose code constructs with\ncompact and up-to-date syntax.\n<p>\nDeprecated symbol usages are also replaced with their proposed substitutions.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ObsoleteKotlinJsPackages",
          "displayName": "'kotlin.browser' and 'kotlin.dom' packages are deprecated since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>kotlin.dom</code> and <code>kotlin.browser</code> packages.\n<p>These packages were moved to <code>kotlinx.dom</code> and <code>kotlinx.browser</code>\n    respectively in Kotlin 1.4+.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FromClosedRangeMigration",
          "displayName": "MIN_VALUE step in fromClosedRange() since 1.3",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <i>IntProgression.fromClosedRange()</i> and <i>LongProgression.fromClosedRange()</i> with\n<i>MIN_VALUE</i> step.\n<p>\nSince Kotlin 1.3 it's prohibited to call <i>IntProgression.fromClosedRange()</i> and <i>LongProgression.fromClosedRange()</i> with\n<i>MIN_VALUE</i> step. All such calls should be checked during migration to Kotlin 1.3+.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RestrictReturnStatementTargetMigration",
          "displayName": "Target label does not denote a function since 1.4",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports labels that don't points to a functions.\n<p>It's forbidden to declare a target label that does not denote a function.</p>\n<p>The quick-fix removes the label.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun testValLabelInReturn() {\n      L@ val fn = { return@L }\n      fn()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun testValLabelInReturn() {\n      L@ val fn = { return }\n      fn()\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 1.4 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ProhibitUseSiteTargetAnnotationsOnSuperTypesMigration",
          "displayName": "Meaningless annotations targets on superclass",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports meaningless annotation targets on superclasses since Kotlin 1.4.</p>\n<p>Annotation targets such as <code>@get:</code> are meaningless on superclasses and are prohibited.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  interface Foo\n\n  annotation class Ann\n\n  class E : @field:Ann @get:Ann @set:Ann @setparam:Ann Foo\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  interface Foo\n\n  annotation class Ann\n\n  class E : Foo\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "WarningOnMainUnusedParameterMigration",
          "displayName": "Unused `args` on `main` since 1.4",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>main</code> function with an unused single parameter.\n<p>Since Kotlin 1.4, it is possible to use the <code>main</code> function without parameter as the entry point to the Kotlin program.\nThe compiler reports a warning for the <code>main</code> function with an unused parameter.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ProhibitRepeatedUseSiteTargetAnnotationsMigration",
          "displayName": "Repeated annotation which is not marked as '@Repeatable'",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports the repeated use of a non-<code>@Repeatable</code> annotation without <code>SOURCE</code> retention on property accessors.</p>\n<p>As a result, both annotation usages will appeas in the bytecode leading to an ambiguity in reflection calls.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  annotation class Foo(val x: Int)\n\n  @get:<b>Foo</b>(10)\n  val a: String\n      @<b>Foo</b>(20) get() = \"foo\" // annotation repeated twice but not marked as @Repeatable\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language level of the project or module is 1.4 or higher.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Threading issues",
      "inspections": [
        {
          "shortName": "SynchronizationOnStaticField",
          "displayName": "Synchronization on 'static' field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on <code>static</code> fields. While not strictly incorrect,\nsynchronization on <code>static</code> fields can lead to bad performance because of contention.\n</body>\n</html>\n"
        },
        {
          "shortName": "WhileLoopSpinsOnField",
          "displayName": "'while' loop spins on field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>while</code> loops that spin on the\nvalue of a non-<code>volatile</code> field, waiting for it to be changed by another thread.\n<p>\nIn addition to being potentially extremely CPU intensive when little work is done inside the loop, such\nloops are likely to have different semantics from what was intended. The Java Memory Model allows such loop to never complete even\nif another thread changes the field's value.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class SpinsOnField {\n    boolean ready = false;\n\n    void run() {\n      while (!ready) { // the loop may never complete even after markAsReady call\n                       // from the other thread\n      }\n      // do some work\n    }\n\n    void markAsReady() {\n      ready = true;\n    }\n  }\n</pre>\n<p>\nAdditionally, since Java 9 it's recommended to call <code>Thread.onSpinWait()</code> inside a spin loop\non a <code>volatile</code> field, which may significantly improve performance on some hardware.\n</p>\n<!-- tooltip end -->\n<p>\nUse the inspection options to only report empty <code>while</code> loops.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AccessToStaticFieldLockedOnInstance",
          "displayName": "Access to static field locked on instance data",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports access to non-constant static fields that are\nlocked on either <code>this</code> or an instance field of <code>this</code>.\n<p>\n  Locking a static field on instance data does not prevent the field from being\n  modified by other instances, and thus may result in unexpected race conditions.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  static String test;\n  public void foo() {\n      synchronized (this) {\n          System.out.println(test); // warning\n      }\n  }\n</code></pre>\n<p>\n  There is a quick-fix that allows ignoring static fields of specific types.\n  You can manage those ignored types in the inspection options.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the inspection options to specify which classes used for static fields should be ignored.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsThread",
          "displayName": "Class directly extends 'java.lang.Thread'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that directly extend <code>java.lang.Thread</code>.\nIt is usually recommended to prefer composition over inheritance to create more reusable code that is easier to modify later.\n<p><b>Example:</b></p>\n<pre><code>\n  class MainThread extends Thread {\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonSynchronizedMethodOverridesSynchronizedMethod",
          "displayName": "Unsynchronized method overrides synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>synchronized</code> methods overriding <code>synchronized</code> methods.\n<p>\n  The overridden method will not be automatically synchronized if the superclass method\n  is declared as <code>synchronized</code>. This may result in unexpected race conditions when using the subclass.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Super {\n    synchronized void process() {}\n  }\n  class Sub extends Super {\n    // Unsynchronized method 'process()' overrides synchronized method\n    void process() {}\n  }  \n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StaticInitializerReferencesSubClass",
          "displayName": "Static initializer references subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes that refer to their subclasses in static initializers or static fields.\n<p>Such references can cause JVM-level deadlocks in multithreaded environment, when one thread tries to load the superclass\n  and another thread tries to load the subclass at the same time.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Parent {\n    static final Child field = new Child();\n  }\n  class Child extends Parent { }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "NakedNotify",
          "displayName": "'notify()' or 'notifyAll()' without corresponding state change",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Object.notify()</code> or <code>Object.notifyAll()</code> being called without any detectable state change occurring.\n<p>\n  Normally, <code>Object.notify()</code> and <code>Object.notifyAll()</code> are used to inform other threads that a state change has\n  occurred. That state change should occur in a synchronized context that contains the <code>Object.notify()</code> or\n  <code>Object.notifyAll()</code> call, and prior to the call. While not having such a state change isn't necessarily incorrect, it is\n  certainly worth examining.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  synchronized (this) {\n    notify();\n  }\n  // no state change\n  synchronized (this) {\n    notify(); // this notify might be redundant\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnThis",
          "displayName": "Synchronization on 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports synchronization on <code>this</code> or <code>class</code> expressions.\nThe reported constructs include <code>synchronized</code> blocks and calls to <code>wait()</code>,\n<code>notify()</code> or <code>notifyAll()</code>.\n<p>There are several reasons synchronization on <code>this</code> or <code>class</code> expressions may be a bad idea:</p>\n<ol>\n  <li>\n    it makes synchronization a part of the external interface of the class,\n    which makes a future change to a different locking mechanism difficult,\n  </li>\n  <li>\n    it becomes hard to track just who is locking on a given object,\n  </li>\n  <li>\n    it makes a denial-of-service attack possible, either on purpose or it can happen easily by accident when subclassing.\n  </li>\n</ol>\n<p>As an alternative, consider synchronizing on a <code>private final</code> lock object, access to which can be completely controlled.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public void print() {\n    synchronized(this) { // warning: Lock operations on 'this' may have unforeseen side-effects\n      System.out.println(\"synchronized\");\n    }\n  }\n  </code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedOnLiteralObject",
          "displayName": "Synchronization on an object initialized with a literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>synchronized</code> blocks that lock on an object initialized with a literal.\n<p>\n  String literals are interned and <code>Character</code>, <code>Boolean</code> and <code>Number</code> literals can be allocated from a cache.\n  Because of this, it is possible that some other part of the system, which uses an object initialized with the same literal, is actually\n  holding a reference to the exact same object. This can create unexpected dead-lock situations, if the lock object was thought to be private.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Main {\n    final String mutex = \"Mutex\";\n    void method() {\n      synchronized (mutex) {\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <strong>Warn on all possible literals</strong> option to report any synchronization on\n  <code>String</code>, <code>Character</code>, <code>Boolean</code> and <code>Number</code> objects.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldAccessedSynchronizedAndUnsynchronized",
          "displayName": "Field accessed in both synchronized and unsynchronized contexts",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-final fields that are accessed in both <code>synchronized</code> and\nnon-<code>synchronized</code> contexts.\n<code>volatile</code> fields as well as accesses in constructors and initializers are ignored by this inspection.\n<p>\n  Such \"partially synchronized\" access is often the result of a coding oversight\n  and may lead to unexpectedly inconsistent data structures.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Program {\n    Console console; // warning: Field 'console' is accessed in both synchronized and unsynchronized contexts\n\n    public synchronized void execute() {\n      console.print(\"running\");\n    }\n\n    public void check() {\n      console.check();\n    }\n  }\n</code>\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the option to specify if simple getters and setters are counted as accesses too.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitWhileHoldingTwoLocks",
          "displayName": "'wait()' while holding two locks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>wait()</code> methods that may occur while the current thread is holding two locks.\n<p>\n  Since calling <code>wait()</code> only releases one lock on its target,\n  waiting with two locks held can easily lead to a deadlock.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  synchronized (lockA) {\n    synchronized (lockB) {\n      lockB.wait(); //warning\n      //thread A is stuck here holding lockA\n    }\n  }\n\n  synchronized (lockA) { //thread B can't enter the block and release thread A\n    lockB.notify();\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SystemRunFinalizersOnExit",
          "displayName": "Call to 'System.runFinalizersOnExit()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>System.runFinalizersOnExit()</code>.\n<p>\n  This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,\n  may result in data corruption, a deadlock, and may affect parts of the program far removed from its call point.\n  It is deprecated and was removed in JDK 11, and its use is strongly discouraged.\n</p>\n<p>This inspection only reports if the language level of the project or module is less than 11.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AtomicFieldUpdaterIssues",
          "displayName": "Inconsistent AtomicFieldUpdater declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports issues with <code>AtomicLongFieldUpdater</code>,\n<code>AtomicIntegerFieldUpdater</code>, or <code>AtomicReferenceFieldUpdater</code> fields (the <code>java.util.concurrent.atomic</code> package).\n<p>The reported issues are identical to the runtime problems that can happen with atomic field updaters:\n  specified field not found, specified field not accessible, specified field has a wrong type, and so on.</p>\n<p><b>Examples:</b></p>\n<ul>\n  <li><pre>\n  class A {\n    private static volatile int value = 0;\n    private static final AtomicIntegerFieldUpdater updater =\n    AtomicIntegerFieldUpdater.newUpdater((A.class), \"value\"); // warning: Field 'value' has 'static' modifier\n  }\n  </pre></li>\n  <li><pre>\n  class B {\n    private static final AtomicIntegerFieldUpdater updater =\n      AtomicIntegerFieldUpdater.newUpdater(B.class, \"value\"); // warning: No field named 'value' found in class 'B'\n  }\n  </pre></li>\n</ul>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnLocalVariableOrMethodParameter",
          "displayName": "Synchronization on local variable or method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronization on a local variable or parameter. \n<p>\n  It is very difficult to guarantee correct operation when such synchronization is used.\n  It may be possible to improve such code, for example, by controlling access using a synchronized wrapper class or by synchronizing on a\n  field.</p>\n<p><b>Example:</b></p>\n<pre>\n  void bar() {\n    final Object lock = new Object();\n    synchronized (lock) { }\n  }\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConditionSignal",
          "displayName": "Call to 'signal()' instead of 'signalAll()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.util.concurrent.locks.Condition.signal()</code>. While occasionally useful, in almost all cases\n<code>signalAll()</code> is a better and safer choice.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnconditionalWait",
          "displayName": "Unconditional 'wait()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>wait()</code> being called unconditionally within a synchronized context.\n<p>\n  Normally, <code>wait()</code> is used to block a thread until some condition is true. If\n  <code>wait()</code> is called unconditionally, it often indicates that the condition was\n  checked before a lock was acquired. In that case a data race may occur, with the condition\n  becoming true between the time it was checked and the time the lock was acquired.\n</p>\n<p>\n  While constructs found by this inspection are not necessarily incorrect, they are certainly worth examining.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Bar {\n      void foo() throws InterruptedException {\n          synchronized (this) {\n              wait(); // warning\n          }\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "VolatileArrayField",
          "displayName": "Volatile array field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports array fields that are declared <code>volatile</code>. Such declarations\nmay be confusing because accessing the array itself follows the rules for <code>volatile</code>\nfields, but accessing the array's contents does not.\n<p><b>Example:</b></p>\n<pre><code>\n  class Data {\n    private volatile int[] idx = new int[0];\n  }\n</code></pre>\n<p>\n  If such volatile access is needed for array contents, consider using\n  <code>java.util.concurrent.atomic</code> classes instead:\n</p>\n<pre><code>\n  class Data {\n    private final AtomicIntegerArray idx = new AtomicIntegerArray(new int[0]);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadRun",
          "displayName": "Call to 'Thread.run()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to <code>run()</code> on <code>java.lang.Thread</code> or any of its subclasses.</p>\n<p>\n  While occasionally intended, this is usually a mistake, because <code>run()</code> doesn't start a new thread.\n  To execute the code in a separate thread, <code>start()</code> should be used.</p>\n<p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "WaitWithoutCorrespondingNotify",
          "displayName": "'wait()' without corresponding 'notify()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Object.wait()</code>, for which no call to the corresponding <code>Object.notify()</code> or\n<code>Object.notifyAll()</code> can be found.\n<p>This inspection only reports calls with qualifiers referencing fields of the current class.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Foo {\n    public Object foo = new Object();\n\n    void bar() throws InterruptedException {\n      this.foo.wait();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadStopSuspendResume",
          "displayName": "Call to 'Thread.stop()', 'suspend()' or 'resume()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Thread.stop()</code>,\n<code>Thread.suspend()</code>, and <code>Thread.resume()</code>.\n<p>\n  These calls are inherently prone to data corruption and deadlocks, and their use is strongly discouraged.\n  It is better to use cooperative cancellation instead of <code>stop</code>, and\n  interruption instead of direct calls to <code>suspend</code> and <code>resume</code>.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadLocalNotStaticFinal",
          "displayName": "ThreadLocal field not declared static final",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields of type <code>java.lang.ThreadLocal</code> that are not declared <code>static final</code>.\n<p>\n  In the most common case, a <code>java.lang.ThreadLocal</code> instance associates state with a thread.\n  A non-static non-final <code>java.lang.ThreadLocal</code> field associates state with an instance-thread combination.\n  This is usually unnecessary and quite often is a bug that can cause memory leaks and incorrect behavior.\n</p>\n<p>\n  A quick-fix is suggested to make the field <code>static final</code>.\n<p>\n<p><b>Example:</b></p>\n<pre><code>\n  private ThreadLocal tl = ThreadLocal.withInitial(() -> Boolean.TRUE);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AwaitNotInLoop",
          "displayName": "'await()' not called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>java.util.concurrent.locks.Condition.await()</code> not being called inside a loop.\n<p>\n  <code>await()</code> and related methods are normally used to suspend a thread until some condition becomes true.\n  As the thread could have been woken up for a different reason,\n  the condition should be checked after the <code>await()</code> call returns.\n  A loop is a simple way to achieve this.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void acquire(Condition released) throws InterruptedException {\n    released.await();\n  }\n</code></pre>\n<p>Good code should look like this:</p>\n<pre><code>\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EmptySynchronizedStatement",
          "displayName": "Empty 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>synchronized</code> statements with empty bodies.\n<p>\n  Empty <code>synchronized</code> statements are sometimes used to wait for other threads to\n  release a particular resource. However, there is no guarantee that the same resource\n  won't be acquired again right after the empty <code>synchronized</code> statement finishes.\n  For proper synchronization, the resource should be utilized inside the <code>synchronized</code> block.\n</p>\n<p>\n  Also, an empty <code>synchronized</code> block may appear after a refactoring\n  when redundant code was removed. In this case, the <code>synchronized</code> block\n  itself will be redundant and should be removed as well.\n</p>\n<p>Example:</p>\n<pre><code>\n  synchronized(lock) {}\n</code></pre>\n<p>\n  A quick-fix is suggested to remove the empty synchronized statement.\n</p>\n<!-- tooltip end -->\n<p>\n  This inspection is disabled in JSP files.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitCalledOnCondition",
          "displayName": "'wait()' called on 'java.util.concurrent.locks.Condition' object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>wait()</code> made on a <code>java.util.concurrent.locks.Condition</code>\nobject. This is probably a programming error, and some variant of the <code>await()</code> method was intended instead.\n<p><b>Example:</b></p>\n<pre><code>\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.wait();\n    }\n  }\n</code></pre>\n<p>Good code would look like this:</p>\n<pre><code>\n  void acquire(Condition released) throws InterruptedException {\n    while (acquired) {\n      released.await();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadStartInConstruction",
          "displayName": "Call to 'Thread.start()' during object construction",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>start()</code> on <code>java.lang.Thread</code>\nor any of its subclasses during object construction.\n<p>\n  While occasionally useful, such constructs should be avoided due to inheritance issues.\n  Subclasses of a class that launches a thread during the object construction will not have finished\n  any initialization logic of their own before the thread has launched.\n</p>\n<p>This inspection does not report if the class that starts a thread is declared <code>final</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class MyThread extends Thread {\n    MyThread() {\n      start();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadWithDefaultRunMethod",
          "displayName": "Instantiating a Thread with default 'run()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that instantiates <code>Thread</code> without specifying\na <code>Runnable</code> parameter or overriding the <code>run()</code> method.\n<p>\n  Such threads do nothing useful.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AwaitWithoutCorrespondingSignal",
          "displayName": "'await()' without corresponding 'signal()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Condition.await()</code>,\nfor which no call to a corresponding <code>Condition.signal()</code> or <code>Condition.signalAll()</code> can be found.\n<p>\n  Calling <code>Condition.await()</code> in a thread without corresponding <code>Condition.signal()</code> may cause the thread\n  to become disabled until it is interrupted or \"spurious wakeup\" occurs.\n</p>\n<p>Only calls that target fields of the current class are reported by this inspection.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Queue {\n    private final Condition isEmpty = ...;\n\n    void add(Object elem) {\n      // ...\n      // isEmpty.signal();\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      isEmpty.await(); // 'await()' doesn't contain corresponding 'signal()'/'signalAll()' call\n      // ...\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "WaitOrAwaitWithoutTimeout",
          "displayName": "'wait()' or 'await()' without timeout",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Object.wait()</code> or <code>Condition.await()</code> without specifying a timeout.\n<p>\n  Such calls may be dangerous in high-availability programs, as failures in one\n  component may result in blockages of the waiting component\n  if <code>notify()</code>/<code>notifyAll()</code>\n  or <code>signal()</code>/<code>signalAll()</code> never get called.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(Object bar) throws InterruptedException {\n    bar.wait();\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizationOnGetClass",
          "displayName": "Synchronization on 'getClass()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports synchronization on a call to <code>getClass()</code>.\n<p>\n  If the class containing the synchronization is subclassed, the subclass\n  will\n  synchronize on a different class object. Usually the call to <code>getClass()</code> can be replaced with a class literal expression, for\n  example <code>String.class</code>. An even better solution is synchronizing on a <code>private static final</code> lock object, access to\n  which can be completely controlled.\n</p>\n<p><b>Example:</b></p>\n<pre><code> synchronized(getClass()) {}\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "AtomicFieldUpdaterNotStaticFinal",
          "displayName": "AtomicFieldUpdater field not declared 'static final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports fields of types:\n<ul>\n  <li><code>java.util.concurrent.atomic.AtomicLongFieldUpdater</code></li>\n  <li><code>java.util.concurrent.atomic.AtomicIntegerFieldUpdater</code></li>\n  <li><code>java.util.concurrent.atomic.AtomicReferenceFieldUpdater</code></li>\n</ul>\nthat are not <code>static final</code>.\nBecause only one atomic field updater is needed for updating a <code>volatile</code> field in all instances\nof a class, it can almost always be <code>static</code>.\n\n<p>Making the updater <code>final</code> allows the JVM to optimize access for improved performance.</p>\n\n<p><b>Example:</b></p>\n<pre>\n  class Main {\n    private volatile int id;\n    private AtomicIntegerFieldUpdater&lt;Main&gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Main {\n    private volatile int id;\n    private static final AtomicIntegerFieldUpdater&lt;Main&gt; idFieldUpdater = AtomicIntegerFieldUpdater.newUpdater(Main.class, \"id\");\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SignalWithoutCorrespondingAwait",
          "displayName": "'signal()' without corresponding 'await()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Condition.signal()</code> or <code>Condition.signalAll()</code>\nfor which no call to a corresponding <code>Condition.await()</code> can be found.\n<p>Only calls that target fields of the current class are reported by this inspection.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Queue {\n    private final Condition isEmpty = ...;\n\n    void add(Object elem) {\n      // ...\n      isEmpty.signal(); // warning: Call to 'signal()' without corresponding 'await()'\n      // ...\n    }\n\n    void remove(Object elem) throws InterruptedException {\n      // ...\n      //      isEmpty.await();\n      // ...\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "BusyWait",
          "displayName": "Busy wait",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Thread.sleep()</code> that occur inside loops.\n<p>Such calls\n  are indicative of \"busy-waiting\". Busy-waiting is often inefficient, and may result in unexpected deadlocks\n  as busy-waiting threads do not release locked resources.</p>\n<p><b>Example:</b></p>\n<pre>\n  class X {\n     volatile int x;\n     public void waitX() throws Exception {\n      while (x &gt; 0) {\n        Thread.sleep(10);//warning: Call to 'Thread.sleep()' in a loop, probably busy-waiting\n      }\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NotifyCalledOnCondition",
          "displayName": "'notify()' or 'notifyAll()' called on 'java.util.concurrent.locks.Condition' object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>notify()</code> or <code>notifyAll()</code> made on\n<code>java.util.concurrent.locks.Condition</code> object.\n<p>\n  This is probably a programming error, and some variant of the <code>signal()</code> or\n  <code>signalAll()</code> method was intended instead, otherwise <code>IllegalMonitorStateException</code> may occur.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class C {\n    final Lock l = new ReentrantLock();\n    final Condition c = l.newCondition();\n\n    void release() {\n      l.lock();\n      try {\n        c.notifyAll(); // probably 'signalAll()' was intended here\n      } finally {\n        l.unlock();\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "AccessToNonThreadSafeStaticFieldFromInstance",
          "displayName": "Non-thread-safe static field access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports access to <code>static</code> fields that are of a non-thread-safe type.\n<p>\n  When a <code>static</code> field is accessed from an instance method or a non-synchronized block,\n  multiple threads can access that field.\n  This can lead to unspecified side effects, like exceptions and incorrect results.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Sample {\n    private static final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n    String method() {\n      return df.format(\"\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  You can specify which types should be considered not thread-safe.\n  Only fields with these exact types or initialized with these exact types are reported,\n  because there may exist thread-safe subclasses of these types.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NotifyWithoutCorrespondingWait",
          "displayName": "'notify()' without corresponding 'wait()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Object.notify()</code> or <code>Object.notifyAll()</code> for which no call to a corresponding\n<code>Object.wait()</code> can be found.\n<p>Only calls that target fields of the current class are reported by this inspection.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  synchronized (synList) {\n    synList.notify(); //synList.wait() is never called\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SafeLock",
          "displayName": "Lock acquired but not safely unlocked",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>java.util.concurrent.locks.Lock</code> resources that are not acquired in front of a\n<code>try</code> block or not unlocked in the corresponding <code>finally</code> block. Such resources may\nbe inadvertently leaked if an exception is thrown before the resource is closed.\n<p><b>Example:</b></p>\n<pre><code>\n  lock.lock(); // will be reported since the 'finally' block is missing\n  try {\n    doSmthWithLock();\n  } catch (IOException e) {\n    throw new UncheckedIOException(e);\n  }\n  lock.unlock();\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThreadPriority",
          "displayName": "Call to 'Thread.setPriority()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Thread.setPriority()</code>.\nModifying priorities of threads is an inherently non-portable operation, as no guarantees\nare given in the Java specification of how priorities are used in scheduling threads, or even\nwhether they are used at all.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SleepWhileHoldingLock",
          "displayName": "Call to 'Thread.sleep()' while synchronized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Thread.sleep()</code> methods that occur\nwithin a <code>synchronized</code> block or method.\n<p>\n  <code>sleep()</code> within a\n  <code>synchronized</code> block may result in decreased performance, poor scalability, and possibly\n  even deadlocking. Consider using <code>wait()</code> instead,\n  as it will release the lock held.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  synchronized (lock) {\n    Thread.sleep(100);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizedMethod",
          "displayName": "'synchronized' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>synchronized</code> modifier on methods.\n<p>\n  There are several reasons a <code>synchronized</code> modifier on a method may be a bad idea:\n</p>\n<ol>\n  <li>\n    As little work as possible should be performed under a lock. Therefore it is often better to use a <code>synchronized</code> block and\n    keep there only the code that works with shared state.\n  </li>\n  <li>\n    Synchronization becomes a part of a method's interface. This makes a transition to a different locking mechanism difficult.\n  </li>\n  <li>\n    Keeping track of what is locking a particular object gets harder.\n  </li>\n  <li>\n    The DoS (denial-of-service) attack becomes feasible either on purpose or unknowingly when inheriting the method's class.\n  </li>\n</ol>\n<p>\n  As an alternative, consider synchronizing on a <code>private final</code> lock object, access to which can be completely controlled.\n</p>\n<p>A quick-fix is provided to wrap the method body with <code>synchronized(this)</code>.</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class Main {\n      public synchronized void fooBar() {\n      }\n    }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n    class Main {\n      public void fooBar() {\n        synchronized (this) {\n        }\n      }\n    }\n  </code>\n</pre>\n\n<!-- tooltip end -->\n<p>You can configure the following options for this inspection:</p>\n<ol>\n  <li><strong>Include native methods</strong> - include native methods into the inspection's scope.</li>\n  <li><strong>Ignore methods overriding a synchronized method</strong> -\n    do not report methods that override a <code>synchronized</code> method.</li>\n</ol>\n\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnNonFinalField",
          "displayName": "Synchronization on a non-final field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>synchronized</code> statements where the lock expression\nis a reference to a non-<code>final</code> field.\n<p>\n  Such statements are unlikely to have useful semantics, as different\n  threads may acquire different locks even when operating on the same object.\n</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre>\n  private Object o;\n  public void foo() {\n    synchronized (o) // synchronization on a non-final field\n    { }\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadYield",
          "displayName": "Call to 'Thread.yield()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Thread.yield()</code>.\n<p>\n  The behavior of <code>yield()</code> is non-deterministic and platform-dependent, and it is rarely appropriate to use this method.\n  Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public static void main(String[] args) {\n    Runnable r = () -> {\n      for (int i = 0; i &lt; 10; i++) {\n        System.out.println(i);\n        Thread.yield();\n      }\n    };\n    new Thread(r).start();\n    new Thread(r).start();\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SharedThreadLocalRandom",
          "displayName": "'ThreadLocalRandom' instance might be shared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>java.util.concurrent.ThreadLocalRandom</code> instances which might be shared between threads.\n<p>\n  A <code>ThreadLocalRandom</code> should not be shared between threads because that is not thread-safe.\n  The inspection reports instances that are assigned to a field used as a method argument,\n  or assigned to a local variable and used in anonymous or nested classes as they might get shared between threads.\n</p>\n<p>\n  Usages of <code>ThreadLocalRandom</code> should typically look like <code>ThreadLocalRandom.current().nextInt(...)</code>\n  (or <code>nextDouble(...)</code> etc.).\n  When all usages are in this form, <code>ThreadLocalRandom</code> instances cannot be used accidentally by multiple threads.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n    class Main {\n      void printRandomNumbersAsync() {\n        ThreadLocalRandom random = ThreadLocalRandom.current();\n        CompletableFuture.supplyAsync(() -&gt; generateNumbers(random))\n          .thenAccept(numbers -&gt; System.out.println(Arrays.toString(numbers)));\n      }\n\n      private int[] generateNumbers(Random random) {\n        return random.ints(1000, 0, 100).toArray();\n      }\n    }\n  </code></pre>\n<!-- tooltip end -->\n<p>\n  Use the options to list methods that are safe to be passed to <code>ThreadLocalRandom</code> instances as an argument.\n  It's possible to use regular expressions for method names.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PublicFieldAccessedInSynchronizedContext",
          "displayName": "Non-private field accessed in synchronized context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>final</code>, non-<code>private</code> fields that are accessed in a synchronized context.\n<p>\n  A non-<code>private</code> field cannot be guaranteed to always be accessed in a synchronized manner, and such \"partially synchronized\"\n  access may result in unexpectedly inconsistent data structures.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Bar {\n    public String field1;\n  }\n  public Bar myBar;\n\n  synchronized public void sample() {\n   myBar.field1 = \"bar\";\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SynchronizeOnLock",
          "displayName": "Synchronization on a Lock object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>synchronized</code> blocks that lock on an instance of <code>java.util.concurrent.locks.Lock</code>.\nSuch synchronization is almost certainly unintended, and appropriate versions of <code>.lock()</code>\nand <code>.unlock()</code> should be used instead.\n<p><b>Example:</b></p>\n<pre><code>\n  final ReentrantLock lock = new ReentrantLock();\n\n  public void foo() {\n    synchronized (lock) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ObjectNotify",
          "displayName": "Call to 'notify()' instead of 'notifyAll()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Object.notify()</code>. While occasionally useful, in almost all cases\n<code>Object.notifyAll()</code> is a better choice because calling <code>Object.notify()</code> may lead to deadlocks.\nSee Doug Lea's <i>Concurrent Programming in Java</i> for a discussion.\n</body>\n</html>"
        },
        {
          "shortName": "NestedSynchronizedStatement",
          "displayName": "Nested 'synchronized' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <code>synchronized</code> statements.\nIt is recommended to avoid nested synchronization if possible, because in some cases it may lead to a deadlock.\n<p><b>Example:</b></p>\n<pre><code>\n  synchronized (lockA){\n    //thread 1 is waiting for lockB\n    synchronized (lockB){ //warning\n    }\n  }\n  ...\n  synchronized (lockB) {\n    //thread 2 is waiting for lockA\n    synchronized (lockA) { //warning\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeSynchronized",
          "displayName": "Method with synchronized block could be synchronized method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose body contains a single <code>synchronized</code> statement.\nA lock expression for this <code>synchronized</code> statement must be equal to\n<code>this</code> for instance methods or <code>[ClassName].class</code> for static methods.\n<p>\n  To improve readability of such methods,\n  you can remove the <code>synchronized</code> wrapper and mark the method as <code>synchronized</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public int generateInt(int x) {\n    synchronized (this) {\n      return 1;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public synchronized int generateInt(int x) {\n    return 1;\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleCheckedLocking",
          "displayName": "Double-checked locking",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <a href=\"https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html\">double-checked locking</a>.\n<p>\n  Double-checked locking tries to initialize a field on demand and in a thread-safe manner while avoiding the cost of synchronization.\n  Unfortunately it is not thread-safe when used on a field that is not declared <code>volatile</code>.\n  When using Java 1.4 or later, double-checked locking doesn't work even with <code>volatile</code> fields.\n  Read the article linked above for the detailed explanation of the problem.\n</p>\n<p>\n  Example of an incorrect double-checked locking:\n</p>\n<pre><code>\n  class Foo {\n    private Helper helper = null;\n    public Helper getHelper() {\n      if (helper == null)\n        synchronized(this) {\n          if (helper == null) helper = new Helper();\n        }\n        return helper;\n      }\n    }\n    // other functions and members...\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotInLoop",
          "displayName": "'wait()' not called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>wait()</code> that are not made inside a loop.\n<p>\n  <code>wait()</code> is normally used to suspend a thread until some condition becomes true.\n  As the thread could have been waken up for a different reason,\n  the condition should be checked after the <code>wait()</code> call returns.\n  A loop is a simple way to achieve this.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      if (count >= 10) wait();\n      ++count;\n    }\n  }\n</code></pre>\n<p>Good code should look like this:</p>\n<pre><code>\n  class BoundedCounter {\n    private int count;\n    synchronized void inc() throws InterruptedException {\n      while (count >= 10) wait();\n      ++count;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CallToNativeMethodWhileLocked",
          "displayName": "Call to a native method while locked",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls <code>native</code> methods within a <code>synchronized</code> block or method.\n<p>\n  When possible, it's better to keep calls to <code>native</code> methods out of the synchronized context\n  because such calls cause an expensive context switch and may lead to performance issues.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  native void nativeMethod();\n\n  void example(){\n    synchronized (lock){\n      nativeMethod();//warning\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "WaitNotifyNotInSynchronizedContext",
          "displayName": "'wait()' or 'notify()' is not in synchronized context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>wait()</code>, <code>notify()</code>, and <code>notifyAll()</code>\nthat are not made inside a corresponding synchronized statement or synchronized method.\n<p>\n  Calling these methods on an object\n  without holding a lock on that object causes <code>IllegalMonitorStateException</code>.\n  Such a construct is not necessarily an error, as the necessary lock may be acquired before\n  the containing method is called, but it's worth looking at.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Sync {\n    private final Object lock = new Object();\n\n    void test() throws InterruptedException {\n      synchronized (this) {\n        lock.wait(); // 'lock.wait()' is not synchronized on 'lock'\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonAtomicOperationOnVolatileField",
          "displayName": "Non-atomic operation on volatile field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports non-atomic operations on volatile fields.\n<p>\n  An example of a non-atomic operation is updating the field using the increment operator.\n  As the operation involves read and write, and other modifications may happen in between, data may become corrupted.\n  The operation can be made atomic by surrounding it with a <code>synchronized</code> block or\n  using one of the classes from the <code>java.util.concurrent.atomic</code> package.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  private volatile int v = 1;\n\n  void foo() {\n    v = 2 * v;\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JSON and JSON5",
      "inspections": [
        {
          "shortName": "JsonStandardCompliance",
          "displayName": "Compliance with JSON standard",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the following discrepancies of a JSON file with  <a href=\"https://tools.ietf.org/html/rfc7159\">the language specification</a>:\n<ul>\n  <li>A line or  block comment (configurable).</li>\n  <li>Multiple top-level values (expect for JSON Lines files, configurable for others).</li>\n  <li>A trailing comma in an object or array (configurable).</li>\n  <li>A single quoted string.</li>\n  <li>A property key is a not a double quoted strings.</li>\n  <li>A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).</li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaRefReference",
          "displayName": "Unresolved '$ref' and '$schema' references",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved <code>$ref</code> or <code>$schema</code> path in a JSON schema.<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonDuplicatePropertyKeys",
          "displayName": "Duplicate keys in object literals",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a duplicate key in an object literal.\n</body>\n</html>"
        },
        {
          "shortName": "JsonPathUnknownOperator",
          "displayName": "Unknown JSONPath operator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown operator on a JSONPath expression instead of one of the standard ones: \n<code>in</code>, <code>nin</code>, <code>subsetof</code>, <code>anyof</code>, <code>noneof</code>, <code>size</code>, <code>empty</code>, <code>contains</code>.\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaCompliance",
          "displayName": "Compliance with JSON schema",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports inconsistence between a JSON file and the <a href=\"https://json-schema.org\">JSON schema</a> that is assigned to it.<br>\n</body>\n</html>"
        },
        {
          "shortName": "JsonSchemaDeprecation",
          "displayName": "Deprecated JSON property",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a deprecated property in a JSON file.<br>\nNote that deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard extension 'deprecationMessage'.\n</body>\n</html>"
        },
        {
          "shortName": "JsonPathUnknownFunction",
          "displayName": "Unknown JSONPath function",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown name in a JSONPath function call instead of known standard function names:\n<code>concat</code>, <code>keys</code>, <code>length</code>, <code>min</code>, <code>max</code>, <code>avg</code>, <code>stddev</code>, <code>sum</code>.\n</body>\n</html>"
        },
        {
          "shortName": "JsonPathEvaluateUnknownKey",
          "displayName": "Unknown property key used for JSONPath evaluate expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSONPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a key in a JSONPath expression that is missing in the source JSON document to evaluate.\n</body>\n</html>"
        },
        {
          "shortName": "Json5StandardCompliance",
          "displayName": "Compliance with JSON5 standard",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "JSON5",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports inconsistency with <a href=\"http://json5.org\">the language specification</a> in a JSON5 file.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Python",
      "inspections": [
        {
          "shortName": "PyOverloadsInspection",
          "displayName": "Overloads in regular Python files",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\n  not compatible with the implementation.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTypedDictInspection",
          "displayName": "Invalid TypedDict definition and usages",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid definition and usage of\n  <a href=\"https://www.python.org/dev/peps/pep-0589/\">TypedDict</a>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTupleAssignmentBalanceInspection",
          "displayName": "Tuple assignment balance is incorrect",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when the number of expressions on the right-hand side\n  and targets on the left-hand side are not the same.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nt = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t\n</pre>\n<p>As a quick-fix, you can modify the highlighted code fragment to restore the tuple\n  balance.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyPropertyAccessInspection",
          "displayName": "Inappropriate access to properties",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when properties are accessed inappropriately:\n<ul>\n  <li>Read-only properties are set</li>\n  <li>Write-only properties are read</li>\n  <li>Non-deletable properties are deleted</li>\n</ul>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMissingOrEmptyDocstringInspection",
          "displayName": "Missing or empty docstring",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports missing and empty docstrings.</p>\n<p><b>Example of a missing docstring</b></p>\n<pre style=\"font-family: monospace\">\ndef demo(a):\n    c = a ** 2\n</pre>\n<p><b>Example of an empty docstring</b></p>\n<pre style=\"font-family: monospace\">\ndef demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2\n</pre>\n<p>When the quick-fix is applied, the code fragments change to:</p>\n<pre style=\"font-family: monospace\">\ndef demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2\n</pre>\n<p>You need to provide some details about the parameter in the generated template.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyUnreachableCodeInspection",
          "displayName": "Unreachable code",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports code fragments that cannot be normally reached.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nif True:\n    print('Yes')\nelse:\n    print('No')\n</pre>\n<p>As a fix, you might want to check and modify the algorithm to ensure it implements\n  the expected logic.</p>\n</body></html>\n"
        },
        {
          "shortName": "PyArgumentListInspection",
          "displayName": "Incorrect call arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports discrepancies between declared parameters and actual arguments, as well as\n  incorrect arguments, for example, duplicate named arguments, and incorrect argument order.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument\n</pre>\n<p>The correct code fragment looks at follows:</p>\n<pre style=\"font-family: monospace\">\nclass Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyStubPackagesAdvertiser",
          "displayName": "Stub packages advertiser",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports availability of stub packages.</p>\n<p>\n  <a href=\"https://www.python.org/dev/peps/pep-0561/\">Stub package</a> is a package that contains type information for the corresponding\n  runtime package.\n</p>\n<p>Using stub packages ensures better coding assistance for the corresponding python package.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyFromFutureImportInspection",
          "displayName": "Improper position of from __future__ import",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports <code>from __future__ import</code>\n  statements that are used not at\n  the beginning of a file.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\na = 1\nfrom __future__ import print_function\nprint()\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nfrom __future__ import print_function\n\na = 1\nprint()\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyDecoratorInspection",
          "displayName": "Class-specific decorator is used outside the class",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports usages of <code>@classmethod</code> or <code>@staticmethod</code> decorators\n  in methods outside a class.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass\n</pre>\n<p>The <code>change_state</code> method should not use the <code>@classmethod</code> decorator or it should be\n  moved to the <code>State</code> class declaration. </p>\n<p>If you apply the <code>Remove decorator</code> action, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nclass State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyReturnFromInitInspection",
          "displayName": "__init__ method that returns a value",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports occurrences of <code>return</code> statements with a return value inside\n  <code>__init__</code> methods of classes.\n</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum\n</pre>\n<p>A constructor should not return any value. The <code>__init__</code> method should\n  only initialize the values of instance members for news objects.</p>\n<p>As a quick-fix, the IDE offers to remove the <code>return</code> statement.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PySuperArgumentsInspection",
          "displayName": "Wrong arguments to call super",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when any call to <code>super(A, B)</code> does not meet the\n  following requirements:</p>\n<ul>\n  <li><code>B</code> is an instance of <code>A</code></li>\n  <li><code>B</code> a subclass of <code>A</code></li>\n</ul>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n</pre>\n<p>As a fix, you can make the <code>Square</code> an instance of the <code>Rectangle</code> class.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyGlobalUndefinedInspection",
          "displayName": "Global variable is not defined at the module level",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports problems when a variable defined through the <code>global</code>\n  statement is not defined in the module scope.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef foo():\n    global bar\n    print(bar)\n\nfoo()\n</pre>\n<p>As a fix, you can move the global variable declaration:</p>\n<pre style=\"font-family: monospace\">\nglobal bar\n\n\ndef foo():\n    print(bar)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyNestedDecoratorsInspection",
          "displayName": "Problematic nesting of decorators",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports problems with nesting decorators. The inspection highlights the cases when <code>classmethod</code> or <code>staticmethod</code>\n  is applied before another decorator.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass\n</pre>\n<p>As a quick-fix, the IDE offers to remove the decorator.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyExceptionInheritInspection",
          "displayName": "Exceptions do not inherit from standard 'Exception' class",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when a custom exception class is\n  raised but does not inherit from the\n  <a href=\"https://docs.python.org/3/library/exceptions.html\">builtin Exception class</a>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass A:\n    pass\n\n\ndef me_exception():\n    raise A()\n</pre>\n<p>The proposed quick-fix changes the code to:</p>\n<pre style=\"font-family: monospace\">\nclass A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyInconsistentIndentationInspection",
          "displayName": "Inconsistent indentation",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports inconsistent indentation in Python source files when, for example,\n  you use a mixture of tabs and spaces in your code.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyDunderSlotsInspection",
          "displayName": "Invalid usages of classes with  '__slots__' definitions",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid usages of a class with <code>__slots__</code> definitions.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam'\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTrailingSemicolonInspection",
          "displayName": "Prohibited trailing semicolon in a statement",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports trailing semicolons in statements.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef my_func(a):\n    c = a ** 2;\n    return c\n</pre>\n<p>IDE provides a quick-fix that removes a trailing semicolon. When you\n  apply it, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndef my_func(a):\n    c = a ** 2\n    return c\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyArgumentEqualDefaultInspection",
          "displayName": "The function argument is equal to the default parameter value",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports a problem when an argument\n  passed to the function is equal to the default parameter value.</p>\n<p>This inspection is disabled by default to avoid performance degradation.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyProtocolInspection",
          "displayName": "Invalid protocol definitions and usages",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid definitions and usages of protocols introduced in\n  <a href=\"https://www.python.org/dev/peps/pep-0544/\">PEP-544</a>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass\n\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyComparisonWithNoneInspection",
          "displayName": "Using equality operators to compare with None",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports comparisons with <code>None</code>. That type of comparisons\n  should always be done with <code>is</code> or <code>is not</code>, never\n  the equality operators.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\na = 2\n\n\nif a == None:\n    print(\"Success\")\n</pre>\n<p>Once the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\na = 2\n\n\nif a is None:\n    print(\"Success\")\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyUnresolvedReferencesInspection",
          "displayName": "Unresolved references",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports references in your code that cannot be resolved.</p>\n<p>In a dynamically typed language, this is possible in a limited number of cases. </p>\n<p>If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:</p>\n<pre style=\"font-family: monospace\">\ndef print_string(s):\n  print(s.abc())\n</pre>\n<p>In this code fragment <code>s</code> is always a string and <code>abc</code> should be highlighted as unresolved. However, <code>s</code>\n  type is inferred as <code>Any</code> and no warning is reported.</p>\n<p>The IDE provides quick-fix actions to add missing references on-the-fly.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyCallingNonCallableInspection",
          "displayName": "Attempt to call a non-callable object",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports a problem when you are trying\n  to call objects that are not callable, like, for example, properties:</p>\n<pre  style=\"font-family: monospace\">\nclass Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyUnboundLocalVariableInspection",
          "displayName": "Unbound local variables",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports local variables referenced before assignment.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nx = 0\nif x > 10:\n    b = 3\nprint(b)\n</pre>\n<p>The IDE reports a problem for <code>print(b)</code>. A possible fix is:</p>\n<pre style=\"font-family: monospace\">\nx = 0\nif x > 10:\n    b = 3\n    print(b)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyRedundantParenthesesInspection",
          "displayName": "Redundant parentheses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports about redundant parentheses in expressions.</p>\n<p>The IDE provides the quick-fix action to remove the redundant parentheses.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyPropertyDefinitionInspection",
          "displayName": "Incorrect property definition",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports problems with the arguments of <code>property()</code> and functions\n  annotated with <code>@property</code>.</p>\n<pre style=\"font-family: monospace\">\nclass C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass\n</pre>\n<p>A quick-fix offers to update parameters.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyInterpreterInspection",
          "displayName": "An invalid interpreter",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\n  configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.</p>\n<p>The IDE provides quick access to the interpreter settings.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyFinalInspection",
          "displayName": "Invalid usages of final classes, methods, and variables",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid usages of final classes,\n  methods and variables.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTupleItemAssignmentInspection",
          "displayName": "Tuple item assignment is prohibited",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports assignments to a tuple item.</p>\n<pre style=\"font-family: monospace\">\nt = ('red', 'blue', 'green', 'white')\nt[3] = 'black'\n</pre>\n<p>A quick-fix offers to replace the tuple with a list.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyShadowingBuiltinsInspection",
          "displayName": "Shadowing built-in names",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports shadowing built-in names, such as <code>len</code> or <code>list</code>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef len(a, b, c):\n    d = a + b + c\n    return d\n</pre>\n<p>In this code fragment, the <code>len</code> built-in name is used. The IDE offers to\n  apply the Rename refactoring as a fix.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyDocstringTypesInspection",
          "displayName": "Type in docstring does not match inferred type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports types in docstring that do not match dynamically inferred types.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PySingleQuotedDocstringInspection",
          "displayName": "Single quoted docstring",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports docstrings that do not adhere to the triple double-quoted string format.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef calc(self, balance=0):\n    'param: balance'\n    self.balance = balance\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndef calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyNonAsciiCharInspection",
          "displayName": "File contains non-ASCII character",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases in Python 2 when a file contains non-ASCII characters and does not\n  have an encoding declaration at the top.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass A(object):\n# &#8470;5\n    def __init__(self):\n        pass\n</pre>\n<p>In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\n  declaration. Apply the proposed quick-fix to add a missing encoding declaration:</p>\n<pre style=\"font-family: monospace\">\n# coding=utf-8\nclass A(object)\n# &#8470;5\n    def __init__(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMandatoryEncodingInspection",
          "displayName": "No encoding specified for file",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports a missing encoding comment in Python 2.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Book(object):\n    def __init__(self):\n        pass\n</pre>\n<p>When the quick-fix is applied, the missing comment is added:</p>\n<pre style=\"font-family: monospace\">\n# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyUnusedLocalInspection",
          "displayName": "Unused local symbols",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports local variables, parameters, and functions that are locally defined, but not used name in a function.\n</p>\n</body></html>\n"
        },
        {
          "shortName": "PySimplifyBooleanCheckInspection",
          "displayName": "Redundant boolean variable check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports equality comparison with a boolean literal.</p>\n<p><b>Example:</b></p>\n<pre  style=\"font-family: monospace\">\ndef func(s):\n    if s.isdigit() == True:\n        return int(s)\n</pre>\n<p>With the quick-fix applied, the code fragment will be simplified to:</p>\n<pre  style=\"font-family: monospace\">\ndef func(s):\n    if s.isdigit():\n        return int(s)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyListCreationInspection",
          "displayName": "Non-optimal list declaration",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when a list declaration\n  can be rewritten with a list literal.</p>\n<p>This ensures better performance of your application.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nl = [1]\nl.append(2)\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nl = [1, 2]\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyClassicStyleClassInspection",
          "displayName": "Classic style class usage",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports <a href=\"https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes\">\n  classic style classes</a> usage. This inspection applies only to Python 2.\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass A:\n    pass\n</pre>\n<p>With quick-fixes provided by the IDE, this code fragment changes to:</p>\n<pre style=\"font-family: monospace\">\nclass A(object):\n    def __init__(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyOldStyleClassesInspection",
          "displayName": "Old-style class contains new-style class features",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports occurrences of\n  <a href=\"https://www.python.org/doc/newstyle/\">new-style class features</a>\n  in old-style classes. The inspection highlights\n  <code>__slots__</code>, <code>__getattribute__</code>, and <code>super()</code>\n  inside old-style classes.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyAssignmentToLoopOrWithParameterInspection",
          "displayName": "Assignments to 'for' loop or 'with' statement parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases when you rewrite a loop variable with an inner loop:\n<pre style=\"font-family: monospace\">\n    for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)\n  </pre>\n\nIt also warns you if a variable declared in the <code>with</code> statement is redeclared inside of the statement body:\n<pre style=\"font-family: monospace\">\n    with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:\n  </pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyChainedComparisonsInspection",
          "displayName": "Too complex chained comparisons",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports chained comparisons that can be simplified.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x &lt;= xmax:\n          pass\n</code></pre>\n<p>The IDE offers to simplify <code>if x >= xmin and x &lt;= xmax</code>.\n  When the quick-fix is applied, the code changes to:</p>\n<pre><code>\n  def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin &lt;= x &lt;= xmax:\n          pass\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyByteLiteralInspection",
          "displayName": "A byte literal contains a non-ASCII character",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports characters in byte literals that are outside ASCII range.</p>\n<p><b>Example:</b></p>\n<code>s = b'&#8470;5'</code>\n</body>\n</html>"
        },
        {
          "shortName": "PyDeprecationInspection",
          "displayName": "Deprecated function, class, or module",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports usages of Python functions, or methods that are marked as\n  deprecated and raise the <code>DeprecationWarning</code> or <code>PendingDeprecationWarning</code> warning.</p>\n<p>Also, this inspection highlights usages of <code>abc.abstractstaticmethod</code>, <code>abc.abstractproperty</code>, and <code>abc.abstractclassmethod</code>\n  decorators.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyPep8NamingInspection",
          "displayName": "PEP 8 naming convention violation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports violations of the\n  <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP8</a> naming conventions.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n</pre>\n<p>In this code fragment, IDE offers to rename <code>mammalia</code> to <code>Mammalia</code>.\n  When the quick-fix is applied, the code change to:</p>\n<pre style=\"font-family: monospace\">\nclass Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMethodParametersInspection",
          "displayName": "Improper first parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports methods that lack the first parameter that is usually\n  named <code>self</code>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Movie:\n\n   def show():\n       pass\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nclass Movie:\n\n   def show(self):\n       pass\n</pre>\n<p>The inspection also reports naming issues in class methods.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Movie:\n    @classmethod\n    def show(abc):\n        pass\n</pre>\n<p>Since the first parameter of a class method should be <code>cls</code>, the IDE provides a quick-fix\n  to rename it.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyClassHasNoInitInspection",
          "displayName": "Class has no `__init__` method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases in Python 2 when a class has no <code>__init__</code> method, neither its parent\n  classes.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Book():\n    pass\n</pre>\n<p>The quick-fix adds the <code>__init__</code> method:</p>\n<pre style=\"font-family: monospace\">\nclass Book():\n    def __init__(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMethodOverridingInspection",
          "displayName": "Method signature does not match signature of overridden method",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports inconsistencies in overriding method signatures.</p>\n\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass\n</pre>\n\n<p>Parameters of the <code>add_title</code> method in the <code>Novel</code> class do not match the method\n  signature specified in the <code>Book</code> class. As a fix, the IDE offers to apply the Change Signature\n  refactoring.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyNamedTupleInspection",
          "displayName": "Invalid definition of 'typing.NamedTuple'",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid definition of a\n  <a href=\"https://docs.python.org/3/library/typing.html#typing.NamedTuple\">typing.NamedTuple</a>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str\n</pre>\n<p>As a fix, place the field with the default value after the fields without default values:</p>\n<pre style=\"font-family: monospace\">\nimport typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMethodMayBeStaticInspection",
          "displayName": "Method is not declared static",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any methods that do not require a class instance creation and can be\n  made static.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass MyClass(object):\n    def my_method(self, x):\n        print(x)\n</pre>\n<p>If a <b>Make function from method</b> quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndef my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass\n</pre>\n<p>If you select the <b>Make method static</b> quick-fix, the <code>@staticmethod</code> decorator is added:</p>\n<pre style=\"font-family: monospace\">\nclass MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTypeCheckerInspection",
          "displayName": "Incorrect type",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. </p>\n<p>Types of function parameters can be specified in\n  docstrings or in Python 3 function annotations.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int\n</pre>\n<p>With the quick-fix, you can modify the problematic types:</p>\n<pre style=\"font-family: monospace\">\ndef foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyMissingTypeHintsInspection",
          "displayName": "Missing type hinting for function definition",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports missing type hints for function declaration in\n  one of the two formats: parameter annotations or a type comment.</p>\n<p>Select the <b>Only when types are known</b> checkbox if you want the inspection check\n  the types collected from runtime or inferred.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CommandLineInspection",
          "displayName": "Incorrect CLI syntax",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "CommandLine",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\n  that option names and arguments are correct.</p>\n<p>Do not disable the inspection if you are going to use command-line interfaces like <a\n  href=\"https://www.jetbrains.com/help/pycharm/running-manage-py.html\">manage.py in Django</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PySetFunctionToLiteralInspection",
          "displayName": "Function call can be replaced with set literal",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to the <code>set</code> function that can be replaced with\n  the <code>set</code> literal.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef do_mult(a, b):\n    c = a * b\n    return set([c, a, b])\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndef do_mult(a, b):\n    c = a * b\n    return {c, a, b}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyShadowingNamesInspection",
          "displayName": "Shadowing names from outer scopes",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports shadowing names defined in outer scopes.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef outer(p):\n    def inner(p):\n        pass\n</pre>\n<p>As a quick-fix, the IDE offers to remove a parameter or rename it.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyRedeclarationInspection",
          "displayName": "Redeclared names without usages",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unconditional redeclarations of names without being used in between.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef x(): pass\n\n\nx = 2\n</pre>\n<p>It applies to function and class declarations, and top-level assignments. </p>\n<p>When the warning is shown, you can try a recommended action, for example, you might be prompted to\n  rename the variable.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyRelativeImportInspection",
          "displayName": "Suspicious relative imports",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports usages of relative imports inside plain directories, for example, directories neither containing <code>__init__.py</code> nor\n  explicitly marked as namespace packages.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyDictDuplicateKeysInspection",
          "displayName": "Dictionary contains duplicate keys",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports using the same value as the dictionary key twice.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndic = {\"a\": [1, 2], \"a\": [3, 4]}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyDefaultArgumentInspection",
          "displayName": "The default argument is mutable",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports a problem when a mutable value as a list or dictionary is detected in a default value for\n  an argument. <br/>\n  Default argument values are evaluated only once at function definition time,\n  which means that modifying the\n  default value of the argument will affect all subsequent calls of that function.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef func(s, cache={}):\n    cache[s] = None\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndef func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyDataclassInspection",
          "displayName": "Invalid definition and usage of Data Classes",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid definitions and usages of classes created with\n  <code>dataclasses</code> or <code>attr</code> modules.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nimport dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyBroadExceptionInspection",
          "displayName": "Unclear exception clauses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports exception clauses that do not provide specific information\n  about the problem. </p>\n<p><b>Example:</b></p>\n<ul>\n  <li>Clauses that do not specify an exception class</li>\n  <li>Clauses that are specified as <code>Exception</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PyCompatibilityInspection",
          "displayName": "Code is incompatible with specific Python versions",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports incompatibility with the specified versions of Python.\n  Enable this inspection if you need your code to be compatible with a range of Python versions, for example,\n  if you are building a library.</p>\n<p>To define the range of the inspected Python versions, select the corresponding checkboxes in the <b>Options</b>\n  section.</p>\n<p>For more information about the Python versions supported by the IDE, see the\n  <a href=\"https://www.jetbrains.com/help/pycharm/python.html#support\">web help</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyTypeHintsInspection",
          "displayName": "Invalid type hints definitions and usages",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports invalid usages of type hints.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass\n</pre>\n<p>Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyDictCreationInspection",
          "displayName": "Dictionary creation can be rewritten by dictionary literal",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports situations when you can rewrite dictionary creation\n  by using a dictionary literal.</p>\n<p>This approach brings performance improvements.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndic = {}\ndic['var'] = 1\n</pre>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ndic = {'var': 1}\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyUnnecessaryBackslashInspection",
          "displayName": "Unnecessary backslash",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports backslashes in places where line continuation is implicit inside <code>()</code>,\n  <code>[]</code>, and <code>{}</code>.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\na = ('first', \\\n     'second', 'third')\n</pre>\n<p>When the quick-fix is applied, the redundant backslash is deleted.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CythonUsageBeforeDeclarationInspection",
          "displayName": "Cython variable is used before its declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Cython",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports Cython variables being referenced before declaration.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ncdef int c_x\n\nprint(c_x, c_y)  # Variable 'c_y' is used before its declaration\n\ncdef int c_y = 0\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMethodFirstArgAssignmentInspection",
          "displayName": "First argument of the method is reassigned",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when the first parameter,\n  such as <code>self</code> or <code>cls</code>, is reassigned in a method.\n  Because in most cases, there are no objectives in such reassignment, the\n  IDE indicates an error.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self\n</pre>\n<p>As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\n  you can invoke intention actions for this code and opt to ignore the warning.</p>\n</body></html>\n"
        },
        {
          "shortName": "PyPep8Inspection",
          "displayName": "PEP 8 coding style violation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports violations of the <a href=\"https://www.python.org/dev/peps/pep-0008/\">PEP 8 coding style guide</a> by running the bundled <a\n  href=\"https://github.com/PyCQA/pycodestyle\">pycodestyle.py</a> tool.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyAugmentAssignmentInspection",
          "displayName": "Assignment can be replaced with augmented assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports assignments that can be replaced with augmented assignments.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\na = 23\nb = 3\na = a + b\n</pre>\n<p>After the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\na = 23\nb = 3\na += b\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyPackageRequirementsInspection",
          "displayName": "Unsatisfied package requirements",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n  Reports packages mentioned in requirements files (for example, <code>requirements.txt</code> or <code>Pipfile</code>) but not installed,\n  or imported but not mentioned in requirements files.</p>\n<p>\n  The IDE shows a quick-fix banner so that you can install the missing packages in one click.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyInitNewSignatureInspection",
          "displayName": "Incompatible signatures of __new__ and __init__",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports incompatible signatures of the <code>__new__</code> and <code>__init__</code> methods.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass\n</pre>\n<p>If the <code>__new__</code> and <code>__init__</code> have different arguments, then the <code>MyClass</code>\n  cannot be instantiated.</p>\n<p>As a fix, the IDE offers to apply the Change Signature refactoring.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyIncorrectDocstringInspection",
          "displayName": "Incorrect docstring",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports mismatched parameters in a docstring. For example, <code>b</code> is highlighted, because there is no\n  such a parameter in the <code>add</code> function.</p>\n<pre style=\"font-family: monospace\">\n    def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass\n</pre>\n<p>The inspection does not warn you of missing parameters if none of them is mentioned in a docstring:</p>\n<pre style=\"font-family: monospace\">\ndef mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyExceptClausesOrderInspection",
          "displayName": "Wrong order of 'except' clauses",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when <code>except</code> clauses are not in the proper order,\n  from the more specific to the more generic, or one exception class is caught twice. </p>\n<p>\n  If you do not fix the order, some exceptions may not be caught by the most specific handler.\n</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ntry:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass\n</pre>\n<p>The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\ntry:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyNoneFunctionAssignmentInspection",
          "displayName": "Assigning function calls that don't return anything",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when an assignment is done on a function that does not return anything.</p>\nThis inspection is similar to <a href=\"https://docs.pylint.org/en/1.6.0/features.html#id6\">pylint inspection E1111</a>.\n<p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\ndef just_print():\n    print(\"Hello!\")\n\n\naction = just_print()\n</pre>\n<p>As a quick-fix, the IDE offers to remove the assignment.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyProtectedMemberInspection",
          "displayName": "Accessing a protected member of a class or a module",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when a protected member is accessed outside the class,\n  a descendant of the class where it is defined, or a module.</p>\n<pre style=\"font-family: monospace\">\nclass Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyStringFormatInspection",
          "displayName": "Errors in string formatting operations",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports errors in string formatting operations.</p>\n<p><b>Example 1:</b></p>\n<pre style=\"font-family: monospace\">\n\"Hello {1}\".format(\"people\")\n</pre>\n<p><b>Example 2:</b></p>\n<pre style=\"font-family: monospace\">\ndef bar():\n    return 1\n\n\n\"%s %s\" % bar()\n</pre>\n<p>As a fix, you need to rewrite string formatting fragments to\n  adhere to the <a href=\"https://docs.python.org/3/library/string.html#format-string-syntax\">formatting syntax</a>.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyAsyncCallInspection",
          "displayName": "Missing `await` syntax in coroutine calls",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports coroutines that were called\n  without using the <code>await</code> syntax.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nasync def bar():\n    pass\n\n\nasync def foo():\n    bar()\n</pre>\n<p>After the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nasync def bar():\n    pass\n\n\nasync def foo():\n    await bar()\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyStatementEffectInspection",
          "displayName": "Statement has no effect",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports statements that have no effect.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect\n</pre>\n<p>In this example, you can either add a field <code>time</code> to the <code>Car</code> class or\n  introduce variables for the problematic statements.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PyAttributeOutsideInitInspection",
          "displayName": "An instance attribute is defined outside `__init__`",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a problem when instance attribute\ndefinition is outside <code>__init__</code> method.\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\n    class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'\n</pre>\n<p>\n  When the quick-fix is applied, the code sample changes to:\n</p>\n<pre style=\"font-family: monospace\">\n    class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyAbstractClassInspection",
          "displayName": "Class must implement all abstract methods",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when not all abstract properties or methods are defined in\n  a subclass.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass\n</pre>\n<p>When the quick-fix is applied, the IDE implements an abstract method for the <code>Triangle</code> class:</p>\n<pre style=\"font-family: monospace\">\nfrom abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyMissingConstructorInspection",
          "displayName": "Missed call to '__init__' of the super class",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when a call to the <code>super</code> constructor in a class is missed.</p>\n<p><b>Example:</b></p>\n<pre style=\"font-family: monospace\">\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass\n</pre>\n<p>The <code>Pear</code> class should have a <code>super</code> call in the <code>__init__</code>\n  method.</p>\n<p>When the quick-fix is applied, the code changes to:</p>\n<pre style=\"font-family: monospace\">\nclass Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "PyTestParametrizedInspection",
          "displayName": "Incorrect arguments in @pytest.mark.parametrize",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports functions that are decorated with <a href=\"https://docs.pytest.org/en/stable/parametrize.html\">\n  @pytest.mark.parametrize</a> but do not have arguments to accept\n  parameters of the decorator.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PyStubPackagesCompatibilityInspection",
          "displayName": "Incompatible stub packages",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Python",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports stub packages that do not support the version of the corresponding runtime package.</p>\n<p>A <a href=\"https://www.python.org/dev/peps/pep-0561/\">stub package</a> contains type information for some runtime package.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "PropertyName",
          "displayName": "Property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "FunctionName",
          "displayName": "Function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableName",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables that do not follow the naming conventions.\n<p>You can specify the required pattern in the inspection options.</p>\n<p><a href=\"https://kotlinlang.org/docs/coding-conventions.html#function-names\">Recommended naming conventions</a>: it has to start with a lowercase letter, use camel case and no underscores.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun fibonacciNumber(index: Int): Long = when(index) {\n      0 -> 0\n      else -> {\n          // does not follow naming conventions: contains underscore symbol (`_`)\n          var number_one: Long = 0\n          // does not follow naming conventions: starts with an uppercase letter\n          var NUMBER_TWO: Long = 1\n          // follow naming conventions: starts with a lowercase letter, use camel case and no underscores.\n          var numberThree: Long = number_one + NUMBER_TWO\n\n          for(currentIndex in 2..index) {\n              numberThree = number_one + NUMBER_TWO\n              number_one = NUMBER_TWO\n              NUMBER_TWO = numberThree\n          }\n          numberThree\n      }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ObjectPropertyName",
          "displayName": "Object property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties that do not follow the naming conventions.\n<p>The following properties are reported:</p>\n<ul>\n    <li>Top-level properties</li>\n    <li>Properties in objects and companion objects</li>\n</ul>\n<p>You can specify the required pattern in the inspection options.</p>\n<p><a href=\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\">Recommended naming conventions</a>: it has to start with an uppercase letter, use camel case and no underscores.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassName",
          "displayName": "Class naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports class names that do not follow the recommended naming conventions.\n<p>\n    Consistent naming allows for easier code reading and understanding.\n    According to the <a href=\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\">Kotlin official style guide</a>,\n    classes should be named in CamelCase.\n</p>\n<p>It is possible to introduce other naming rules by changing the \"Pattern\" regular expression.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class user(val name: String)\n</code></pre>\n<p>After renaming according to the Kotlin conventions:</p>\n<pre><code>\n  class User(val name: String)\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EnumEntryName",
          "displayName": "Enum entry naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports enum entry names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "TestFunctionName",
          "displayName": "Test function naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports test function names that do not follow the <a href=\"https://kotlinlang.org/docs/coding-conventions.html#names-for-test-methods\">recommended naming conventions</a>.\n</body>\n</html>"
        },
        {
          "shortName": "ConstPropertyName",
          "displayName": "Const property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>const</code> property names that do not follow the recommended naming conventions.\n<p>\n    Consistent naming allows for easier code reading and understanding.\n    According to the <a href=\"https://kotlinlang.org/docs/coding-conventions.html#property-names\">Kotlin official style guide</a>,\n    <code>const</code> properties should be named in a CAPITAL_CASE.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  const val Planck: Double = 6.62607015E-34\n</code></pre>\n<p>A quick-fix is suggested to rename the property:</p>\n<pre><code>\n  const val PLANCK: Double = 6.62607015E-34\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PrivatePropertyName",
          "displayName": "Private property naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports private property names that do not follow the recommended naming conventions.\n</body>\n</html>"
        },
        {
          "shortName": "PackageName",
          "displayName": "Package naming convention",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports package names that do not follow the naming conventions.\n<p>You can specify the required pattern in the inspection options.</p>\n<p><a href=\"https://kotlinlang.org/docs/coding-conventions.html#naming-rules\">Recommended naming conventions</a>: names of packages are always lowercase and should not contain underscores.</p>\n<p><b>Example:</b></p>\n<code>org.example.project</code>\n<p>Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either just concatenate them together or use camel case</p>\n<p><b>Example:</b></p>\n<code>org.example.myProject</code>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "FreeMarker",
      "inspections": [
        {
          "shortName": "FtlDeprecatedBuiltInsInspection",
          "displayName": "Built-in is deprecated",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports deprecated built-ins (for example, <code>default</code>, <code>exists</code>, <code>if_exists</code>, <code>web_safe</code>).</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlReferencesInspection",
          "displayName": "Unresolved reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved FreeMarker references.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlWellformednessInspection",
          "displayName": "Directive is malformed",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports malformed FreeMarker directives (for example, wrong nesting, missing closing tags, and so on).</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlImportCallInspection",
          "displayName": "Unresolved external call",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved <code>#macro</code> and <code>#function</code> directives located in other files.</p>\n<p>The quick-fix suggests using <code>#import</code> or <code>#include</code> for the required files.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlCallsInspection",
          "displayName": "Invalid call directive",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports FreeMarker calls that do not match the macro declaration (for example, missing parameters, wrong type, and so on).</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlTypesInspection",
          "displayName": "Incorrect expression type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports incorrect FreeMarker expression types.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FtlFileReferencesInspection",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.freemarker",
          "pluginVersion": "212.4746.2",
          "language": "FTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports unresolved FreeMarker file references in <code>#include</code> and <code>#import</code> directives.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Class metrics",
      "inspections": [
        {
          "shortName": "ConstructorCount",
          "displayName": "Class with too many constructors",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class where the number of constructors exceeds the specified maximum.\n<p>Classes with too many constructors are prone to initialization errors, and often modeling such a class as multiple subclasses is preferable.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Constructor count limit</b> field to specify the maximum allowed number of constructors in a class.</li>\n  <li>Use the <b>Ignore deprecated constructors</b> option to avoid adding deprecated constructors to the total count.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "FieldCount",
          "displayName": "Class with too many fields",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class where the number of fields exceeds the specified maximum.\n<p>Classes with a large number of fields are often trying to do too much. Consider splitting such a class into multiple smaller classes.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Field count limit</b> field to specify the maximum allowed number of fields in a class.</li>\n  <li>Use the <b>Include constant fields in count</b> option to indicate whether constant fields should be counted.</li>\n  <li>By default only immutable <code>static final</code> objects are counted as constants. Use the <b>'static final' fields count as constant</b> option\n    to count any <code>static final</code> field as constant.</li>\n  <li>Use the <b>Include enum constants in count</b> option to specify whether <code>enum</code> constants in <code>enum</code> classes\n    should be counted.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassMethodCount",
          "displayName": "Anonymous inner class with too many methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an anonymous inner class where the number of methods exceeds the specified maximum.\n<p>Anonymous classes with numerous methods may be\n  difficult to understand and should be promoted to become named inner classes.</p>\n<!-- tooltip end -->\n<p>Use the <b>Method count limit</b> field to specify the maximum allowed number of methods in an anonymous inner class.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassInheritanceDepth",
          "displayName": "Class too deep in inheritance tree",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that is too deep in the inheritance hierarchy.\n<p>Classes that are too deeply inherited may be confusing and indicate that refactoring is necessary.</p>\n<p>All superclasses from a library are treated as a single superclass, libraries are considered unmodifiable.</p>\n<!-- tooltip end -->\n<p>Use the <b>Inheritance depth limit</b> field to specify the maximum inheritance depth for a class.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassComplexity",
          "displayName": "Overly complex class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class where total complexity exceeds the specified maximum.\n<p>The total complexity of a class is the sum of cyclomatic complexities of all the methods\n  and initializers the class declares. Inherited methods and initializers are not counted\n  toward the total complexity.</p>\n<p>Too high complexity indicates that the class should be refactored into several smaller classes.</p>\n<!-- tooltip end -->\n<p>Use the <b>Cyclomatic complexity limit</b> field below to specify the maximum allowed complexity for a class.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassNestingDepth",
          "displayName": "Inner class too deeply nested",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class where the number of nested inner classes exceeds the specified maximum.\n<p>Nesting inner classes inside other inner classes is confusing and indicates that refactoring may be necessary.</p>\n<!-- tooltip end -->\n<p>Use the <b>Nesting limit</b> field to specify the maximum allowed nesting depth for a class.<p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodCount",
          "displayName": "Class with too many methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class where the number of methods exceeds the specified maximum.\n<p>Classes with too many methods are often trying to 'do too much'. Consider splitting such a class into multiple smaller classes.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Method count limit</b> field to specify the maximum allowed number of methods in a class.</li>\n  <li>Use the <b>Ignore simple getter and setter methods</b> option to ignore simple getters and setters in method count.</li>\n  <li>Use the <b>Ignore methods overriding/implementing a super method</b> to ignore methods that override or implement a method\n    from a superclass.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassComplexity",
          "displayName": "Overly complex anonymous class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an anonymous inner class where total complexity exceeds the specified maximum.\n<p>The total complexity of a class is the sum of cyclomatic complexities of all the methods\n  and initializers the class declares. Inherited methods and initializers are not counted\n  toward the total complexity.</p>\n<p>Anonymous classes should have very low complexity otherwise they are hard to understand and should be promoted to become named inner classes.</p>\n<!-- tooltip end -->\n<p>Use the <b>Cyclomatic complexity limit</b> field to specify the maximum allowed complexity for a class.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassCoupling",
          "displayName": "Overly coupled class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that references too many other classes.\n<p>Classes with too high coupling can be very fragile, and should probably be split into smaller classes.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Class coupling limit</b> field to specify the maximum allowed coupling for a class.</li>\n  <li>Use the <b>Include couplings to java system classes</b> option to specify whether references to system classes\n    (those in the <code>java.</code>or <code>javax.</code> packages) should be counted.</li>\n  <li>Use the <b>Include couplings to library classes</b> option to specify whether references to any library classes should be counted.</li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Kotlin",
      "inspections": [
        {
          "shortName": "KotlinInvalidBundleOrProperty",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references to <code>.properties</code> file keys and resource bundles in Kotlin files.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinTestJUnit",
          "displayName": "kotlin-test-junit could be used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usage of <code>kotlin-test</code> and <code>junit</code> dependency without <code>kotlin-test-junit</code>.\n<p>It is recommended to use <code>kotlin-test-junit</code> dependency to work with Kotlin and JUnit.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DifferentStdlibGradleVersion",
          "displayName": "Kotlin library and Gradle plugin versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports different kotlin stdlib and compiler versions.\n</body>\n</html>"
        },
        {
          "shortName": "DifferentKotlinGradleVersion",
          "displayName": "Kotlin Gradle and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports that different IDE and Gradle plugin versions are used.\n<p>This can cause inconsistencies between IDE and Gradle builds in error reporting or code behaviour.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedMavenDependency",
          "displayName": "Deprecated library is used in Maven",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated maven dependency.\n</body>\n</html>"
        },
        {
          "shortName": "DifferentKotlinMavenVersion",
          "displayName": "Maven and IDE plugins versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the Maven plugin version of the Kotlin compiler that is different from the one that is used in the IDE plugin.\n<p>This inconsistency may lead to different error reporting behavior in the IDE and the compiler</p>\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedGradleDependency",
          "displayName": "Deprecated library is used in Gradle",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated dependencies in Gradle build scripts.\n<p><b>Example:</b></p>\n<pre><code>\n  dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-jre7:1.2.0\"\n  }\n</code></pre>\n<p>After the fix applied:</p>\n<pre><code>\n  dependencies {\n      compile \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.2.0\"\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DifferentMavenStdlibVersion",
          "displayName": "Library and maven plugin versions are different",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports different Kotlin stdlib and compiler versions.\n<p>Using different versions of the Kotlin compiler and the standard library can lead to unpredictable\n    runtime problems and should be avoided.</p>\n</body>\n</html>"
        },
        {
          "shortName": "KotlinMavenPluginPhase",
          "displayName": "Kotlin Maven Plugin misconfigured",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Reports kotlin-maven-plugin configuration issues"
        }
      ]
    },
    {
      "name": "Control flow issues",
      "inspections": [
        {
          "shortName": "NestedSwitchStatement",
          "displayName": "Nested 'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports nested <code>switch</code> statements or expressions.\n<p>Nested <code>switch</code> statements\nmay result in extremely confusing code. These statements may be extracted to a separate method.</p>\n<p>Example:</p>\n<pre><code>\n  int res = switch (i) {\n            case 0 -> 0;\n            default -> switch (i) {\n                case 100 -> 0;\n                default -> i;\n            };\n        };\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ContinueStatementWithLabel",
          "displayName": "'continue' statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>continue</code> statements with labels.\n<p>Labeled <code>continue</code> statements complicate refactoring and can be confusing.</p>\n<p>Example:</p>\n<pre><code>\n  void handle(List&lt;String&gt; strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if ('s' == ch) continue outer;\n        handleChar(ch);\n      }\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "BreakStatementWithLabel",
          "displayName": "'break' statement with label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>break</code> statements with labels.\n<p>Labeled <code>break</code> statements complicate refactoring and can be confusing.</p>\n<p>Example:</p>\n<pre><code>\n  void handle(List&lt;String&gt; strs) {\n    outer:\n    for (String s: strs) {\n      for (char ch : s.toCharArray()) {\n        if ('s' == ch) break outer;\n        handleChar(ch);\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoopStatementsThatDontLoop",
          "displayName": "Loop statement that does not loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any instance of <code>for</code>,\n<code>while</code>, and <code>do</code> statements whose\nbodies will be executed once at most. Normally, this is an indication of a bug.\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore enhanced for loops</b> option to ignore the foreach loops.\nThey are sometimes used to perform an action only on the first item of an iterable in a compact way.\n</p>\n<p>Example:</p>\n<pre><code>\n  <b>for</b> (String s : stringIterable) {\n    doSomethingOnFirstString(s);\n    <b>break</b>;\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "EnumSwitchStatementWhichMissesCases",
          "displayName": "Enum 'switch' statement that misses case",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements over enumerated types that are not exhaustive.\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore switch statements with a default branch </b> option to ignore <code>switch</code>\n  statements that have a <code>default</code> branch.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FallthruInSwitchStatement",
          "displayName": "Fallthrough in 'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports 'fall-through' in a <code>switch</code> statement.\n<p>Fall-through occurs when a series of executable statements after a <code>case</code> label is not guaranteed\nto transfer control before the next <code>case</code> label. For example, this can happen if the branch is missing a <code>break</code> statement.\nIn that case, control falls through to the statements after\nthat <code>switch</code> label, even though the <code>switch</code> expression is not equal to\n  the value of the fallen-through label. While occasionally intended, this construction is confusing and is often the result of a typo.</p>\n<p>\nThis inspection ignores any fall-through commented with a text matching the regex pattern <code>(?i)falls?\\s*thro?u</code>.\n</p>\n<p>There is a fix that adds a <code>break</code> to the branch that can fall through to the next branch.</p>\n<p>Example:</p>\n<pre><code>\n    switch(x) {\n      case (4):\n          if (condition) {\n              System.out.println(\"3\");\n              // no break here\n          } else {\n              break;\n          }\n      case (6):\n          System.out.println(\"4\");\n    }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n    switch(x) {\n        case (4):\n            if (condition) {\n                System.out.println(\"3\");\n            } else {\n                break;\n            }\n            break;\n        case (6):\n            System.out.println(\"4\");\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NestedConditionalExpression",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports nested conditional expressions as they\nmay result in extremely confusing code.\n<p>Example:</p>\n<pre><code>\n  int y = a == 10 ? b == 20 ? 10 : a : b;\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms. Such expressions may be confusing and bug-prone.\n<p>Example:</p>\n<pre><code>\n  cond(x1) &amp;&amp; cond(x2) ^ cond(x3) &amp;&amp; cond(x4);\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Maximum number of terms</b> field to specify the maximum number of terms allowed in a boolean expression.</li>\n  <li>Use the <b>Ignore pure conjunctions and disjunctions</b> option to ignore boolean expressions which use only a single boolean operator repeatedly.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditional",
          "displayName": "Conditional expression with negated condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\n<p>Flipping the order of the conditional expression branches usually increases the clarity of such statements.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore '!= null' comparisons</b> and <b>Ignore '!= 0' comparisons</b> options to ignore comparisons of the form\n  <code>obj != null</code> or <code>num != 0</code>.\n  Since <code>obj != null</code> effectively means \"obj exists\",\n  the meaning of the whole expression does not involve any negation\n  and is therefore easy to understand.\n<p>\n  The same reasoning applies to <code>num != 0</code> expressions, especially when using bit masks.\n<p>\n  These forms have the added benefit of mentioning the interesting case first.\n  In most cases, the value for the <code>== null</code> branch is <code>null</code> itself,\n  like in the following examples:\n\n<pre><code>\n    static String getName(Person p) {\n        return p != null ? p.getName() : null;\n    }\n\n    static String getExecutableString(int fileMode) {\n        return (fileMode & 0b001001001) != 0 ? \"executable\" : \"non-executable\";\n    }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "LabeledStatement",
          "displayName": "Labeled statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports labeled statements that can complicate refactorings and control flow of the method.\n<p>Example:</p>\n<pre><code>\n  label:\n  while (true) {\n      // code\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "NegatedConditionalExpression",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions which are negated with a prefix expression, as\nsuch constructions may be confusing.\n<p>There is a fix that propagates the outer negation to both branches.</p>\n<p>Example:</p>\n<pre>!(i == 1 ? a : b)</pre>\n<p>After the quick-fix is applied:</p>\n<pre>i == 1 ? !a : !b</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NegatedEqualityExpression",
          "displayName": "Negated equality expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports equality expressions which are negated by a prefix expression.\n<p>Such expressions can be simplified using the <code>!=</code> operator.</p>\n<p>Example:</p>\n<pre>!(i == 1)</pre>\n<p>After the quick-fix is applied:</p>\n<pre>i != 1</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NegatedIfElse",
          "displayName": "'if' statement with negated condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>if</code> statements\nthat contain <code>else</code> branches and whose conditions are negated.\n<p>Flipping the order of the <code>if</code> and <code>else</code>\n  branches usually increases the clarity of such statements.</p>\n<p>There is a fix that inverts the current <code>if</code> statement.</p>\n<p>Example:</p>\n<pre><code>\n    void m(Object o1, Object o2) {\n        if (o1 != o2) {\n            System.out.println(1);\n        }\n        else {\n            System.out.println(2);\n        }\n    }\n</code></pre>\n<p>After applying the quick-fix:</p>\n<pre>\n    void m(Object o1, Object o2) {\n        if (o1 == o2) {\n            System.out.println(2);\n        } else {\n            System.out.println(1);\n        }\n    }\n</pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore '!= null' comparisons</b> option to ignore comparisons of the <code>!= null</code> form.</p>\n<p>Use the <b>Ignore '!= 0' comparisons</b> option to ignore comparisons of the <code>!= 0</code> form.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithIdenticalBranches",
          "displayName": "'if' statement with identical branches",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements in which common parts can be extracted from the branches.\n<p>These common parts are independent from the condition and make <code>if</code> statements harder to understand.</p>\n<p>Example:</p>\n<pre><code>\n  if (x &gt; 12) {\n    doSomethingBefore();\n    doSomethingDifferent1();\n    doSomethingAfter();\n  } else {\n    doSomethingBefore();\n    doSomethingDifferent2();\n    doSomethingAfter();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  doSomethingBefore();\n  if (x &gt; 12) {\n    doSomethingDifferent1();\n  } else {\n    doSomethingDifferent2();\n  }\n  doSomethingAfter();\n</code></pre>\n<!-- tooltip end -->\n<p><small>Updated in 2018.1</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "LoopWithImplicitTerminationCondition",
          "displayName": "Loop with implicit termination condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any <b>while</b>,\n<b>do-while</b> and <b>for</b>\nloops which have the constant <b>true</b> as their\nonly condition, but which still can be terminated by a containing\n<b>if</b> statement which can break out of the loop.\nThis <b>if</b> statement must be the first or only statement\nin a <b>while</b> or <b>for</b>\nloops and the last or only statement in a <b>do-while</b> loop.\nSuch a loop would be clearer if the if statement was removed and its condition\nwas made an explicit loop condition.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LoopConditionNotUpdatedInsideLoop",
          "displayName": "Loop variable not updated inside loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any variables and parameters that are used in a loop condition\nand are not updated inside the loop.\n<p>Such variables and parameters are usually used by mistake as they\n  may cause an infinite loop if they are executed.</p>\n<p>Example:</p>\n<pre><code>\n  void loopDoesNotLoop(boolean b) {\n    while (b) {\n      System.out.println();\n      break;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the <b>Ignore possible non-local changes</b> option to disable this inspection\n  if the condition can be updated indirectly (e.g. via the called method or concurrently from another thread).\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithTooManyBranches",
          "displayName": "Maximum 'switch' branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements or expressions with too many <code>case</code> labels.\n<p>Such a long switch statement may be confusing and should probably be refactored.\n  Sometimes, it is not a problem (for example, a domain is very complicated and has enums with a lot of constants).</p>\n<p>Example:</p>\n<pre><code>\n    switch (x) {\n        case 1 -> {}\n        case 2 -> {}\n        case 3 -> {}\n        case 4 -> {}\n        case 5 -> {}\n        case 6 -> {}\n        case 7 -> {}\n        case 8 -> {}\n        case 9 -> {}\n        case 10 -> {}\n        case 11,12,13 -> {}\n        default -> {}\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Maximum number of branches</b> field to specify the maximum number of <code>case</code> labels expected.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementsWithoutDefault",
          "displayName": "'switch' statement without 'default' branch",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements that do not contain <code>default</code> labels.\n<p>Adding the <code>default</code> label guarantees that all possible scenarios are covered, and it becomes\neasier to make assumptions about the current state of the program.</p>\n<p>\n<!-- tooltip end -->\nNote that by default, the inspection does not report <code>switch</code> statements over enumeration types if all cases are covered.\n  Use the <b>Ignore if all cases of an enum type are covered</b> option if you want to change this behavior.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithTooFewBranches",
          "displayName": "Minimum 'switch' branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements and expressions with too few <code>case</code> labels, and suggests rewriting them as <code>if</code>\nand\n<code>else if</code> statements.\n<p>Example (minimum branches == 3):</p>\n<pre>\n  switch (expression) {\n    case \"foo\" -&gt; foo();\n    case \"bar\" -&gt; bar();\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  if (\"foo\".equals(expression)) {\n    foo();\n  } else if (\"bar\".equals(expression)) {\n    bar();\n  }\n</pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Minimum number of branches</b> field to specify the minimum expected number of <code>case</code> labels.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBooleanExpression",
          "displayName": "Pointless statement or boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary or overly complicated boolean expressions.\n<p>Such expressions include <code>&&</code>-ing with <code>true</code>,\n<code>||</code>-ing with <code>false</code>,\n  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions can be simplified.</p>\n<p>Example:\n<pre><code>\n  <b>boolean</b> a = !(x && <b>false</b>);\n  <b>boolean</b> b = <b>false</b> || x;\n  <b>boolean</b> c = x != <b>true</b>;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>boolean</b> a = <b>true</b>;\n  <b>boolean</b> b = x;\n  <b>boolean</b> c = !x;\n</code></pre>\n<!-- tooltip end -->\n<p>\n<p>Configure the inspection:</p>\nUse the <b>Ignore named constants in determining pointless expressions </b> option to ignore named constants when determining if an expression is pointless.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports double negations that can be simplified.\n<p>Example:</p>\n<pre><code>\n  if (!!functionCall()) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (functionCall()) {}\n</code></pre>\n<p>Example:</p>\n<pre><code>\n  if (!(a != b)) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (a == b) {}\n</code></pre>\n  <!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PointlessNullCheck",
          "displayName": "Unnecessary 'null' check before method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports null checks followed by a method call that will definitely return\n<code>false</code> when <code>null</code> is passed (e.g. <code>Class.isInstance</code>).\n<p>Such a check seems excessive as the method call will always return <code>false</code> in this case.</p>\n<p>Example: </p>\n<pre><code>\n  if (x != null && myClass.isInstance(x)) { ... }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (myClass.isInstance(x)) { ... }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessIndexOfComparison",
          "displayName": "Pointless 'indexOf()' comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless comparison with\n<b>.indexOf()</b> expression. An example of such an expression\nis comparing the result of <b>.indexOf()</b> with numbers less than -1.\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssertionCanBeIf",
          "displayName": "Assertion can be replaced with 'if' statement",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>assert</code> statements and suggests replacing them with\n<code>if</code> statements that throw <code>java.lang.AssertionError</code>.\n<p>Example:</p>\n<pre>\n  assert param != null;\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  if (param == null) throw new AssertionError();\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingElse",
          "displayName": "Redundant 'else'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>else</code> keywords in <code>if</code>&mdash;<code>else</code> statements and statement chains.\n<p>\nThe <code>else</code> keyword is redundant when it cannot be reached because the code in previous branches ends with the\n<code>return</code>, <code>throw</code>, <code>break</code>, or <code>continue</code> statement. In this case,\nthe statements from the <code>else</code> branch can be placed after the <code>if</code> statement, and the\n<code>else</code> keyword can be removed.\n</p>\n<p>Example:</p>\n<pre><code>\n  if (name == null) {\n      throw new IllegalArgumentException();\n  } else {\n      System.out.println(name);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (name == null) {\n      throw new IllegalArgumentException();\n  }\n  System.out.println(name);\n</code></pre>\n<!-- tooltip end -->\n<p>Disable the <b>Report when there are no more statements after the 'if' statement</b> option to ignore the cases in which the <code>if</code>&mdash;<code>else</code> statement is the last statement in a code block.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateCondition",
          "displayName": "Duplicate condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate conditions in &amp;&amp; and || expressions\nand branches of if statements.\nWhile sometimes these duplicate conditions are intended, in most cases they are used due to oversight.\n<p>Example:</p>\n<pre><code>\n  boolean result = digit1 != digit2 || digit1 != digit2;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  To ignore conditions that may produce side effects, use the <b>Ignore conditions with side effects</b> option.\nDisabling this option may lead to false-positives, for example, when the same method returns different values on subsequent invocations.\n</p>\n<p>Example:</p>\n<pre><code>\n  if (iterator.next() != null || iterator.next() != null)\n    System.out.println(\"Got it\");\n  }\n</code></pre>\n<p>Due to possible side effects of <code>iterator.next()</code> (on the example), the warning will only be\n  triggered if the <b>Ignore conditions with side effects</b> option is disabled.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementWithConfusingDeclaration",
          "displayName": "Local variable used and declared in different 'switch' branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables declared in one branch of a <code>switch</code> statement\nand used in another branch. Such declarations can be extremely confusing.\n<p>Example:</p>\n<pre><code>\n    switch(i) {\n      case 2:\n          int x = 0;\n          break;\n      case 3:\n          x = 3;\n          System.out.println(x);\n          break;\n    }\n</code></pre>\n<!-- tooltip end -->\n\n\n</body>\n</html>"
        },
        {
          "shortName": "DefaultNotLastCaseInSwitch",
          "displayName": "'default' not last case in 'switch'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements or expressions in which the <code>default</code> case\ncomes before another case.\n<p>This construct is unnecessarily confusing.\nThere is a quick-fix that moves the <code>default</code> case to the last position.\n  The fix is available only when a given branch has <code>break</code>/<code>yield</code> at the end.</p>\n<p>Example:</p>\n<pre><code>\n  switch (n) {\n      default:\n          System.out.println();\n          break;\n      case 1:\n          break;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  switch (n) {\n    case 1:\n        break;\n    default:\n        System.out.println();\n        break;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditionalExpression",
          "displayName": "Constant conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions in which the condition is either a <code>true</code> or <code>false</code> constant.\nThese expressions sometimes occur as a result of automatic refactorings and may be simplified.\n<p>Example:</p>\n<pre>\n  return true ? \"Yes\" : \"No\";\n</pre>\n<p>After quick-fix is applied:</p>\n<pre>\n  return \"Yes\";\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpressionWithIdenticalBranches",
          "displayName": "Conditional expression with identical branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions with identical <code>then</code> and <code>else</code> branches.\n<p>Such expressions almost certainly indicate bugs. The inspection provides a fix that collapses conditional expressions.</p>\n<p>Example:</p>\n<pre><code>\n  int y = x == 10 ? 4 : 4;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int y = 4;\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IfCanBeAssertion",
          "displayName": "Statement can be replaced with 'assert' or 'Objects.requireNonNull'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements that throw only <code>java.lang.Throwable</code> from a <code>then</code> branch\nand do not have an <code>else</code> branch. Such statements can be converted to more compact <code>assert</code> statements.\n<p>\nThe inspection also reports Guava's <code>Preconditions.checkNotNull()</code>.\n  They can be replaced with a <code>Objects.requireNonNull()</code> call for which a library may not be needed.</p>\n<p>Example:</p>\n<pre><code>\n  <b>if</b> (x == 2) <b>throw new</b> RuntimeException(\"fail\");\n  <b>if</b> (y == null) <b>throw new</b> AssertionError();\n  Preconditions.checkNotNull(z, \"z\");\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>assert</b> x != 2 : \"fail\";\n  Objects.requireNonNull(y);\n  Objects.requireNonNull(z, \"z\");\n</code></pre>\n<!-- tooltip end -->\n<p>By default, this inspection provides a quick-fix in the editor without code highlighting.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "IdempotentLoopBody",
          "displayName": "Idempotent loop body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops whose second and all subsequent iterations do not produce any additional side effects other\nthan the one produced by the first iteration, which can indicate a programming error.\n<p>Such loops may iterate only zero, one, or infinite number of times.\nIf the infinite number of times case is unreachable, such a loop can be replaced with an <code>if</code> statement.\n  Otherwise, there's a possibility that the program can get stuck.</p>\n<p>Example:</p>\n<pre><code>\n    public void foo(String baseName, String names) {\n        int suffix = 1;\n        String name = baseName;\n        while (names.contains(name)) {\n            // error: suffix is not updated making loop body idempotent\n            name = baseName + suffix;\n        }\n    }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "BreakStatement",
          "displayName": "'break' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>break</code> statements that are used in places\nother than at the end of a <code>switch</code> statement branch.\n<p><code>break</code> statements complicate refactoring and can be confusing.</p>\n<p>Example:</p>\n<pre><code>\nvoid foo(List&lt;String&gt; strs) {\n  for (String str : strs) {\n    if (str.contains(\"stop\")) break;\n    handleStr(str);\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalExpression",
          "displayName": "Conditional expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the ternary condition operator and suggests converting them to <code>if</code>/<code>else</code> statements.\n<p>Some code standards prohibit the use of the condition operator.</p>\n<p>Example:</p>\n<pre><code>\n  Object result = (condition) ? foo() : bar();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Object result;\n  if (condition) {\n    comp = foo();\n  }\n  else {\n    comp = bar();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Ignore for simple assignments and returns </b> option to ignore simple assignments and returns and allow the following constructs:</p>\n<pre>\n  String s = (foo == null) ? \"\" : foo.toString();\n</pre>\n<p>\n  Use the <b>Ignore places where an if statement is not possible </b> option to ignore conditional expressions in contexts in which automatic\n  replacement with an if statement is not possible (for example, when the conditional expression is used as an argument to a\n  <code>super()</code> constructor call).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatement",
          "displayName": "'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements.\n<p><code>switch</code> statements often (but not always) indicate a poor object-oriented design.</p>\n<p>Example:</p>\n<pre><code>\n  switch (i) {\n    // code\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableBooleanExpression",
          "displayName": "Simplifiable boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports boolean expressions that can be simplified.\n<p>Example:</p>\n<pre><code>\n  void f(boolean foo, boolean bar) {\n    boolean b = !(foo ^ bar);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f(boolean foo, boolean bar) {\n    boolean b = foo == bar;\n  }\n</code></pre>\n\n<p>Example:</p>\n<pre><code>\n  void f(boolean foo, boolean bar) {\n    boolean b = (foo && bar) || !foo;\n  }\n  </code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f(boolean foo, boolean bar) {\n    boolean b = !foo || bar;\n  }\n  </code></pre>\n\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalBreakInInfiniteLoop",
          "displayName": "Conditional break inside infinite loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional breaks at the beginning or at the end of a loop and suggests using a loop condition instead to shorten the code.\n<p>Example:</p>\n<pre><code>\n  <b>while</b> (true) {\n    <b>if</b> (i  == 23) <b>break</b>;\n    i++;\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  <b>while</b> (i != 23) {\n    i++;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopWithMissingComponent",
          "displayName": "'for' loop with missing components",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>for</code> loops\nthat lack initialization, condition, or update clauses. Some coding styles prohibit such loops.\n<p>Example:</p>\n<pre><code>\n  for (int i = 0;;i++) {\n    // body\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore collection iterations</b> option to ignore loops which use an iterator.\nThis is a standard way to iterate over a collection in which the <code>for</code> loop does not have an update clause.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code>, <code>while</code>,\nor <code>do</code> statements that\ncan only exit by throwing an exception. While such statements may be correct, they\noften happen due to coding errors.\n<p>Example:</p>\n<pre>\n  for (;;) {\n  }\n</pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore when placed in Thread.run</b> option to ignore the\n  infinite loop statements inside <code>Thread.run</code>.\nIt may be useful for the daemon threads.\n<p>Example:</p>\n<pre>\n  new Thread(() -&gt; {\n    while (true) {\n    }\n  }).start();\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementWithTooManyBranches",
          "displayName": "'if' statement with too many branches",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>if</code> statements with too many branches.\n<p>Such statements may be confusing and are often a sign of inadequate levels of design\n  abstraction.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Maximum number of branches</b> field to specify the maximum number of branches an <code>if</code> statement is allowed to have.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableConditionalExpression",
          "displayName": "Simplifiable conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions and suggests simplifying them.\n<p>Examples:</p>\n<pre><code>condition ? true : foo &rarr; condition || foo</code></pre>\n<pre><code>condition ? false : foo &rarr; !condition && foo</code></pre>\n<pre><code>condition ? foo : !foo &rarr; condition == foo</code></pre>\n<pre><code>condition ? true : false &rarr; condition</code></pre>\n<pre><code>a == b ? b : a &rarr; a</code></pre>\n<pre><code>result != null ? result : null &rarr; result</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ForLoopReplaceableByWhile",
          "displayName": "'for' loop may be replaced by 'while' loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code> loops that contain neither initialization nor update components, and suggests converting them to <code>while</code>\nloops. This makes the code easier to read.\n<p>Example:</p>\n<pre><code>\n  for(; exitCondition(); ) {\n    process();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  while(exitCondition()) {\n    process();\n  }\n</code></pre>\n<p>The quick-fix is also available for other <code>for</code> loops, so you can replace any <code>for</code> loop with a\n  <code>while</code> loop.</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore 'infinite' for loops without conditions</b> option if you want to ignore <code>for</code>\n  loops with trivial or non-existent conditions.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SwitchStatementDensity",
          "displayName": "'switch' statement with too low of a branch density",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements or expressions\nwith a too low ratio of switch labels to executable statements.\n<p>Such <code>switch</code> statements\nmay be confusing and should probably be refactored.</p>\n\n<p>Example:</p>\n<pre><code>\n    switch (i) { // one case and 5 executable statements -> 20% density\n        case 1:\n            System.out.println(\"1\");\n            System.out.println(\"2\");\n            System.out.println(\"3\");\n            System.out.println(\"4\");\n            System.out.println(\"5\");\n            break;\n    }\n</code></pre>\n<!-- tooltip end -->\n<p>\n<p>Use the <b>Minimum density of branches</b> field to specify the allowed ratio of the switch labels to executable statements.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ContinueStatement",
          "displayName": "'continue' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>continue</code> statements.\n<p><code>continue</code> statements complicate refactoring and can be confusing.</p>\n<p>Example:</p>\n<pre><code>\n  void foo(List&lt;String&gt; strs) {\n    for (String str : strs) {\n      if (str.contains(\"skip\")) continue;\n      handleStr(str);\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBePushedInsideExpression",
          "displayName": "Conditional can be pushed inside branch expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditional expressions with <code>then</code> and <c>else</c> branches that are similar enough so that the expression can be moved\ninside. This action shortens the code.\n<p>Example:</p>\n<pre><code>\n  double g(int a, int b) {\n    return a == b ? Math.cos(0) : Math.cos(1);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  double g(int a, int b) {\n    return Math.cos(a == b ? 0 : 1);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "BooleanExpressionMayBeConditional",
          "displayName": "Boolean expression could be replaced with conditional expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any <code>boolean</code> expressions which can be formulated in a more compact and, arguably, clear way than by using a conditional expression.\n<p>Use the quick-fix to replace the <code>boolean</code> expression by a conditional expression.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  a &amp;&amp; b || !a &amp;&amp; c;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a ? b : c;\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TrivialIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements that can be simplified to a single assignment,\n<code>return</code>, or <code>assert</code> statement.\n<p>Example:</p>\n<pre><code>\n  if (foo()) {\n    return true;\n  } else {\n    return false;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  return foo();\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Ignore chained 'if' statements </b> option if want to hide a warning for chained <code>if</code> statements.</p>\n<p>For example, in the following code the warning will be hidden, but the quick-fix will still be available:</p>\n<pre><code>\n  if (condition1) return true;\n  if (condition2) return false;\n  return true;\n</code></pre>\n<p>Use the <b>Ignore 'assert' statements </b> option if want to hide a warning for <code>if</code> statements\n  containing only <code>assert</code> statement in their bodies.</p>\n<p>For example, in the following code the warning will be hidden:</p>\n<pre><code>\n  if (isTrue()) assert false;\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "LambdaParameterTypeCanBeSpecified",
          "displayName": "Lambda parameter type can be specified",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda parameters that do not have their type specified and suggests\nadding the missing type declarations.\n<p>Example:</p>\n<pre><code>\n  Function&lt;String, Integer&gt; length = a -&gt; a.length();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Function&lt;String, Integer&gt; length = (String a) -&gt; a.length();\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "FillPermitsList",
          "displayName": "Same file subclasses are missing from permits clause of a sealed class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports sealed classes whose permits clauses do not contain some of the subclasses from the same file.\n<p>Example:</p>\n<pre><code>\n  sealed class A {}\n  final class B extends A {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  sealed class A permits B {}\n  final class B extends A {}\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableAnnotation",
          "displayName": "Simplifiable annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports annotations that can be simplified to their 'single element'\nor 'marker' shorthand form.\n<p>Annotations that contain whitespace between the @-sign and the name\n  of the annotation are also reported.</p>\n<p><b>Example:</b></p>\n<pre>\n  @interface Foo { String[] value(); }\n\n  @ Foo({\"foo\"})\n  public String name;\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  @interface Foo { String[] value(); }\n\n  @Foo(\"foo\")\n  public String name;\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedFieldAccess",
          "displayName": "Instance field access not qualified with 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports field access operations that are not qualified with <code>this</code> or some other qualifier.\n<p>\n  Some coding styles mandate that all field access operations are qualified to prevent confusion with local\n  variable or parameter access.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    int foo;\n\n    void bar() {\n      foo += 1;\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    int foo;\n\n    void bar() {\n      this.foo += 1;\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OptionalToIf",
          "displayName": "'Optional' can be replaced with sequence of 'if' statements",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>Optional</code> call chains that can be replaced with a sequence of <code>if</code> statements.\n<p>Example:</p>\n<pre><code>\n  return Optional.ofNullable(name)\n    .map(this::extractInitials)\n    .map(initials -> initials.toUpperCase(Locale.ENGLISH))\n    .orElseGet(this::getDefault);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (name != null) {\n    String initials = extractInitials(name);\n    if (initials != null) return initials.toUpperCase(Locale.ENGLISH);\n  }\n  return getDefault();\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ObjectsEqualsCanBeSimplified",
          "displayName": "Objects.equals() can be replaced with equals()",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Objects.equals(a, b)</code> in which the first argument is statically known to be non-null.\n<p>Such a call can be safely replaced with <code>a.equals(b)</code> or <code>a == b</code> if both arguments are primitives.</p>\n<p>Example:</p>\n<pre><code>\n  String defaultName = \"default\";\n  boolean isDefault = Objects.equals(defaultName, name);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String defaultName = \"default\";\n  boolean isDefault = defaultName.equals(name);\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MissortedModifiers",
          "displayName": "Missorted modifiers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations whose modifiers are not in the canonical\npreferred order (as stated in the Java Language Specification).\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    native public final void foo();\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    public final native void foo();\n  }\n</pre>\n<!-- tooltip end -->\n<p>Use the inspection settings to:</p>\n<ul>\n  <li>\n    <p>\n      toggle the reporting of misplaced annotations:\n      (annotations with <code>ElementType.TYPE_USE</code> <em>not</em> directly\n      before the type and after the modifier keywords, or\n      other annotations <em>not</em> before the modifier keywords).\n      When this option is disabled, any annotation can be positioned before or after the modifier keywords.\n      Modifier lists with annotations in between the modifier keywords will always be reported.\n    </p>\n  </li>\n  <li>\n    <p>\n      specify whether the <code>ElementType.TYPE_USE</code> annotation should be positioned directly before\n      a type, even when the annotation has other targets specified.\n    </p>\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryInterfaceModifier",
          "displayName": "Unnecessary interface modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any redundant modifiers on interfaces or interface components and suggests removing them.\n<p>For example, the <code>abstract</code> and <code>public</code> modifiers are\nredundant and will be reported by the inspection:</p>\n<pre><code>\n  abstract interface Printer {\n    public int size();\n  }\n</code></pre>\n\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ChainedMethodCall",
          "displayName": "Chained method calls",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls whose target is another method call.\n<p><b>Example:</b></p>\n<pre>\n  class X { Y foo() { return new Y(); } }\n  class Y { X bar() { return new X(); } }\n\n  void foo() {\n    Y y = new X().foo(); // Chained method call\n  }\n</pre>\n<!-- tooltip end -->\n<p>Use the inspection options to toggle warnings for the following cases:</p>\n<ul>\n  <li>\n    <p>\n      chained method calls in field initializers,\n      for instance, <code>private Y y = new X().foo();</code>\n    </p>\n  </li>\n  <li>\n    <p>\n      chained method calls operating on the same type,\n      for instance, <code>new StringBuilder().append(\"x: \").append(new X()).append(\"y: \").append(new Y()).toString();</code>.\n    </p>\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalContainsCollection",
          "displayName": "'Optional' contains array or collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>java.util.Optional</code> or <code>com.google.common.base.Optional</code> types with an array or collection type parameter.\n<p>In such cases, it is more clear to just use an empty array or collection to indicate the absence of result.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Optional&lt;List&lt;Integer&gt;&gt; foo() {\n    return Optional.empty();\n  }\n</code></pre>\n<p>This code could look like:</p>\n<pre><code>\n  List&lt;Integer&gt; foo() {\n    return new List&lt;&gt;();\n  }\n  </code></pre>\n<!-- tooltip end -->\n<small>New in 16</small>\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitCallToSuper",
          "displayName": "Implicit call to 'super()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constructors that do not begin with a call to \"super\" constructor or\nanother constructor of the same class.\n<p>Such constructors can be thought of as implicitly beginning with a\n  call to <code>super()</code>. Some coding standards prefer that such calls to\n  <code>super()</code> be made explicitly.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    Foo() {}\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    Foo() {\n      super();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to ignore classes extending directly from <code>Object</code>.\n  For instance:\n</p>\n<pre>\n  class Foo {\n    Foo() {} // Not reported\n  }\n\n  class Bar extends Foo {\n    Bar() {} // Implicit call to 'super()'\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "LiteralAsArgToStringEquals",
          "displayName": "String literal may be 'equals()' qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>String.equals()</code> or <code>String.equalsIgnoreCase()</code> calls\nwith a string literal argument.\n<p>Some coding standards specify that string literals should be the qualifier of <code>equals()</code>, rather than\n  argument, thus minimizing <code>NullPointerException</code>-s.</p>\n<p>A quick-fix is available to exchange the literal and the expression.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  boolean isFoo(String value) {\n    return value.equals(\"foo\");\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean isFoo(String value) {\n    return \"foo\".equals(value);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedStaticUsage",
          "displayName": "Unqualified static access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of static members that is not qualified\nwith the class name.\n<p>\nThis is legal if the static member is in\nthe same class, but may be confusing.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }\n</pre>\n<!-- tooltip end -->\n<p>Use the inspection settings to toggle the reporting for the following items:</p>\n<ul>\n  <li>\n    <p>\n      static fields access<br>\n      <code>void bar() { System.out.println(x); }</code>\n    </p>\n  </li>\n  <li>\n    <p>\n      calls to static methods<br>\n      <code>void bar() { foo(); }</code><br>\n      <code>static void baz() { foo(); }</code>\n    </p>\n  </li>\n</ul>\n<p>\n  You can also configure the inspection to only report static member usage from a non-static context.\n  In the above example, <code>static void baz() { foo(); }</code> will not be reported.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedInnerClassAccess",
          "displayName": "Unnecessarily qualified inner class access",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any references to inner classes that are unnecessarily qualified with the name\nof the enclosing class.\n<p>Such a qualification can be safely removed, which sometimes adds an import for the inner class.</p>\n<p>Example:</p>\n<pre><code>\n  class X {\n     X.Y foo;\n     class Y{}\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class X {\n     Y foo;\n     class Y{}\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore references for which an import is needed</b> option to ignore references to inner classes, where\n  removing the qualification adds an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ControlFlowStatementWithoutBraces",
          "displayName": "Control flow statement without braces",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any <code>if</code>, <code>while</code>, or <code>for</code> statements without braces.\n<p>Braces make the code easier to read and help prevent errors.</p>\n<p>Example:</p>\n<pre><code>\n  if (x &gt; 0) System.out.println(\"x is positive\");\n</code></pre>\n<p>The quick-fix wraps the statement body with braces:</p>\n<pre><code>\n  if (x &gt; 0) {\n    System.out.println(\"x is positive\");\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConstructor",
          "displayName": "Redundant no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary constructors.\n<p>\n  A constructor is unnecessary if it is the only constructor of a class, has no parameters,\n  has the same access modifier as its containing class,\n  and does not perform any initialization except explicitly or implicitly calling the superclass constructor without arguments.\n  Such a constructor can be safely removed as it will be generated by the compiler even if not specified.</p>\n<p><b>Example:</b></p>\n<pre>\n  public class Foo { public Foo() {} }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  public class Foo {}\n</pre>\n<!-- tooltip end -->\n<p>\nUse the inspection settings to ignore unnecessary constructors that have an annotation.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedInnerClassAccess",
          "displayName": "Unqualified inner class access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports references to inner classes that are not qualified with the name\nof the enclosing class.\n<p><b>Example:</b></p>\n<pre>\n  import foo.Foo.Bar;\n\n  class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Bar bar) {}\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    class Bar {}\n  }\n\n  class Baz {\n    void f(Foo.Bar bar) {}\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to ignore references to inner classes within the same class,\n  which therefore do not require an import.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TryStatementWithMultipleResources",
          "displayName": "'try' statement with multiple resources can be split",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>try</code> statements with multiple resources that can be automatically split into\n  multiple try-with-resources statements.\n<p>This conversion can be useful for further refactoring\n(for example, for extracting the nested <code>try</code> statement into a separate method). </p>\n<p>Example:</p>\n<pre><code>\n  try (FileInputStream in = new FileInputStream(\"in.txt\");\n     FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n     /*read and write*/\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try (FileInputStream in = new FileInputStream(\"in.txt\")) {\n    try (FileOutputStream out = new FileOutputStream(\"out.txt\")) {\n      /*read and write*/\n    }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "JoinDeclarationAndAssignmentJava",
          "displayName": "Assignment can be joined with declaration",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variable assignments that can be joined with a variable declaration.\n<p>Example:</p>\n<pre><code>\n  int x;\n  x = 1;\n</code></pre>\n<p>The quick-fix converts the assignment into an initializer:</p>\n<pre><code>\n  int x = 1;\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantFieldInitialization",
          "displayName": "Redundant field initialization",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields explicitly initialized to their default values.\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    int foo = 0;\n    List bar = null;\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    int foo;\n    List bar;\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to only report explicit <code>null</code> initialization, for example:\n</p>\n<pre>\n  class Foo {\n    int foo = 0;     // no warning\n    List bar = null; // redundant field initialization warning\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryParentheses",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any instance of unnecessary parentheses.\n<p>Parentheses are considered unnecessary if the evaluation order of an expression remains\n  unchanged after you remove the parentheses.</p>\n<p>Example:</p>\n<pre><code>\n  int n = 3 + (9 * 8);\n</code></pre>\n<p>After quick-fix is applied:</p>\n<pre><code>\n  int n = 3 + 9 * 8;\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore clarifying parentheses</b> option to ignore parentheses that help clarify a binary\n    expression. Parentheses are clarifying if the parenthesized expression is an\n    <code>instanceof</code> expression that is a part of a larger expression or has a different operator than the parent expression.</li>\n  <li>Use the <b>Ignore parentheses around the condition of conditional expressions</b> option to ignore any\n    parentheses around the condition of conditional expressions. Some coding standards specify that all such\n    conditions must be surrounded by parentheses.</li>\n  <li>\n    Use the <b>Ignore parentheses around single no formal type lambda parameter</b> option to ignore parentheses\n    around a single lambda parameter within a lambda expression.\n  </li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "LambdaCanBeReplacedWithAnonymous",
          "displayName": "Lambda can be replaced with anonymous class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions that can be replaced with anonymous classes.\n<p>\n  Expanding lambda expressions to anonymous classes may be useful if you need to implement other\n  methods inside an anonymous class or if you need to downgrade to one of the previous Java versions.\n</p>\n<p>Example:</p>\n<pre><code>\n  s -> System.out.println(s)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>new Consumer&lt;String&gt;() {\n  @Override\n  public void accept(String s) {\n    System.out.println(s);\n  }\n}</code></pre>\n<!-- tooltip end -->\n<p>This inspection is available in Java 8 and later.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionalCanBeOptional",
          "displayName": "Conditional can be replaced with Optional",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports null-check conditions and suggests replacing them with <code>Optional</code> chains.\n<p>Example:</p>\n<pre><code>\n  return str == null ? \"\" : str.trim();\n</code></pre>\n<p>After applying the quick-fix:</p>\n<pre><code>return Optional.ofNullable(str).map(String::trim).orElse(\"\");\n</code></pre>\n<p>While the replacement is not always shorter, it could be helpful for further refactoring\n  (for example, for changing the method return value to <code>Optional</code>).</p>\n<p>Note that when a not-null branch of the condition returns null, the corresponding mapping step will\n  produce an empty <code>Optional</code> possibly changing the semantics. If it cannot be statically\n  proven that semantics will be preserved, the quick-fix action name will contain the \"(may change semantics)\"\n  notice, and the inspection highlighting will be turned off.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ReturnSeparatedFromComputation",
          "displayName": "'return' separated from the result computation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>return</code> statements that return a local variable in which the value of the variable is computed\nsomewhere else within the same code block with the <code>return</code> statement.\n<p>The quick-fix inlines the returned variable by moving the return statement to the location in which the value\n  of the variable is computed.\n  When the returned value can't be inlined into the <code>return</code> statement, \n  the quick-fix attempts to move the return statement as close to the computation of the returned value as possible.</p>\n<p>Example:</p>\n<pre><code>\n  int n = -1;\n  for (int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n      n = i;\n      break;\n    }\n  }\n  return n;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int n = -1;\n  for (int i = 0; i &lt; a.length; i++) {\n    if (a[i] == b) {\n      return i;\n    }\n  }\n  return n;\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingOctalEscape",
          "displayName": "Confusing octal escape sequence",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports string literals containing an octal escape sequence immediately followed by\na digit.\n<p>Such strings may be confusing, and are often the result of errors in escape code creation.</p>\n<p><b>Example:</b></p>\n<pre>\n  System.out.println(\"\\1234\"); // Octal escape sequence '\\123' immediately followed by a digit\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticallyImportedElement",
          "displayName": "Unnecessarily qualified statically imported element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usage of statically imported members qualified with\ntheir containing class name.\n<p>Such qualification is unnecessary and can be removed\n  because statically imported members can be accessed directly by member name.</p>\n<p><b>Example:</b></p>\n<pre>\n  import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(Test.WIDTH);\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  import static foo.Test.WIDTH;\n\n  class Bar {\n    void bar() {\n      System.out.println(WIDTH);\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryCallToStringValueOf",
          "displayName": "Unnecessary conversion to String",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to static methods like <code>String.valueOf()</code> or <code>Integer.toString()</code> when they are used in\n a string concatenation or as an argument of a library method in which the explicit string conversion is not needed.\n<p>Example:</p>\n<pre>\n  System.out.println(\"Number: \" + Integer.toString(count));\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  System.out.println(\"Number: \" + count);\n</pre>\n<!-- tooltip end -->\n<p>Library methods in which explicit string conversion is considered redundant:</p>\n<ul>\n  <li>\n    Classes <code>java.io.PrintWriter</code>, <code>java.io.PrintStream</code>\n    <ul><li><code>print()</code>, <code>println()</code></li></ul>\n  </li>\n  <li>\n    Classes <code>java.lang.StringBuilder</code>, <code>java.lang.StringBuffer</code>\n    <ul><li><code>append()</code></li></ul>\n  </li>\n\n  <li>\n    Class <code>org.slf4j.Logger</code>\n    <ul>\n      <li><code>trace()</code>, <code>debug()</code>, <code>info()</code>, <code>warn()</code>, <code>error()</code></li>\n    </ul>\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ListIndexOfReplaceableByContains",
          "displayName": "'List.indexOf()' expression is replaceable with 'contains()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any <code>List.indexOf()</code>\nexpressions that can be replaced with the \n  <code>List.contains()</code> method.\n<p>Example:</p>\n<pre><code>\n  boolean hasEmptyString(List&lt;String&gt; list) {\n    // Warning: can be simplified\n    return list.indexOf(\"\") &gt;= 0;\n  }\n</code></pre>\n<p>The provided quick-fix replaces the <code>indexOf</code> call with the <code>contains</code> call:</p>\n<pre><code>\n  boolean hasEmptyString(List&lt;String&gt; list) {\n    // Quick-fix is applied\n    return list.contains(\"\");\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReturnThis",
          "displayName": "Return of 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods returning <code>this</code>.\n<p>\n  While such a return is valid, it is rarely necessary, and usually indicates that the method is intended to be used\n  as part of a chain of similar method calls (for example, <code>buffer.append(\"foo\").append(\"bar\").append(\"baz\")</code>).\n  Such chains are frowned upon by many coding standards.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  public Builder append(String str) {\n    // [...]\n    return this;\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OptionalAssignedToNull",
          "displayName": "Null value for Optional type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>null</code> assigned to <code>Optional</code> variable or returned from method returning <code>Optional</code>.\n<p>It's recommended that you use <code>Optional.empty()</code> (or <code>Optional.absent()</code> for Guava) to denote an empty value.</p>\n<p>Example:</p>\n<pre><code>\n  Optional&lt;Integer&gt; foo(boolean flag) {\n    return flag ? Optional.of(42) : null;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Optional&lt;Integer&gt; foo(boolean flag) {\n    return flag ? Optional.of(42) : Optional.empty();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the <b>Report comparison of Optional with null</b> option to also report comparisons like <code>optional == null</code>. While in rare cases (e.g. lazily initialized\n  optional field) this might be correct, optional variable is usually never null, and probably <code>optional.isPresent()</code> was\n  intended.\n</p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableIfStatement",
          "displayName": "'if' statement can be replaced with conditional or boolean expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements that can be replaced with conditions using the <code>&&</code>, <code>||</code>,\n<code>==</code>, <code>!=</code>, or <code>?:</code> operator.\n<p>The result is usually shorter, but not always clearer, so it's not advised to apply the fix  in every case.</p>\n<p>Example:</p>\n<pre><code>\n  if (condition) return true; else return foo;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  return condition || foo;\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n<li>\n  Use the <b>Don't suggest '?:' operator</b> option to disable the warning when the <code>?:</code> operator is suggested. In this case, only\n  <code>&&</code>, <code>||</code>, <code>==</code>, and <code>!=</code> suggestions will be highlighted. The\n  quick-fix will still be available in the editor.\n</li>\n<li>\n  Use the <b>Ignore chained 'if' statements</b> option to disable the warning for <code>if-else</code> chains. The quick-fix will\n  still be available in the editor.\n</li>\n</ul>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodRefCanBeReplacedWithLambda",
          "displayName": "Method reference can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method references, like <code>MyClass::myMethod</code> and <code>myObject::myMethod</code>,\n  and suggests replacing them with an equivalent lambda expression.\n<p>Lambda expressions can be easier to modify than method references.</p>\n<p>Example:</p>\n<pre><code>\n  System.out::println\n</code></pre>\n<p>After the quick-fix is applied: </p>\n<pre><code>\n  s -&gt; System.out.println(s)\n</code></pre>\n<!-- tooltip end -->\n<p>By default, this inspection does not highlight the code in the editor, but only provides a quick-fix.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CharsetObjectCanBeUsed",
          "displayName": "Standard 'Charset' object can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods and constructors in which constant charset <code>String</code> literal (for example, <code>\"UTF-8\"</code>) can be replaced with\nthe predefined <code>StandardCharsets.UTF_8</code> code.\n<p>The code after the fix may work faster, because the charset lookup becomes unnecessary.\n  Also, catching <code>UnsupportedEncodingException</code> may become unnecessary as well. In this case,\n  the catch block will be removed automatically.</p>\n<p>Example:</p>\n<pre><code>\n  try {\n    byte[] bytes = \"str\".getBytes(\"UTF-8\");\n  } catch (UnsupportedEncodingException e) {\n  }\n</code></pre>\n<p>After quick-fix is applied:</p>\n<pre><code>\n  byte[] bytes = \"str\".getBytes(StandardCharsets.UTF_8);\n</code></pre>\n<!-- tooltip end -->\n<p>The inspection is available in Java 7 and later.</p>\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CallToStringConcatCanBeReplacedByOperator",
          "displayName": "Call to 'String.concat()' can be replaced with '+'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.String.concat()</code>.\n<p>\n  Such calls can be replaced with the <code>+</code> operator for clarity and possible increased\n  performance if the method was invoked on a constant with a constant argument.</p>\n<p><b>Example:</b></p>\n<pre>\n  String foo(String name) {\n    return name.concat(\"foo\");\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String foo(String name) {\n    return name + \"foo\";\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MultiCatchCanBeSplit",
          "displayName": "Multi-catch can be split into separate catch blocks",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports multi-<code>catch</code> sections and suggests splitting them into separate <code>catch</code> blocks.\n<p>Example:</p>\n<pre><code>\n  try {\n    int i = getIndex();\n  } catch (NullPointerException|IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  try {\n    int i = getIndex();\n  } catch (NullPointerException e) {\n    e.printStackTrace();\n  } catch (IndexOutOfBoundsException e) {\n    e.printStackTrace();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantExpression",
          "displayName": "Constant expression can be evaluated",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports compile-time constant expressions and suggests replacing them with their\n  actual values. For example, you will be prompted to replace \"2 + 2\" with \"4\".\n\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SizeReplaceableByIsEmpty",
          "displayName": "'size() == 0' replaceable with 'isEmpty()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>.size()</code> or <code>.length()</code>\ncomparisons with a <code>0</code> literal that can be replaced with a call to <code>.isEmpty()</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  boolean emptyList = list.size() == 0;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean emptyList = list.isEmpty();\n  </code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignored classes</b> table to add classes for which any <code>.size()</code> or <code>.length()</code> comparisons should not be replaced.\n</p>\n<p>Use the <b>Ignore expressions which would be replaced with <code>!isEmpty()</code></b> option to ignore any expressions which would be replaced with <code>!isEmpty()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsCalledOnEnumConstant",
          "displayName": "'equals()' called on enum value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>equals()</code> calls on enum constants.\n<p>Such calls can be replaced by an identity comparison (<code>==</code>) because two\n  enum constants are equal only when they have the same identity.</p>\n<p>A quick-fix is available to change the call to a comparison.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  boolean foo(MyEnum value) {\n    return value.equals(MyEnum.FOO);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean foo(MyEnum value) {\n    return value == MyEnum.FOO;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SingleElementAnnotation",
          "displayName": "Non-normalized annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports annotations in a shorthand form and suggests rewriting them in a normal form with an attribute name.\n<p>Example:</p>\n<pre><code>\n  @SuppressWarnings(\"foo\")\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @SuppressWarnings(value = \"foo\")\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryEnumModifier",
          "displayName": "Unnecessary enum modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any redundant modifier on enumerated classes or its components.\n<p>Example:</p>\n<pre><code>\npublic enum UnnecessaryEnumModifier {\n    Red, Green, Blue;\n\n    static enum Inner {\n        A, B, C\n    }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFullyQualifiedName",
          "displayName": "Unnecessary fully qualified name",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports fully qualified class names that can be shortened.\n<p>The quick-fix shortens fully qualified names and adds import statements if necessary.</p>\n<p>Example:</p>\n<pre><code>\n  class ListWrapper {\n    java.util.List&lt;Integer&gt; l;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  import java.util.List;\n  class ListWrapper {\n    List&lt;Integer&gt; l;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n\n<p>\n  Use the <b>Ignore in Java 9 module statements</b> option to ignore fully qualified names inside the Java 9\n  <code>provides</code> and <code>uses</code> module statements.\n<p>\n  In <a href=\"settings://preferences.sourceCode.Java?JavaDoc%20Inner\">Settings | Editor | Code Style | Java | Imports</a>,\n  use the following options to configure the inspection:</p>\n<ul>\n  <li>Use the <b>Insert imports for inner classes</b> option if references to inner classes should be qualified with the outer class.</li>\n  <li>Use the <b>Use fully qualified class names in JavaDoc</b> option to allow fully qualified names in Javadocs.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "SingleStatementInBlock",
          "displayName": "Code block contains single statement",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the control flow statements with a single statement in the code block and\nsuggests removing the braces from the statement body.\n<p>Example:</p>\n<pre><code>\n  if (x > 0) {\n    System.out.println(\"x is positive\");\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (x > 0) System.out.println(\"x is positive\");\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SwitchLabeledRuleCanBeCodeBlock",
          "displayName": "Labeled switch rule can have code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the rules of <code>switch</code> expressions or enhanced <code>switch</code> statements\nthat can be converted to code blocks.\n<p>Example:</p>\n<pre><code>\n  String message = switch (errorCode) {\n    case 404 -> \"Not found!\";\n    ...\n  };\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String message = switch (errorCode) {\n    case 404 -> {\n                yield \"Not found!\";\n            }\n    ...\n  };\n</code></pre>\n<!-- tooltip end -->\n<p>The inspection only reports if the language level of the project or module is 14 or higher.</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StreamToLoop",
          "displayName": "Stream API call chain can be replaced with loop",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Stream API chains, <code>Iterable.forEach</code>, and <code>Map.forEach</code> calls that can be automatically converted into classical loops.\n<p>Example:</p>\n<pre><code>\n  String joinNonEmpty(List&lt;String&gt; list) {\n    return list.stream() // Stream can be converted to loop\n      .filter(s -> !s.isEmpty())\n      .map(String::trim)\n      .collect(Collectors.joining(\", \"));\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String joinNonEmpty(List&lt;String&gt; list) {\n    StringJoiner joiner = new StringJoiner(\", \");\n    for (String s : list) {\n      if (!s.isEmpty()) {\n        String trim = s.trim();\n        joiner.add(trim);\n      }\n    }\n    return joiner.toString();\n  }\n</code></pre>\n<p>\n  Note that sometimes this inspection might cause slight semantic changes.\n  Special care should be taken when it comes to short-circuiting, as it's not specified how many elements will be actually read when\n  the stream short-circuits.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Iterate unknown Stream sources via Stream.iterator()</b> option to suggest conversions for streams with unrecognized source.\n  In this case, iterator will be created from the stream.\n  For example, when checkbox is selected, the conversion will be suggested here:</p>\n<pre><code>\n  List&lt;ProcessHandle&gt; handles = ProcessHandle.allProcesses().collect(Collectors.toList());</code></pre>\n<p>In this case, the result will be as follows:</p>\n<pre><code>\n  List&lt;ProcessHandle&gt; handles = new ArrayList&lt;&gt;();\n  for (Iterator&lt;ProcessHandle&gt; it = ProcessHandle.allProcesses().iterator(); it.hasNext(); ) {\n    ProcessHandle allProcess = it.next();\n    handles.add(allProcess);\n  }\n</code></pre>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryToStringCall",
          "displayName": "Unnecessary call to 'toString()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>toString()</code> that are used in the following cases:\n<ul>\n  <li>In string concatenations</li>\n  <li>In the <code>java.lang.StringBuilder#append()</code> or <code>java.lang.StringBuffer#append()</code> methods</li>\n  <li>In the methods of <code>java.io.PrintWriter</code> or <code>java.io.PrintStream</code></li>\n  <li>in the methods <code>org.slf4j.Logger</code></li>\n</ul>\n<p>In these cases, conversion to string will be handled by the underlying library methods, and the explicit call to <code>toString()</code> is not needed.</p>\n<p>Example:</p>\n<pre>\n  System.out.println(this.toString())\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  System.out.println(this)\n</pre>\n<!-- tooltip end -->\n<p>\n  Note that without the <code>toString()</code> call, the code semantics might be different: if the expression is null,\n  then the <code>null</code> string will be used instead of throwing a <code>NullPointerException</code>.</p>\n  <p>Use the <b>Report only when qualifier is known to be not-null</b> option to avoid warnings for the values that could potentially be null.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterExtendsObject",
          "displayName": "Type parameter explicitly extends 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any type parameters and wildcard type arguments that are explicitly declared to extend <code>java.lang.Object</code>.\n<p>Such extension is redundant as <code>java.lang.Object</code> is a supertype of all classes.</p>\n<p>Example:</p>\n<pre><code>\n  class ClassA&lt;T extends Object&gt; {}\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the <b>Ignore when java.lang.Object is annotated</b> option to disable the inspection if\n  <code>java.lang.Object</code> is annotated.\n</p>\n<p>Example:</p>\n<pre><code>\n  class ClassB&lt;T extends @A Object&gt; {}\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySuperQualifier",
          "displayName": "Unnecessary 'super' qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <code>super</code>\nqualifiers in method calls and field references.\n<p>\n  A <code>super</code> qualifier is unnecessary\n  when the field or method of the superclass is not hidden/overridden in the calling class.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      foo();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to ignore qualifiers that help to distinguish superclass members access\n  from the identically named members of the outer class.\n<p>\n<p>\n  See also the following inspections:\n</p>\n<ul>\n  <li><i>Java | Visibility | Access of inherited field looks like access of element in surrounding code</i></li>\n  <li><i>Java | Visibility | Call to inherited method looks like call to local method</i></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayCanBeReplacedWithEnumValues",
          "displayName": "Array can be replaced with enum values",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the arrays of enum constants that can be replaced with <code>EnumType.values()</code>.\n<p>Usually, when updating such an enum, you have to update the array as well. However, if you use <code>EnumType.values()</code>\n instead, no modifications are required.</p>\n<p>Example:</p>\n<pre><code>\n  enum States {\n     NOT_RUN, IN_PROGRESS, FINISHED;\n  }\n  \n  handleStates(new States[] {NOT_RUN, IN_PROGRESS, FINISHED});\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  handleStates(States.values());\n</code></pre>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NestedMethodCall",
          "displayName": "Nested method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method calls used as parameters to another method call.\n<p>The quick-fix introduces a variable to make the code simpler and easier to debug.</p>\n<p><b>Example:</b></p>\n<pre>\n  public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int x = f(y());\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  public int y() { return 1; }\n  public int f(int x) { return 2 * x; }\n\n  public void foo() {\n      int y = y();\n      int x = f(y);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\nUse the inspection options to toggle the reporting of:\n</p>\n<ul>\n  <li>method calls in field initializers</li>\n  <li>calls to static methods</li>\n  <li>calls to simple getters</li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "MultipleVariablesInDeclaration",
          "displayName": "Multiple variables in one declaration",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple variables that are declared in a single declaration and suggest\ncreating a separate declaration for each variable.\n<p>Some coding standards prohibit such declarations.</p>\n<p>Example:</p>\n<pre><code>\n  int x = 1, y = 2;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int x = 1;\n  int y = 2;\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n<li>Use the <b>Ignore 'for' loop declarations</b> option to ignore multiple variables declared in the initialization of a 'for' loop statement, for example:\n<pre><code>\n  <b>for</b> (int i = 0, max = list.size(); i &gt; max; i++) {}\n</code></pre>\n</li>\n<li>Use the <b>Only warn on different array dimensions in a single declaration</b> option to only warn when variables with different array dimensions are declared in a single declaration, for example:\n<pre><code>\n  String s = \"\", array[];\n</code></pre>\n</li>\n</ul>\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "MoveFieldAssignmentToInitializer",
          "displayName": "Field assignment can be moved to initializer",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nSuggests replacing initializations of a field via assignment with field initializers.\n<p>The code is highlighted only if the field initializer is located in the initializer, and\n  joining it with the field declaration is likely to be safe.\n  In other cases, the inspection provides a quick-fix without code highlighting, as the fix may change the code semantics.</p>\n<p>Example:</p>\n<pre><code>\n  class MyClass {\n    static final int intConstant;\n    \n    static {\n      intConstant = 10;\n    }\n  }\n</code></pre>\nThe quick fix moves the assigned value to the field initializer removing the class initializer section if possible:\n<pre><code>\n  class MyClass {\n    static final int intConstant = 10;\n  }\n</code></pre>\n<!-- tooltip end -->\n<small>Since 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeFinal",
          "displayName": "Field may be 'final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any fields that can be safely made <code>final</code>.\n<p>Using the <code>final</code> variable makes code more error-prone. It may also be helpful for compiler optimisations\n  that make your program run faster.</p>\n<p>A field may be safely made <code>final</code> only if it has the <code>private</code> access modifier\n  (or it is defined in a local / anonymous class) and:<p>\n<ul>\n  <li>It is <code>static</code> and initialized either in its declaration or in one static class initializer.</li>\n  <li>It is non-static and initialized either in its declaration or in one non-static class initializer or in all constructors.</li>\n</ul>\n<!-- tooltip end -->\n\n\n</body>\n</html>"
        },
        {
          "shortName": "UnqualifiedMethodAccess",
          "displayName": "Instance method call not qualified with 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to non-<code>static</code> methods on the same instance that are not qualified with <code>this</code>.\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    void bar() {}\n\n    void foo() {\n      bar();\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    void bar() {}\n\n    void foo() {\n      this.bar();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DiamondCanBeReplacedWithExplicitTypeArguments",
          "displayName": "Diamond can be replaced with explicit type arguments",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports instantiation of generic classes in which the <b>&lt;&gt;</b> symbol (diamond) is used instead of\n  type parameters.\n\n<p>The quick-fix replaces <b>&lt;&gt;</b> (diamond) with explicit type parameters.\n  This action can be useful to make the code compatible with Java 6.</p>\n<p>Example:</p>\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;&gt;()</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>List &lt;String&gt; list = new ArrayList&lt;String&gt;()</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaBodyCanBeCodeBlock",
          "displayName": "Lambda body can be code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambdas whose body is an expression and suggests converting expression bodies to code blocks.\n<p>Example:</p>\n<pre><code>\n  n&nbsp;-&gt;&nbsp;n&nbsp;+&nbsp;1\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>n -&gt; {\n  return n + 1;\n}</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "BoundedWildcard",
          "displayName": "Can use bounded wildcard",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports generic method parameters that can make use of <a href=\"https://en.wikipedia.org/wiki/Wildcard_(Java)\">bounded wildcards</a>.\n<p><b>Example:</b></p>\n<pre>\n  void process(Consumer&lt;Number&gt; consumer);\n</pre>\n<p>should be replaced with:</p>\n<pre>\n  void process(Consumer&lt;? super Number&gt; consumer);\n</pre>\n<p>\n  This method signature is more flexible because it accepts more types: not only\n  <code>Consumer&lt;Number&gt;</code>, but also <code>Consumer&lt;Object&gt;</code>.\n</p>\n<p>Likewise, type parameters in covariant position:</p>\n<pre>\n  T produce(Producer&lt;T&gt; p);\n</pre>\n<p>should be replaced with:</p>\n<pre>\n  T produce(Producer&lt;? extends T&gt; p);\n</pre>\n<!-- tooltip end -->\n<p>\n  To quote <a href=\"https://en.wikipedia.org/wiki/Joshua_Bloch#Effective_Java\">Joshua Bloch</a> in <em>Effective Java</em> third Edition:\n</p>\n<blockquote>\n  <h4>Item 31: Use bounded wildcards to increase API flexibility</h4>\n  Using wildcard types in your APIs, while tricky, makes the APIs far more flexible.\n  If you write a library that will be widely used, the proper use of wildcard types should be considered mandatory.\n  Remember the basic rule: producer-extends, consumer-super (PECS).\n  Also remember that all Comparables and Comparators are consumers.\n</blockquote>\n\n<p>\n  Use the inspection options to toggle the reporting for:\n</p>\n<ul>\n  <li>\n    <p>\n      invariant classes. An example of an invariant class is <code>java.util.List&lt;T&gt;</code> because it both accepts values\n      (via the <code>List.add(T)</code> method)\n      and produces values (via the <code>T List.get()</code> method).\n    </p>\n    <p>\n      On the\n      other hand, <code>contravariant</code> classes only receive values, for example, <code>java.util.function.Consumer&lt;T&gt;</code>\n      with the only method <code>accept(T)</code>. Similarly, <code>covariant</code> classes\n      only produce values, for example, <code>java.util.function.Supplier&lt;T&gt;</code>\n      with the only method <code>T get()</code>.\n    </p>\n    <p>\n      People often use bounded wildcards in covariant/contravariant\n      classes but avoid wildcards in invariant classes, for example, <code>void process(List&lt;? extends T&gt; l)</code>.\n      Disable this option to ignore such invariant classes and leave them rigidly typed, for example, <code>void\n      process(List&lt;T&gt; l)</code>.\n    </p>\n  </li>\n  <li>\n    <p>\n      <code>private</code> methods, which can be considered as not a part of the public API\n    </p>\n  </li>\n  <li>\n    <p>\n      instance methods\n    </p>\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ChainedEquality",
          "displayName": "Chained equality comparisons",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports chained equality comparisons.\n<p>Such comparisons may be confusing: <code>a == b == c</code> means <code>(a == b) == c</code>,\n  but possibly <code>a == b && a == c</code> is intended.</p>\n<p><b>Example:</b></p>\n<pre>\n  boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return a == b == c;\n  }\n</pre>\n<p>You can use parentheses to make the comparison less confusing:</p>\n<pre>\n  boolean chainedEquality(boolean a, boolean b, boolean c) {\n    return (a == b) == c;\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CStyleArrayDeclaration",
          "displayName": "C-style array declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports array declarations written in C-style syntax in which the array indicator brackets\n  are placed after the variable name or after the method parameter list.\n<p>Example:</p>\n<pre><code>\n  <b>public</b> String process(String value[])[] {\n    return value;\n  }\n</code></pre>\n<p>Most code styles prefer Java-style array declarations in which the array indicator brackets are attached to the type name, for example:</p>\n<pre><code>\n  <b>public</b> String[] process(String[] value) {\n    return value;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\nUse the <b>Ignore C-style declarations in variables</b> option to report C-style array declaration of method return types only.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "BlockMarkerComments",
          "displayName": "Block marker comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports comments which are used as code block markers.\nThe quick-fix removes such comments.\n<p>Example:</p>\n<pre><code>\n  while (i &lt; 10) {\n    i++;\n  } // end while\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  while (i &lt; 10) {\n    i++;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ArrayCreationWithoutNewKeyword",
          "displayName": "Array creation without 'new' expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports array initializers without <code>new</code> array expressions and suggests adding them.\n<p>Example:</p>\n<pre><code>\n  int[] a = {42}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int[] a = new int[]{42}\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryThis",
          "displayName": "Unnecessary 'this' qualifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary <code>this</code> qualifier.\n<p>\n  Using <code>this</code> to disambiguate a code reference is discouraged by many coding styles\n  and may easily become unnecessary\n  via automatic refactorings.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    int x;\n    void foo() {\n      this.x = 2;\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    int x;\n    void foo() {\n      x = 2;\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to ignore assignments to fields.\n  For instance, <code>this.x = 2;</code> won't be reported, but <code>int y = this.x;</code> will be.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryQualifierForThis",
          "displayName": "Unnecessary qualifier for 'this' or 'super'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports unnecessary qualification of <code>this</code> or <code>super</code>.\n<p>\n  Using a qualifier on <code>this</code> or <code>super</code> to\n  disambiguate a code reference may easily become unnecessary via automatic refactorings and should be deleted for clarity.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      Bar.super.foo();\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    void foo() {}\n  }\n\n  class Bar extends Foo {\n    void bar() {\n      super.foo();\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RecordCanBeClass",
          "displayName": "Record can be converted to class",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports record classes and suggests converting them to ordinary classes.\n<p>This inspection makes it possible to move a Java record to a codebase using an earlier Java version\n  by applying the quick-fix to this record.</p>\n<p>\n  Note that the resulting class is not completely equivalent to the original record:\n</p>\n<ul>\n  <li>The resulting class no longer extends <code>java.lang.Record</code>,\n    so <code>instanceof Record</code> returns <code>false</code>.</li>\n  <li>Reflection methods like <code>Class.isRecord()</code> and\n    <code>Class.getRecordComponents()</code> produce different results.</li>\n  <li>The generated <code>hashCode()</code> implementation may produce a different result\n    because the formula to calculate record <code>hashCode</code> is deliberately not specified.</li>\n  <li>Record serialization mechanism differs from that of an ordinary class.\n    Refer to <i>Java Object Serialization Specification</i> for details.</li>\n</ul>\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n  record Point(int x, int y) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  final class Point {\n    private final int x;\n    private final int y;\n\n    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    public int x() { return x; }\n\n    public int y() { return y; }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj == this) return true;\n      if (obj == null || obj.getClass() != this.getClass()) return false;\n      var that = (Point)obj;\n      return this.x == that.x &&\n             this.y == that.y;\n    }\n\n    @Override\n    public int hashCode() {\n      return Objects.hash(x, y);\n    }\n\n    @Override\n    public String toString() {\n      return \"Point[\" +\n             \"x=\" + x + \", \" +\n             \"y=\" + y + ']';\n    }\n  }\n</code></pre>\n<p>This inspection only reports if the language level of the project or module is 15 preview or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLabeledSwitchRuleCodeBlock",
          "displayName": "Labeled switch rule has redundant code block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports labeled rules of <code>switch</code> statements or <code>switch</code> expressions that have a redundant code block.\n<p>Example:</p>\n<pre><code>\n  String s = switch (n) {\n    case 1 -> { yield Integer.toString(n); }\n    default -> \"default\";\n  };\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String s = switch (n) {\n    case 1 -> Integer.toString(n);\n    default -> \"default\";\n  };\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 14 or higher.</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantOnWrongSideOfComparison",
          "displayName": "Constant on wrong side of comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports comparison operations where the constant value is on the wrong side.\n<p>Some coding conventions specify that constants should be on a specific side of a comparison, either left or right.</p>\n<p><b>Example:</b></p>\n<pre>\n  boolean compare(int x) {\n    return 1 &gt; x; // Constant '1' on the left side of the comparison\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  boolean compare(int x) {\n    return x &lt; 1;\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to choose the side of constants in comparisons.\n</p>\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifiableEqualsExpression",
          "displayName": "Unnecessary 'null' check before 'equals()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports comparisons to <code>null</code> that are followed by a call to <code>equals()</code> with a constant argument.\n\n<p><b>Example:</b></p>\n<pre>\n  if (s != null && s.equals(\"literal\")) {}\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  if (\"literal\".equals(s)) {}\n</pre>\n<!-- tooltip end -->\n<p>\n    Use the inspection settings to report <code>equals()</code> calls with a non-constant argument\n    when the argument to <code>equals()</code> is proven not to be <code>null</code>.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "OptionalIsPresent",
          "displayName": "Non functional style 'Optional.isPresent()' usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditions, like <code>if(Optional.isPresent())</code>, that can be rewritten in the functional style,\nas it is shorter and easier to read.\n<p>Example:</p>\n<pre><code>\n  if (str.isPresent()) str.get().trim();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  str.ifPresent(String::trim);\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<small>New in 2016.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ExtendsObject",
          "displayName": "Class explicitly extends 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any classes that are explicitly declared to extend <code>java.lang.Object</code>.\n<p>Such declaration is redundant and can be safely removed.</p>\n<p>Example:</p>\n<pre><code>\n  class MyClass extends Object {\n  }\n</code></pre>\n<p>The quick-fix removes the redundant <code>extends Object</code> clause:</p>\n<pre><code>\n  class MyClass {\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySuperConstructor",
          "displayName": "Unnecessary call to 'super()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to no-arg superclass constructors during object construction.\n<p>Such calls are unnecessary and may be removed.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    Foo() {\n      super();\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    Foo() {\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBlockStatement",
          "displayName": "Unnecessary code block",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code blocks that are redundant to the semantics of the program and can\nbe replaced with their contents.\n<p>The code blocks that are the bodies of <code>if</code>, <code>do</code>,\n<code>while</code>, or <code>for</code> statements will not be reported by this\n  inspection.</p>\n<p>Example:</p>\n<pre><code>\n  void foo() {\n    { // unnecessary\n      int result = call();\n      analyze(result);\n    } // unnecessary\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\nUse the <b>Ignore branches of 'switch' statements</b> option to ignore the code blocks that are used as branches of switch statements.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarySemicolon",
          "displayName": "Unnecessary semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any unnecessary semicolons, including semicolons that are used between class members, inside block statements, or after\nclass definitions.\n<p>Even though these semicolons are valid in Java, they are redundant and may be removed.</p>\n<p>Example:</p>\n<pre><code>\n  class C {\n    ;\n    void m() throws Exception {\n        try (AutoCloseable r1 = createAutoCloseable();) {\n          ;\n        }\n    }\n    ;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class C {\n    void m() throws Exception {\n      try (AutoCloseable r1 = createAutoCloseable()) {\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessarilyQualifiedStaticUsage",
          "displayName": "Unnecessarily qualified static access",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of static members qualified with the class name.\n<p>\n  Such qualification is unnecessary and may be safely removed.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      Foo.foo();\n      System.out.println(Foo.x);\n    }\n\n    static void baz() { Foo.foo(); }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    static void foo() {}\n    static int x;\n\n    void bar() {\n      foo();\n      System.out.println(x);\n    }\n\n    static void baz() { foo(); }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection options to toggle the reporting for:\n</p>\n<ul>\n  <li>\n    <p>Static fields access:<br><code>void bar() { System.out.println(Foo.x); }</code></p>\n  </li>\n  <li>\n    <p>Calls to static methods:<br><code>void bar() { Foo.foo(); }</code></p>\n  </li>\n</ul>\n<p>\n  Also, you can configure the inspection to only report static member usage\n  in a static context. In this case, only <code>static void baz() { Foo.foo(); }</code> will be reported.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FuseStreamOperations",
          "displayName": "Subsequent steps can be fused into Stream API chain",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nDetects transformations outside a Stream API chain that could be incorporated into it.\n<p>Example:</p>\n<pre><code>\n  List&lt;String&gt; list = stream.collect(Collectors.toList());\n  list.sort(null);\n  return list.toArray(new String[list.size()]);\n</code></pre>\n<p>After the conversion:</p>\n<pre><code>\n  return stream.sorted().toArray(String[]::new);\n</code></pre>\n<p>\n  Note that sometimes the converted stream chain may replace explicit <code>ArrayList</code> with <code>Collectors.toList()</code> or explicit\n  <code>HashSet</code> with <code>Collectors.toSet()</code>. The current library implementation uses these collections internally. However,\n  this approach is not very reliable and might change in the future altering the semantics of your code.</p>\n\n<!-- tooltip end -->\n<p>If you are concerned about it, use the <b>Do not suggest 'toList()' or 'toSet()' collectors</b> option to suggest\n  <code>Collectors.toCollection()</code> instead of <code>toList</code> and <code>toSet</code> collectors.\n<p>This inspection only reports if the language level of the project of module is 8 or higher.</p>\n<!--<p><small>New in 2017.3</small></p>-->\n</body>\n</html>"
        },
        {
          "shortName": "UnclearBinaryExpression",
          "displayName": "Multiple operators with different precedence",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports binary, conditional, or <code>instanceof</code> expressions that consist of different operators\nwithout parentheses. Such expressions can be less readable due to different precedence rules of operators.\n<p>Example:</p>\n<pre><code>\n  int n = 3 + 9 * 8 + 1;\n</code></pre>\n<p>After quick-fix is applied:</p>\n<pre><code>\n  int n = 3 + (9 * 8) + 1;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryConstantArrayCreationExpression",
          "displayName": "Redundant 'new' expression in constant array creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constant new array expressions that can be replaced with an array initializer. Array initializers omit the type declaration because\nit is already specified by the left side of the assignment.\n<p><b>Example:</b></p>\n<pre>\n  int[] foo = new int[] {42};\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  int[] foo = {42};\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryFinalOnLocalVariableOrParameter",
          "displayName": "Unnecessary 'final' on local variable or parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables or parameters unnecessarily declared <code>final</code>.\n<p>Some coding standards frown upon variables declared <code>final</code> for reasons of terseness.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    Foo(Object o) {}\n\n    void bar(final Object o) {\n      new Foo(o);\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    Foo(Object o) {}\n\n    void bar(Object o) {\n      new Foo(o);\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection options to toggle the reporting for:\n</p>\n<ul>\n  <li>\n    local variables\n  </li>\n  <li>\n    parameters (including\n    parameters of <code>catch</code> blocks and enhanced <code>for</code> statements)\n  </li>\n</ul>\n<p>\n  Also, you can configure the inspection to only report <code>final</code> parameters of <code>abstract</code> or interface\n  methods, which may be considered extra unnecessary as such markings don't\n  affect the implementation of these methods.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LocalCanBeFinal",
          "displayName": "Local variable or parameter can be final",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters or local variables found in the specified inspection\nscope to which the <code>final</code> modifier can be added.\n<p>Example:</p>\n<pre><code>\n  ArrayList&lt;Integer&gt; list = new ArrayList();\n  fill(list);\n  return list;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  final ArrayList&lt;Integer&gt; list = new ArrayList();\n  fill(list);\n  return list;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the inspection's options to define whether parameters or local variables should be reported.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "AssertMessageNotString",
          "displayName": "'assert' message is not a string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>assert</code> messages that are not of the <code>java.lang.String</code> type.\n<p>Using a string provides more information to help diagnose the failure\n  or the assertion reason.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(List&lt;Integer&gt; myList) {\n    assert myList.isEmpty() : false;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Only warn when the <code>assert</code> message type is 'boolean' or 'java.lang.Boolean'</b> option to only warn when the <code>assert</code> message type is <code>boolean</code> or <code>java.lang.Boolean</code>.\nA <code>boolean</code> detail message is unlikely to provide additional information about an assertion failure\n  and could result from a mistakenly entered <code>:</code> instead of <code>&</code>.\n<p>\n<small>New in 15</small>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Numeric issues",
      "inspections": [
        {
          "shortName": "ComparisonToNaN",
          "displayName": "Comparison to Double.NaN or Float.NaN",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any comparisons to <code>Double.NaN</code> or <code>Float.NaN</code>.</p>\n<p>Such comparisons are never meaningful, as NaN is not equal to anything, including itself.\n  Use the <code>Double.isNaN()</code> or <code>Float.isNaN()</code> methods instead.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  if (x == Double.NaN) {...}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (Double.isNaN(x)) {...}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LongLiteralsEndingWithLowercaseL",
          "displayName": "'long' literal ending with 'l' instead of 'L'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports <code>long</code> literals ending with lowercase 'l'. These\n  literals may be confusing, as lowercase 'l' looks very similar to '1'.</p>\n<p>The quick-fix for this inspection replaces lowercase 'l' with uppercase 'L'.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CachedNumberConstructorCall",
          "displayName": "Number constructor call with primitive argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any attempt to instantiate a new <code>Long</code>,\n  <code>Integer</code>, <code>Short</code>, or\n  <code>Byte</code> object from a primitive <code>long</code>,\n  <code>integer</code>, <code>short</code>, or\n  <code>byte</code>\n  argument.</p>\n<p>It is recommended that you use the static method <code>valueOf()</code>\n  introduced in Java 5. By default, this method caches objects for values between -128 and\n  127 inclusive.\n<p><b>Example:</b></p>\n<pre><code>\n  Integer i = new Integer(1);\n  Long l = new Long(1L);\n</code></pre>\n<p>After the quick-fix is applied, the code changes to:</p>\n<pre><code>\n  Integer i = Integer.valueOf(1);\n  Long l = Long.valueOf(1L);\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection reports if the language level of the project or module is 5 or higher</p>\n<p>\n  Use the <b>Ignore new number expressions with a String argument</b> option to ignore calls to number constructors with a <code>String</code> argument.</p>\n<p>\n  Use the <b>Report only when constructor is @Deprecated</b>  option to only report calls to deprecated constructors.\n  <code>Long</code>, <code>Integer</code>, <code>Short</code> and <code>Byte</code> constructors are deprecated since JDK 9.</p>\n</body>\n</html>"
        },
        {
          "shortName": "InsertLiteralUnderscores",
          "displayName": "Unreadable numeric literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports long numeric literals without underscores and suggests adding them. Underscores make such literals easier to read.\n<p>Example:</p>\n<pre>\n  1000000\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  1_000_000\n</pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project of module is 7.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PointlessArithmeticExpression",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports pointless arithmetic expressions. Such expressions include adding or subtracting zero,\n  multiplying by zero or one, and division by one.</p>\n<p>Such expressions may be the result of automated refactorings and they are unlikely to be what the developer intended to do.</p>\n<p>The quick-fix simplifies such expressions.</p>\n<p><b>Example:</b>\n<pre><code>\n  void f(int a) {\n    int x = a - a;\n    int y = a + 0;\n    int res = x / x;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f(int a) {\n    int x = 0;\n    int y = a;\n    int res = 1;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Note that in rare cases, the suggested replacement might not be completely equivalent to the original code\n  for all possible inputs. For example, the inspection suggests replacing <code>x / x</code> with <code>1</code>.\n  However, if <code>x</code> is zero, the original code throws <code>ArithmeticException</code> or results in <code>NaN</code>.\n  Also, if <code>x</code> is <code>NaN</code>, then the result is also <code>NaN</code>. It's very unlikely that such behavior is  intended.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "FloatingPointEquality",
          "displayName": "Floating point equality comparison",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports floating-point values that are being compared using the <code>==</code> or <code>!=</code> operator.\n<p>Floating-point values are inherently inaccurate, and comparing them for exact equality is seldom the desired semantics.</p>\n<p>This inspection ignores comparisons with zero and infinity literals.</p>\n<p><b>Example:</b>\n<pre><code>\n  void m(double d1, double d2) {\n    if (d1 == d2) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OctalAndDecimalIntegersMixed",
          "displayName": "Octal and decimal integers in same array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports mixed octal and decimal integer literals in a single array initializer.\nThis situation might happen when you copy a list of numbers into an array initializer.\nSome numbers in the array might be zero-padded and the compiler will interpret them as octal.\n<p><b>Example:</b></p>\n<pre><code>int[] elapsed = {1, 13, 052};</code></pre>\n<p>After the quick-fix that removes a leading zero is applied:</p>\n<pre><code>int[] elapsed = {1, 13, 52};</code></pre>\n<p>If it is an octal number (for example, after a variable inline), then you can use another quick-fix that converts octal to decimal:</p>\n<code>int[] elapsed = {1, 13, 42};</code>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonReproducibleMathCall",
          "displayName": "Non-reproducible call to 'java.lang.Math'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Math</code> methods, which results are not guaranteed to be reproduced precisely.\n<p>In environments where reproducibility of results is required, <code>java.lang.StrictMath</code>\n  should be used instead.</p>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "CharUsedInArithmeticContext",
          "displayName": "'char' expression used in arithmetic context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports expressions of the <code>char</code> type used in addition or subtraction expressions.\n<p>Such code is not necessarily an issue but may result in bugs (for example,\n  if a string is expected).</p>\n<p><b>Example:</b> <code>int a = 'a' + 42;</code></p>\n<p>After the quick-fix is applied: <code>int a = (int) 'a' + 42;</code></p>\n<p>For the <code>String</code> context:\n<pre><code>int i1 = 1;\nint i2 = 2;\nSystem.out.println(i2 + '-' + i1 + &quot; = &quot; + (i2 - i1));</code></pre>\n<p>After the quick-fix is applied:</p>\n<code>System.out.println(i2 + &quot;-&quot; + i1 + &quot; = &quot; + (i2 - i1));</code>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IntegerDivisionInFloatingPointContext",
          "displayName": "Integer division in floating point context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports integer division when the result is used as a floating-point number.</p>\n<p>Such division is often an error and may have unexpected results\n  due to the truncation that happens in integer division.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  float x = 3.0F + 3/5;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalMethodWithoutRoundingCalled",
          "displayName": "Call to 'BigDecimal' method without a rounding mode argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to <code>divide()</code> or <code>setScale()</code> without a rounding mode argument.</p>\n<p>Such calls can lead to an <code>ArithmeticException</code> when the exact value cannot be represented in the result\n  (for example, because it has a non-terminating decimal expansion).</p>\n<p>Specifying a rounding mode prevents the <code>ArithmeticException</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  BigDecimal.valueOf(1).divide(BigDecimal.valueOf(3));\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConfusingFloatingPointLiteral",
          "displayName": "Confusing floating point literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any floating point numbers that don't have a decimal point, numbers before the decimal point,\nor numbers after the decimal point.\n<p>Such literals may be confusing, and violate several coding standards.</p>\n<p><b>Example:</b></p>\n<pre><code>double d = .03;</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>double d = 0.03;</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore floating point literals in scientific notation</b> option to ignore floating point numbers in scientific notation.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantMathCall",
          "displayName": "Constant call to 'java.lang.Math'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Math</code> or <code>java.lang.StrictMath</code> methods that can be determined as simple compile-time constants.\n<p><b>Example:</b></p>\n<pre><code>double v = Math.sin(0.0);</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>double v = 0.0;</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "OverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with the excessive number of terms. Such expressions might be hard to understand and might contain errors.\n<p>Parameters, field references, and other primary expressions are counted as a term.</p>\n<p><b>Example:</b>\n  <pre><code>int calc(int a, int b) {\n        return a + a + a + b + b + b + b; // The line contains 7 terms and will be reported.\n    }</code></pre>\n<!-- tooltip end -->\n<p>Use the field below to specify a number of terms allowed in arithmetic expressions.</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnaryPlus",
          "displayName": "Unary plus",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the <code>+</code> unary operator. The unary plus is usually a null operation, and\nits presence might represent a coding error. For example, in a combination with the increment operator (like in <code>+++</code>)\nor with the equal operator (like in <code>=+</code>).\n<p><b>Example:</b></p>\n<pre>\n  <code>void unaryPlus(int i) {\n    int x = + +i;\n  }</code>\n</pre>\n<p>The following quick fixes are suggested:</p>\n<ul>\n  <li><p>Remove <code>+</code> operators before the <code>i</code> variable:</p>\n    <pre><code>void unaryPlus(int i) {\n    int x = i;\n  }</code></pre>\n  </li>\n  <li><p>Replace <code>+</code> operators with the prefix increment operator:</p>\n    <pre><code>void unaryPlus(int i) {\n    int x = ++i;\n  }</code></pre>\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>\nUse the checkbox below to report unary pluses that are used together with a binary or another unary expression.\nIt means the inspection will not report situations when a unary plus expression is used in array\ninitializer expressions or as a method argument.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousLiteralUnderscore",
          "displayName": "Suspicious underscore in number literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports number literals that use the underscore numeric separator with groups where the number of digits is not three.\nSuch literals might contain a typo.\n<p><b>Example:</b> <code>int j = 1_000_0000;</code></p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnpredictableBigDecimalConstructorCall",
          "displayName": "Unpredictable BigDecimal constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to <code>BigDecimal</code> constructors that accept a <code>double</code> value.\n  These constructors produce <code>BigDecimal</code> that is exactly equal to the supplied <code>double</code> value.</p>\n<p>However, because doubles are encoded in the IEEE 754 64-bit double-precision binary floating-point format, the exact value can be unexpected.</p>\n<p>\n<p>For example, <code>new BigDecimal(0.1)</code> yields a <code>BigDecimal</code> object. Its value is\n  <small><code>0.1000000000000000055511151231257827021181583404541015625</code></small>\n  which is the nearest number to 0.1 representable as a double.\n  To get <code>BigDecimal</code> that stores the same value as written in the source code,\n  use either <code>new BigDecimal(\"0.1\")</code> or <code>BigDecimal.valueOf(0.1)</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Constructor {\n    void foo() {\n      new BigDecimal(0.1);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n<code>\n  class Constructor {\n    void foo() {\n      new BigDecimal(\"0.1\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NumericOverflow",
          "displayName": "Numeric overflow",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports expressions that overflow during computation.</p>\n<p>Usually, this happens by accident and indicates a bug. For example, a wrong type is used or a shift should be done in an opposite direction .</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  float a = 1.0f/0.0f;\n  long b = 30 * 24 * 60 * 60 * 1000;\n  long c = 1000L &lt;&lt; 62;\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalEquals",
          "displayName": "'equals()' called on 'java.math.BigDecimal'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>.equals()</code> being called to compare two <code>java.math.BigDecimal</code> numbers.\n<p>This is normally a mistake, as two <code>java.math.BigDecimal</code> numbers are only equal if\n  they are equal in both value and scale.</p>\n<p><b>Example:</b></p>\n<pre><code>if (new BigDecimal(\"2.0\").equals(new BigDecimal(\"2.00\"))) {}</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>if (new BigDecimal(\"2.0\").compareTo(new BigDecimal(\"2.00\")) == 0) {}</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BadOddness",
          "displayName": "Suspicious oddness check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports odd-even checks of the following form: <code>x % 2 == 1</code>.\nSuch checks fail when used with negative odd values.\nConsider using <code>x % 2 != 0</code> or <code>(x & 1) == 1</code> instead.\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ComparisonOfShortAndChar",
          "displayName": "Comparison of 'short' and 'char' values",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports equality comparisons between <code>short</code> and <code>char</code> values.\n<p>Such comparisons may cause subtle bugs because while both values are 2-byte long, <code>short</code> values are\n  signed, and <code>char</code> values are unsigned.</p>\n<p><b>Example:</b></p>\n<pre><code>\nif (Character.MAX_VALUE == shortValue()) {} //never can be true\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RemoveLiteralUnderscores",
          "displayName": "Underscores in numeric literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports numeric literals with underscores and suggests removing them with a quick-fix.\nThis may be useful if you need to lower the language level.\n<p>The quick-fix removes underscores from numeric literals. For example <code>1_000_000</code> will be converted to <code>1000000</code>.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 7 or higher.</p>\n<p><small>New in 2020.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryUnaryMinus",
          "displayName": "Unnecessary unary minus",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary unary minuses. Such expressions might be hard to understand and might contain errors.\n<p><b>For example:</b></p>\n<pre><code>void unaryMinus(int i) {\n    int x = - -i;\n  }</code></pre>\n<p>The following quick fixes are suggested here:</p>\n<ul>\n  <li><p>Remove <code>-</code> operators before the <code>i</code> variable:</p>\n    <pre><code>void unaryMinus(int i) {\n    int x = i;\n  }</code></pre>\n  </li>\n  <li>\n <p>Replace <code>-</code> operators with the prefix decrement operator:</p>\n    <pre><code>void unaryMinus(int i) {\n    int x = --i;\n  }</code></pre>\n  </li>\n</ul>\n\n<p><b>Another example:</b></p>\n<pre><code>void unaryMinus(int i) {\n    i += - 8;\n  }</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>void unaryMinus(int i) {\n    i -= 8;\n  }</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DivideByZero",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports division by zero or remainder by zero.</p>\n<p>In this case, users will get <code>Nan</code> for doubles or floats, and <code>ArithmeticException</code> for integers.\n  Note, that the divisor is not necessarily a zero literal, but the expression that is statically known to be evaluated as zero.\n  The fix suggests replacing division expression with the <code>NaN</code> constant for floating-point types.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitNumericConversion",
          "displayName": "Implicit numeric conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports implicit conversion between numeric types.\n<p>Implicit numeric conversion is not a problem in itself but, if unexpected, may cause difficulties when tracing bugs.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  double m(int i) {\n    return i * 10;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  double m(int i) {\n    return (double) (i * 10);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore widening conversions</b> option to ignore implicit conversion that cannot result in data loss\n    (for example, <code>int</code>-&gt;<code>long</code>).</li>\n  <li>Use the <b>Ignore conversions from and to 'char'</b> option to ignore conversion from and to <code>char</code>. The inspection will\n    still report conversion from and to floating-point numbers.</li>\n  <li>Use the <b>Ignore conversion from constants and literals</b> to make the inspection ignore conversion from literals and\n    compile-time constants.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "OctalLiteral",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports octal integer literals. Some coding standards prohibit the\n  use of octal literals, as they may be easily confused with decimal literals.</p>\n<p>Example:</p>\n<pre><code>\n  int i = 015;\n  int j = 0_777;\n</code></pre>\n<p>This inspection has two different quick-fixes.\n  After the <b>Convert octal literal to decimal literal</b> quick-fix is applied, the code changes to:</p>\n<pre><code>\n  int i = 13;\n  int j = 511;\n</code></pre>\n<p>After the <b>Remove leading zero to make decimal</b> quick-fix is applied, the code changes to:</p>\n<pre><code>\n  int i = 15;\n  int j = 777;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "GroovyInArgumentCheck",
          "displayName": "Incompatible 'in' argument types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of membership operator <code>in</code> with items and containers of incompatible types.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef list = [1, 2]\nif (\"foo\" in list) {} // list of Integers can't contain String\n</code>\n</pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyLabeledStatement",
          "displayName": "Labeled statement inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports labels already used in parent workflow.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef list = [\"foo\"]\ncycle:\nfor (element in list) {\n  cycle: // confusing label repeat\n  element.chars().forEach {\n  }\n}\n</code>\n</pre>\n\n\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyConstructorNamedArguments",
          "displayName": "Named arguments of constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports named arguments of a default class constructor call which don't correspond to properties of this class.\n<p><b>Example:</b></p>\n<pre><code>\n  class Person {\n      def name\n      def age\n  }\n\n  // 'firstName' property doesn't exist\n  new Person(firstName: \"John\")\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyAccessibility",
          "displayName": "Inaccessible element",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports references which exceed access rights.\n<p>Access to private members breaks encapsulation.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyRangeTypeCheck",
          "displayName": "Incorrect range arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports types used in ranges that do not have a <code>next()</code> or <code>previous()</code> method\nor do not implement the <code>java.lang.Comparable</code> interface.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports object allocation where the result of this operation is ignored.\n<p>\n  Such allocation expressions are legal Groovy, but are usually either inadvertent, or\n  evidence of a complicated object initialization strategy.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>equals()</code> where the target and argument are of incompatible types.\n<p>While such a call might theoretically be useful, most likely it represents a bug.</p>\n<p><b>Example:</b></p>\n<pre><code>\n    new HashSet&lt;String&gt;() == new TreeSet&lt;Integer&gt;())\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods which must either recurse infinitely or throw an exception.\nMethods reported by this inspection could not be finished correct.\n<p><b>Example:</b></p>\n<pre>\n<code>\n// this function always dive deeper\ndef fibonacci(int n) {\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrUnresolvedAccess",
          "displayName": "Unresolved reference expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports reference expressions which cannot be resolved.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyInfiniteLoopStatement",
          "displayName": "Infinite loop statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code>, <code>while</code>, or <code>do</code> statements which\ncan only exit by throwing an exception. While such statements may be correct, they\nare usually a symptom of error.\n<p><b>Example:</b></p>\n<pre>\n<code>\nwhile(true) {\n  Thread.sleep(1000)\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SecondUnsafeCall",
          "displayName": "Second unsafe call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports possible <b>NullPointerException</b> during chain methods or properties call.\n<p><b>Example:</b></p>\n<pre><code>\n  domain?.getZone().getName()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  domain?.getZone()?.getName()\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDivideByZero",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports divisions by zero or remainders by zero.\n<p><b>Example:</b></p>\n<pre><code>\n  def a = 42\n  a / 0 // warning\n  a % 0.0 // warning\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyUntypedAccess",
          "displayName": "Untyped reference expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports reference expressions whose type can't be determined.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyDocCheck",
          "displayName": "Unresolved GroovyDoc reference",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references inside GroovyDoc comments.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNonShortCircuitBoolean",
          "displayName": "Non short-circuit boolean",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the non-short-circuit forms of boolean operators 'and' and 'or' ( <code>&</code>\nand <code>|</code> ).\n<p>\n  The non-short-circuit versions are occasionally useful, but\n  their presence is often due to typos of the short-circuit forms ( <code>&&</code>\n  and <code>||</code> ), and may lead to subtle bugs.\n</p>\n\n<p><b>Example:</b></p>\n<pre><code>\nif (a & b) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\nif (a && b) {}\n</code></pre>\n\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Pyramid",
      "inspections": [
        {
          "shortName": "PyramidSetupInspection",
          "displayName": "Project is not installed for development",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when no <code>python setup.py develop</code> command was executed for the Pyramid project.</p>\n<p>You need to execute this command to install the newly created project for development.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Logging",
      "inspections": [
        {
          "shortName": "LoggingConditionDisagreesWithLogStatement",
          "displayName": "Log condition does not match logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <em>is log enabled for</em> conditions of <code>if</code> statements that\ndo not match the log level of the contained logging call.\n<p>\nFor example:\n<pre><code>\n  <b>if</b> (LOG.isTraceEnabled()) {\n    // debug level logged, but checked for trace level\n    LOG.debug(\"some log message\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection understands the <em>java.util.logging</em>, <em>log4j</em>, <em>Log4j 2</em>, <em>Apache Commons Logging</em>\nand the <em>SLF4J</em> logging frameworks.\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithMultipleLoggers",
          "displayName": "Class with multiple loggers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that have multiple loggers declared.\nEnsuring that every class has a single dedicated logger is an important step in providing a unified logging\nimplementation for an application.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> Critical {\n    <b>protected static final</b> Logger LOG = Logger.getLogger(Critical.class);\n\n    <b>protected static final</b> Logger myLogger = Logger.getLogger(getClass());\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nClasses which declare multiple fields that have the type of one of the specified classes will be reported by this inspection.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationArgumentToLogCall",
          "displayName": "Non-constant string concatenation as argument to logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the non-constant string concatenations that are used as arguments to <code>SLF4J</code> and <code>Log4j 2</code> logging methods.\nNon-constant concatenations are evaluated at runtime even when the logging message is not logged; this can negatively impact performance.\nIt is recommended to use a parameterized log message instead, which will not be evaluated when logging is disabled.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Vital {\n    <b>private static final</b> Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n    <b>public void</b> saveTheWorld(<b>int</b> i, String s, <b>boolean</b> b) {\n      LOG.info(\"saveTheWorld(\" + i + \", \" + s + \", \"  + b + \")\");\n      // todo\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Vital {\n    <b>private static final</b> Logger LOG = LoggerFactory.getLogger(Vital.class);\n\n    <b>public void</b> saveTheWorld(<b>int</b> i, String s, <b>boolean</b> b) {\n\t\t  LOG.info(\"saveTheWorld({}, {}, {})\", i, s, b);\n      // todo\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n    Use the <b>Warn on</b> list to ignore certain higher logging levels. Higher logging levels may be enabled even in production, and the arguments will always be evaluated.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PublicMethodWithoutLogging",
          "displayName": "'public' method without logging",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any public methods that do not contain a logging statement. This inspection does not report\nsimple getters and setters.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> Crucial {\n    <b>private static final </b>Logger LOG = LoggerFactory.getLogger(Crucial.class);\n    <b>public void</b> doImportantStuff() {\n      // warning on this method\n    }\n\n    <b>public void</b> doOtherStuff() {\n      LOG.info(\"do other stuff\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the table below to specify Logger class names.\nPublic methods that do not use instance methods of the specified classes will be reported by this inspection.\n</body>\n</html>"
        },
        {
          "shortName": "PlaceholderCountMatchesArgumentCount",
          "displayName": "Number of placeholders does not match number of arguments in logging call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports SLF4J or Log4j 2 logging calls, such as <code>logger.info(\"{}: {}\", key)</code> where the number of <code>{}</code> placeholders\n  in the logger message doesn't match the number of other arguments to the logging call.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LoggerInitializedWithForeignClass",
          "displayName": "Logger initialized with foreign class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>Logger</code> instances that are initialized with a <code>class</code> literal from a different class than the <code>Logger</code>\nis contained in. This can easily happen when copy-pasting some code from another class and\nmay result in logging events under an unexpected category and cause filters to be applied incorrectly.\n<p>A quick-fix is provided to replace the foreign class literal with one from the surrounding class.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Paramount {\n    <b>protected static final</b> Logger LOG = Logger.getLogger(Critical.class);\n\n    // ... other fields and methods\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Paramount {\n    <b>protected static final</b> Logger LOG = Logger.getLogger(Paramount.class);\n\n    // ... other fields and methods\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>Use the table to specify the logger factory classes and logger factory methods recognized by this inspection.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "LogStatementGuardedByLogCondition",
          "displayName": "Logging call not guarded by log condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the logging calls with non-constant arguments that are not surrounded by a guard condition.\nThe evaluation of the arguments of a logging call can be expensive.\nSurrounding a logging call with a guard clause prevents that cost when logging\nis disabled for the level used by the logging statement. This is especially useful for the\nleast serious level (trace, debug, finest) of logging calls, because those are\nmost often disabled in a production environment.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Principal {\n    <b>void</b> bad(Object object) {\n      <b>if</b> (true) {\n        LOG.debug(\"log log log \" + expensiveCalculation(object));\n      }\n      LOG.debug(\"some more logging \" + expensiveCalculation(1));\n    }\n\n    <b>void</b> good(Object) {\n      <b>if</b> (LOG.isDebug()) {\n        LOG.debug(\"value: \" + expensiveCalculation(object));\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>\n      Use the <b>Logger class name</b> field to specify the logger class name used.\n  </li>\n  <li>\n    <p>\n      Use the table to specify the logging methods this inspection should warn on, with the corresponding log condition text.\n  </li>\n  <li>\n      Use the <b>Flag all unguarded logging calls</b> option to have the inspection flag all unguarded log calls, not only those with non-constant arguments.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutLogger",
          "displayName": "Class without logger",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which do not have a logger declared.\nEnsuring that every class has a dedicated logger is an important step in providing a unified logging\nimplementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> NoLoggerDeclared {\n\n    <b>int</b> calculateNthDigitOfPi(<b>int</b> n) {\n      // todo\n      <b>return</b> 1;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the table below to specify logger class names.\nClasses which do not declare a field with the type of one of the classes specified, will be reported by this inspection.\n\n</body>\n</html>"
        },
        {
          "shortName": "NonStaticFinalLogger",
          "displayName": "Non-constant logger",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the logger fields on classes that are not declared static and final.\nEnsuring that every class logger is effectively constant and bound to that class\nsimplifies the task of providing a unified logging implementation for an application. Interfaces,\nenumerations, annotations, and inner classes are not reported by this inspection.\n<p>A quick-fix is provided to change the logger modifiers to <code>static final</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Significant {\n    <b>private</b> Logger LOG = Logger.getLogger(Critical.class);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Significant {\n    <b>private static final</b> Logger LOG = Logger.getLogger(Critical.class);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>Use the <b>Logger class name</b> table to specify logger class names. The inspection will report the fields that are not <code>static</code> and <code>final</code> and are of the type equal to one of the specified class names.\n  </li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JavaBeans issues",
      "inspections": [
        {
          "shortName": "ClassWithoutNoArgConstructor",
          "displayName": "Class without no-arg constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without a no-argument constructor.\n<p>Such constructors are necessary in some contexts. For example, if a class needs to be created by using a reflection.</p>\n<!-- tooltip end -->\n<p>\n  Use the checkbox below to ignore classes without explicit constructors.\n  The compiler provides a default no-argument constructor to such classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PropertyValueSetToItself",
          "displayName": "Property value set to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls of setter methods with the same object getter as a value.\nUsually, this code does nothing and probably was not intended.\n<p><b>For example:</b></p>\n<pre><code>bean.setPayerId(bean.getPayerId());</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldHasSetterButNoGetter",
          "displayName": "Field has setter but no getter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields that have setter methods but no getter methods.\n<p>\n  In certain bean containers, when used within the Java beans specification, such fields might be difficult\n  to work with.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousGetterSetter",
          "displayName": "Suspicious getter/setter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports getter or setter methods that access a field that is not expected by its name.\nFor example, when <code>getY()</code> returns the <code>x</code> field. Usually, it might be a copy-paste error.\n<p><b>Example:</b></p>\n<pre><code>class Point {\n    private int x;\n    private int y;\n\n    public void setX(int x) { // Warning: setter 'setX()' assigns field 'y'\n      this.y = x;\n    }\n\n    public int getY() { // Warning: getter 'getY()' returns field 'x'\n      return x;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the checkbox below to report situations when a field in the class has a name that matches a name of a getter or a setter.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithoutConstructor",
          "displayName": "Class without constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes without constructors.\n<p>Some coding standards prohibit such classes.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Potentially confusing code constructs",
      "inspections": [
        {
          "shortName": "GrDeprecatedAPIUsage",
          "displayName": "Deprecated API usage",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports references to deprecated classes, fields, and methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedConditional",
          "displayName": "Nested conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports ternary conditional expressions that are nested inside other conditional expressions.\nSuch nested conditionals may be very confusing. \"Elvis\" expressions are counted as conditionals\nfor purpose of this inspection.\n<p><b>Example:</b></p>\n<pre>\n<code>\nreturn (condition ? \"result\" : null) ?: \"fail\"\n</code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyNegatedIf",
          "displayName": "Negated if condition expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>if</code> statements\nwhich contain <code>else</code> branches and whose conditions are negated.\nFlipping the order of the <code>if</code> and <code>else</code>\nbranches will usually increase the clarity of such statements.\n<p><b>Example:</b></p>\n<pre>\n<code>\nif (!condition) {\n  return \"1\"\n} else {\n  return \"2\"\n}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrReassignedInClosureLocalVar",
          "displayName": "Local variable is reassigned in closure or anonymous class",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables assigned to expression with different type inside of closure or anonymous class.\n<p><b>Example:</b></p>\n<pre><code>\n  int sum = 0\n  [1, 2, 3].each { sum += 'as' }\n  println(sum)\n</code></pre>\n<p>Here the <code>integer</code> variable <b>sum</b> is reassigned to a <code>String</code> expression.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryQualifiedReference",
          "displayName": "Unnecessary qualified reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports fully qualified references which can be replaced with import.\n<p><b>Example:</b></p>\n<pre><code>\n  def swingBuilder = new groovy.swing.SwingBuilder()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  import groovy.swing.SwingBuilder\n \n  def swingBuilder = new SwingBuilder()\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ClashingTraitMethods",
          "displayName": "Clashing trait methods",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes which implement two or more traits which contain methods with same signatures.\n<p>The result of calling such methods might be unexpected.</p>\n<p>The quick-fix adds an explicit overriding method.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  trait T1 {\n      def foo() {}\n  }\n\n  trait T2 {\n      def foo() {}\n  }\n\n  class X implements T1, T2 {}\n\n  // T2.foo() will be called\n  new X().foo()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class X implements T1, T2 {\n      @Override\n      Object foo() {\n          return T2.super.foo()\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyResultOfIncrementOrDecrementUsed",
          "displayName": "Result of increment or decrement used",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports increment or decrement expressions nested inside other expressions.\n<p>\n  Such expressions may be confusing, and violate the general design principle that a\n  given construct should do precisely one thing.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyOverlyComplexArithmeticExpression",
          "displayName": "Overly complex arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports arithmetic expressions with too many terms.\n<p>\n  Such expressions may be confusing and bug-prone.\n</p>\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyEmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code>, <code>while</code>, <code>do</code> or <code>for</code> statements\nwith empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.\n<p><b>Example:</b></p>\n<pre>\n<code>\nif (condition) {}\nwhile(true){}\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyImplicitNullArgumentCall",
          "displayName": "Implicit null argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls with no arguments to method that has exactly one parameter.\nThis is equivalent to call with <code>null</code>, and that behavior is often confusing and unintended.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef foo(String s){}\nfoo() // this call is actually 'foo(null)' call\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNestedSwitch",
          "displayName": "Nested switch statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>switch</code> statements that are nested inside other <code>switch</code> statements.\nSuch nested switch statements are confusing, and may result in unexpected behaviour.\n<p><b>Example:</b></p>\n<pre>\n<code>\nswitch (outer) {\n  case 1:\n    switch (inner) {\n      case 1:\n        print \"inner 1\"\n        break\n      default:\n        print \"inner default\"\n    }\n    break\n  default:\n    print \"default\"\n}\n</code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyOctalInteger",
          "displayName": "Octal integer",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports octal integer literals.\n<p>\n  Some coding standards prohibit the\n  use of octal literals, as they may be easily confused with decimal literals.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyNegatedConditional",
          "displayName": "Negated conditional expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports conditional expressions whose conditions are negated.\nFlipping the order of the conditional expression branches will usually increase the clarity of such\nstatements.\n<p><b>Example:</b></p>\n<pre>\n<code>\n~condition ? \"1\" : \"2\"\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPointlessArithmetic",
          "displayName": "Pointless arithmetic expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports pointless arithmetic expressions.\n<p>\n  Such expressions include adding or subtracting zero, multiplying by zero or one,\n  division by one, and shift by zero. Such expressions may be the result of automated refactorings\n  not completely followed through to completion, and in any case are unlikely to be what the developer\n  intended to do.\n</p>\n\n<p><b>Example:</b></p>\n<pre><code>\n  a + 0\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  a\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ClashingGetters",
          "displayName": "Clashing getters",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean methods which can be accessed via the same property name.\n<p>The result of accessing such property might be unexpected.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class X {\n      boolean isFoo() { true }\n      boolean getFoo() { false }\n  }\n\n  // getFoo() will be called\n  new X().foo\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrPackage",
          "displayName": "Package mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports files with a declared package that does not match the package expected. Also, reports files without <code>package</code> statements if the class is not located directly in\nsource root directory.\n</body>\n</html>\n"
        },
        {
          "shortName": "NewInstanceOfSingleton",
          "displayName": "New instance of class annotated with @groovy.lang.Singleton",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports new instance creation of classes annotated with <b>@groovy.lang.Singleton</b>.\nSuch constructions can lead to runtime exception \"Can't instantiate singleton\".\n<p><b>Example:</b></p>\n<pre><code>\n  @Singleton\n  class Foo{\n  }\n  \n  Foo foo = <b>new Foo()</b>\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Singleton\n  class Foo{\n  }\n  \n  Foo foo = <b>Foo.instance</b>\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyPointlessBoolean",
          "displayName": "Pointless boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports pointless or pointlessly complicated boolean expressions.\n<p>\n  Such expressions include conjunction with true,\n  disjunction with false,\n  equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be\n  the result of automated refactorings\n  not completely followed through to completion, and in any case are unlikely to be what the developer\n  intended to do.\n</p>\n\n<p><b>Example:</b></p>\n<pre><code>\n  if (someBool && true) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  if (someBool) {}\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyGStringKey",
          "displayName": "GString map key",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports statements which use a <code>groovy.lang.GString</code> object as a key to map.\nIn general <code>GString</code> objects are mutable and probably should not be used as keys.\nAlso, a <code>GString</code> entry cannot be accessed with a <code>java.lang.String</code> object with same value.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef map = [:]\ndef key = 'foo'\nmap &lt&lt [\"${key}\": 'bar']\nassert map[key] == null // confusing 'true' result of comparison\n</code>\n</pre>\n<!-- tooltip end -->\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyDoubleNegation",
          "displayName": "Double negation",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports double negation that can be simplified.\n<p><b>Example:</b></p>\n<pre>\n<code>\nif (!!functionCall()) {} // double negation\nif (!(a != b)) {} // double negation\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\nif (functionCall()) {}\nif (a == b) {}\n</code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyOverlyComplexBooleanExpression",
          "displayName": "Overly complex boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean expressions with too many terms.\n<p>\n  Such expressions may be confusing and bug-prone.\n</p>\n<!-- tooltip end -->\n<p>\n Use the field provided below to specify the maximum number of terms allowed in an boolean expression.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Test frameworks",
      "inspections": [
        {
          "shortName": "SimplifiableAssertion",
          "displayName": "Simplifiable assertion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any <code>assert</code> calls that can be replaced with simpler and equivalent calls.\n<table>\n  <tr><th>Example</th><th>&rarr;</th><th>Replacement</th></tr>\n\n  <tr>\n    <td><code>assertEquals(<b>true</b>, x());</code></td>\n    <td></td>\n    <td><code>assertTrue(x());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(y() != null);</code></td>\n    <td></td>\n    <td><code>assertNotNull(y());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(z == z());</code></td>\n    <td></td>\n    <td><code>assertSame(z, z());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(a.equals(a()));</code></td>\n    <td></td>\n    <td><code>assertEquals(a, a());</code></td>\n  </tr>\n  <tr>\n    <td><code>assertTrue(<b>false</b>);</code></td>\n    <td></td>\n    <td><code>fail();</code></td>\n  </tr>\n</table>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "MisorderedAssertEqualsArguments",
          "displayName": "Misordered 'assertEquals()' arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>assertEquals()</code> that have the expected argument and the actual argument in the wrong order.\n<p>\n  For JUnit 3, 4, and 5 the correct order is <code>(expected, actual)</code>.\n  For TestNG the correct order is <code>(actual, expected)</code>.\n</p>\n<p>\n  Such calls will behave fine for assertions that pass, but may give confusing error reports on failure.\n  Use the quick-fix to flip the order of the arguments.\n</p>\n<p><b>Example (JUnit):</b></p>\n<pre><code>\n  assertEquals(actual, expected)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  assertEquals(expected, actual)\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssertWithoutMessage",
          "displayName": "Message missing on assertion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>assertXXX()</code> or <code>fail()</code> without an error message string argument.\nAn error message on assertion failure may help clarify the test case's intent.\n<p><b>Example:</b></p>\n<pre><code>\n  assertTrue(checkValid());\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>assertTrue(checkValid(), \"|\");</code></pre>\n<p>\n  The message argument is added before or after the existing arguments according to the assertions framework that you use.\n</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantAssertArgument",
          "displayName": "Constant assert argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constant arguments in <code>assertTrue()</code>, <code>assertFalse()</code>,\n<code>assertNull()</code>, and <code>assertNotNull()</code> calls.\n<p>\n  Calls to these methods with\n  constant arguments will either always succeed or always fail.\n  Such statements can easily be left over after refactoring and are probably not intended.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  assertNotNull(\"foo\");\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssertBetweenInconvertibleTypes",
          "displayName": "'assertEquals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to assertion methods when the \"expected\" and \"actual\" arguments are of incompatible types.</p>\n<p>Such calls often indicate that there is a bug in the test.\n  This inspection checks the relevant JUnit, TestNG, and AssertJ methods.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  assertEquals(\"1\", 1);\n  assertNotSame(new int[0], 0);\n\n  // weak warning, may just test the equals() contract\n  assertThat(foo).as(\"user type\").isNotEqualTo(bar);\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "MaskedAssertion",
          "displayName": "Assertion is masked via 'catch'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports assert statements and test framework assertions that are masked using catch blocks.</p>\n<p>Such assertions will never fail, as <code>AssertionError</code> will be caught and silently ignored.</p>\n<p><b>Example 1:</b></p>\n<pre><code>\nvoid javaAssertion() {\n  try {\n    ...\n    assert 1 == 2; // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</code></pre>\n<p><b>Example 2:</b></p>\n<pre><code>\n@Test\nvoid testWithAssertJ() {\n  try {\n    ...\n    assertThat(1).as(\"test\").isEqualTo(2); // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</code></pre>\n<p><b>Example 3:</b></p>\n<pre><code>\n@Test\nvoid testWithJunit() {\n  try {\n    ...\n    assertEquals(1, 2); // the assertion is silently ignored\n  } catch (AssertionError e) {}\n}\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Velocity",
      "inspections": [
        {
          "shortName": "VtlFileReferencesInspection",
          "displayName": "File references inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "212.4746.2",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if Velocity file references in <code>#include</code> and <code>#parse</code> directives are resolved incorrectly.\n</body>\n</html>"
        },
        {
          "shortName": "VtlInterpolationsInspection",
          "displayName": "Well-formedness inspection",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "212.4746.2",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports illegal usages of formal notation within <code>#macro</code> and <code>#set</code> directives.\n</body>\n</html>"
        },
        {
          "shortName": "VtlDirectiveArgsInspection",
          "displayName": "Directive arguments inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "212.4746.2",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports illegal values or argument types of Velocity directives.\n</body>\n</html>"
        },
        {
          "shortName": "VtlReferencesInspection",
          "displayName": "References inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "212.4746.2",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if Velocity references are resolved incorrectly.\n</body>\n</html>"
        },
        {
          "shortName": "VtlTypesInspection",
          "displayName": "Types inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.velocity",
          "pluginVersion": "212.4746.2",
          "language": "VTL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if binary and unary expressions have operands with incorrect types.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Style issues",
      "inspections": [
        {
          "shortName": "ReplaceSubstringWithSubstringBefore",
          "displayName": "'substring' call should be replaced with 'substringBefore'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls like <code>s.substring(0, s.indexOf(x))</code> that can be replaced with <code>s.substringBefore(x)</code>.\n<p>Using <code>substringBefore()</code> makes your code simpler.</p>\n<p>The quick-fix replaces the <code>substring</code> call with <code>substringBefore</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(s: String) {\n      s.substring(0, s.indexOf('x'))\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(s: String) {\n      s.substringBefore('x')\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantElseInIf",
          "displayName": "Redundant 'else' in 'if'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant <code>else</code> in <code>if</code> with <code>return</code></p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(arg: Boolean): Int {\n      if (arg) return 0\n      else { // This else is redundant, code in braces could be just shifted left\n          someCode()\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(arg: Boolean): Int {\n      if (arg) return 0\n      someCode()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UseExpressionBody",
          "displayName": "Expression body syntax is preferable here",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>return</code> expressions (one-liners or <code>when</code>) that can be replaced with expression body syntax.\n<p>Expression body syntax is recommended by the <a href=\"https://kotlinlang.org/docs/coding-conventions.html#functions\">style guide</a>.</p>\n<p><b>Convert to expression body</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun sign(x: Int): Int {\n      return when { // &lt;== can be simplified\n          x &lt; 0 -> -1\n          x > 0 -> 1\n          else -> 0\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun sign(x: Int): Int = when {\n      x &lt; 0 -> -1\n      x > 0 -> 1\n      else -> 0\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableCall",
          "displayName": "Library function call could be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports library function calls which could be replaced by simplified one.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces the function calls with another one.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(list: List&lt;Any&gt;) {\n      list.filter { it is String }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(list: List&lt;Any&gt;) {\n      list.filterIsInstance&lt;String&gt;()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "FoldInitializerAndIfToElvis",
          "displayName": "If-Null return/break/... foldable to '?:'",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an <b>if</b> expression checking variable being null or not right after initializing it that can be converted into an elvis operator in the initializer.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplacePutWithAssignment",
          "displayName": "'map.put()' can be converted to assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>map.put</code> function calls that can be replaced with indexing operator (<code>[]</code>).\n<p>Using syntactic sugar makes your code simpler.</p>\n<p>The quick-fix replaces <code>put</code> call with the assignment.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(map: MutableMap&lt;Int, String&gt;) {\n      map.put(42, &quot;foo&quot;)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(map: MutableMap&lt;Int, String&gt;) {\n      map[42] = &quot;foo&quot;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MemberVisibilityCanBePrivate",
          "displayName": "Class member can have 'private' visibility",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations that can be made <code>private</code> to follow the encapsulation principle.\n</body>\n</html>"
        },
        {
          "shortName": "JoinDeclarationAndAssignment",
          "displayName": "Join declaration and assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports property declarations that can be joined with the following assignment.\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitThis",
          "displayName": "Implicit 'this'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of implicit <b>this</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantRunCatching",
          "displayName": "Redundant 'runCatching' call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>runCatching</code> calls that are immediately followed by <code>getOrThrow</code>.\nSuch calls can be replaced with just <code>run</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo() = runCatching { doSomething() }.getOrThrow()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() = run { doSomething() }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeVal",
          "displayName": "Local 'var' is never modified and can be declared as 'val'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables declared with a <code>var</code> keyword that are never modified.\n<p>Kotlin encourages to declare practically immutable variables with a <code>val</code> keyword, ensuring that their value will never change.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun example() {\n      var primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)\n      var fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)\n      print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n  }\n</code></pre>\n<p>A quick-fix is suggested to replace the <code>var</code> keyword with <code>val</code>:</p>\n<pre><code>\n  fun example() {\n      val primeNumbers = listOf(1, 2, 3, 5, 7, 11, 13)\n      val fibonacciNumbers = listOf(1, 1, 2, 3, 5, 8, 13)\n      print(\"Same numbers: \" + primeNumbers.intersect(fibonacciNumbers))\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "AddVarianceModifier",
          "displayName": "Type parameter can have 'in' or 'out' variance",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports type parameters that can have <code>in</code> or <code>out</code> variance.\n<p>Usage of <code>in</code> and <code>out</code> variance allows for more precise type inference in Kotlin and clearer code semantics.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Box&lt;T&gt;(val obj: T)\n\n  fun consumeString(box: Box&lt;String&gt;) {}\n  fun consumeCharSequence(box: Box&lt;CharSequence&gt;) {}\n\n  fun usage(box: Box&lt;String&gt;) {\n      consumeString(box)\n      consumeCharSequence(box) // Compilation error\n  }\n</code></pre>\n<p>A quick-fix is suggested to add the matching variance modifier:</p>\n<pre><code>\n  class Box&lt;out T&gt;(val obj: T)\n\n  fun consumeString(box: Box&lt;String&gt;) {}\n  fun consumeCharSequence(box: Box&lt;CharSequence&gt;) {}\n\n  fun usage(box: Box&lt;String&gt;) ++{\n      consumeString(box)\n      consumeCharSequence(box) // OK\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceGetOrSet",
          "displayName": "Explicit 'get' or 'set' call",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports explicit calls to <code>get</code> or <code>set</code> functions which can be replaced by an indexing operator <code>[]</code>.\n<p>\n    Kotlin allows custom implementations for the predefined set of operators on types.\n    To overload an operator, you can mark the corresponding function with the <code>operator</code> modifier:\n    <pre><code>\n  operator fun get(index: Int) {}\n  operator fun set(index: Int, value: Int) {}\n    </code></pre>\n\nThe functions above correspond to the indexing operator.\n\n<p><b>Example:</b></p>\n<pre><code>  class Test {\n      operator fun get(i: Int): Int = 0\n  }\n\n  fun test() {\n      Test().get(0) // replaceable 'get()'\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  class Test {\n      operator fun get(i: Int): Int = 0\n  }\n\n  fun test() {\n      Test()[0]\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "JavaMapForEach",
          "displayName": "Java Map.forEach method call should be replaced with Kotlin's forEach",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a Java Map.<b>forEach</b> method call replaceable by Kotlin's <b>forEach</b>.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertCallChainIntoSequence",
          "displayName": "Call chain on collection could be converted into 'Sequence' to improve performance",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports call chain on a <code>Collection</code> should be converted into <b>Sequence</b>.\n<p>Each <code>Collection</code> transforming function (such as <code>map()</code> or <code>filter()</code>) creates a new\n    <code>Collection</code> (typically a <code>List</code> or <code>Set</code>) under the hood.\n    In case of multiple consequent calls, and a huge number of items in a <code>Collection</code>, memory traffic might be significant.\n    In such a case, using <code>Sequence</code> is preferred.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Entity(val key: String, val value: String)\n\n  fun getValues(lines: List&lt;String&gt;) = lines\n      .filter { it.isNotEmpty() }\n      .map { it.split(',', limit = 2) }\n      .filter { it.size == 2 }\n      .map { Entity(it[0], it[1]) }\n</code></pre>\n<p>A quick-fix is suggested to wrap call chain into <code>asSequence()</code> and <code>toList()</code>:</p>\n<pre><code>\n  class Entity(val key: String, val value: String)\n\n  fun getValues(lines: List&lt;String&gt;) = lines\n      .asSequence()\n      .filter { it.isNotEmpty() }\n      .map { it.split(',', limit = 2) }\n      .filter { it.size == 2 }\n      .map { Entity(it[0], it[1]) }\n      .toList()\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceStringFormatWithLiteral",
          "displayName": "'String.format' call can be replaced with string templates",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>String.format</code> calls that can be replaced with string templates.\n<p>Using string templates makes your code simpler.</p>\n<p>The quick-fix replaces the call with a string template.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      val id = &quot;abc&quot;\n      val date = &quot;123&quot;\n      val s = String.format(&quot;%s_%s_%s&quot;, id, date, id)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      val id = &quot;abc&quot;\n      val date = &quot;123&quot;\n      val s = &quot;${id}_${date}_$id&quot;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConvertLambdaToReference",
          "displayName": "Can be replaced with function reference",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function literal expressions that can be replaced with function references.\n<p>Replacing lambdas with function references often makes code look more concise and understandable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun Int.isEven() = this % 2 == 0\n\n  fun example() {\n      val numbers = listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers = numbers.filter { it.isEven() }\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  fun Int.isEven() = this % 2 == 0\n\n  fun example() {\n      val numbers = listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers = numbers.filter(Int::isEven)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "FunctionWithLambdaExpressionBody",
          "displayName": "Function with `= { ... }` and inferred return type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function with `<b>= { ... }</b>` and inferred return type.\n\n<pre>\nfun sum(a: Int, b: Int) = { a + b } // The return type of this function is '() -> Int'.\n</pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "ConvertSecondaryConstructorToPrimary",
          "displayName": "Convert to primary constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a secondary constructor that can be replaced with a more concise primary constructor.\n<p><b>Example:</b></p>\n<pre><code>\n  class User {\n      val name: String\n\n      constructor(name: String) {\n          this.name = name\n      }\n  }\n</code></pre>\n<p>A quick-fix is suggested to migrate code automatically:</p>\n<pre><code>\n  class User(val name: String) {\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ScopeFunctionConversion",
          "displayName": "Scope function can be converted to another one",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports scope functions (<code>let</code>, <code>run</code>, <code>apply</code>, <code>also</code>) that can be converted between each other.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces the scope function to another one.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  val x = &quot;&quot;.let {\n      it.length\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  val x = &quot;&quot;.run {\n      length\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConvertToStringTemplate",
          "displayName": "String concatenation that can be converted to string template",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports string concatenation that can be converted to a string template.\n<p>Using string templates is generally preferable as it makes code easier to read.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun example() {\n      val capitals = mapOf(\"France\" to \"Paris\", \"Spain\" to \"Madrid\")\n      for ((country, capital) in capitals) {\n          print(capital + \" is a capital of \" + country)\n      }\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  fun example() {\n      val capitals = mapOf(\"France\" to \"Paris\", \"Spain\" to \"Madrid\")\n      for ((country, capital) in capitals) {\n          print(\"$capital is a capital of $country\")\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "TrailingComma",
          "displayName": "Trailing comma recommendations",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports trailing commas that are not follow the recommended <a href=\"https://kotlinlang.org/docs/coding-conventions.html#trailing-commas\">style guide</a>.\n</body>\n</html>\n"
        },
        {
          "shortName": "SortModifiers",
          "displayName": "Non-canonical modifier order",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports modifiers that do not follow the order recommended by the <a href=\"https://kotlinlang.org/docs/coding-conventions.html#modifiers-order\">style guide</a>.\n<p><b>Sort modifiers</b> quick-fix can be used to amend the code automatically.</p>\n<p>Examples:</p>\n<pre><code>\n  private inline fun correctOrder(f: () -> Unit) {} // &lt;== Ok\n\n  infix private fun Int.wrongOrder(expr: Int) {} // &lt;== wrong order, quick-fix amends the modifiers to \"private infix\"\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantObjectTypeCheck",
          "displayName": "Non-idiomatic 'is' type check for an object",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports non-idiomatic <code>is</code> type checks for an object.</p>\n<p>It's recommended to replace such checks with reference comparison.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  object Foo\n\n  fun foo(arg: Any) = when {\n      arg <b>is</b> Foo -> ...\n      arg <b>!is</b> Foo -> ...\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  object Foo\n\n  fun foo(arg: Any) = when {\n      arg <b>===</b> Foo -> ...\n      arg <b>!==</b> Foo -> ...\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyBooleanWithConstants",
          "displayName": "Boolean expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports boolean expression parts that can be reduced to constants.\n<p>The quick-fix simplifies the condition.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun use(arg: Boolean) {\n      if (false == arg) {\n\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun use(arg: Boolean) {\n      if (!arg) {\n\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ObjectLiteralToLambda",
          "displayName": "Object literal can be converted to lambda",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports anonymous object literals implementing a Java interface with a single abstract method that can be converted into a call with a lambda expression.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithTake",
          "displayName": "'substring' call should be replaced with 'take' call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls like <code>s.substring(0, x)</code> that can be replaced with <code>s.take(x)</code>.\n<p>Using <code>take()</code> makes your code simpler.</p>\n<p>The quick-fix replaces the <code>substring</code> call with <code>take()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(s: String) {\n      s.substring(0, 10)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(s: String) {\n      s.take(10)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssociateFunction",
          "displayName": "'associate' can be replaced with 'associateBy' or 'associateWith'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>associate()</code> and <code>associateTo()</code> that can be replaced with <code>associateBy()</code> or <code>associateWith()</code>.\n<p>\n    Both functions accept a transformer function applied to elements of a given sequence or collection (as a receiver).\n    The pairs are then used to build the resulting <code>Map</code>.\n</p>\n<p>\n    Given the transformer refers to <code>it</code>, the <code>associate[To]()</code> call can be replaced with more performant <code>associateBy()</code>\n    or <code>associateWith()</code>.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>  fun getKey(i: Int) = 1L\n  fun getValue(i: Int) = 1L\n\n  fun test() {\n      arrayOf(1).associate { getKey(it) to it }  // replaceable 'associate()'\n      listOf(1).associate { it to getValue(it) } // replaceable 'associate()'\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun getKey(i: Int) = 1L\n  fun getValue(i: Int) = 1L\n\n  fun test() {\n      arrayOf(1).associateBy { getKey(it) }\n      listOf(1).associateWith { getValue(it) }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConvertReferenceToLambda",
          "displayName": "Can be replaced with lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a function reference expression that can be replaced with a function literal (lambda).\n<p>\n    Sometimes, passing a lambda looks more straightforward and more consistent with the rest of the code.\n    Also, the fix might be handy if you need to replace a simple call with something more complex.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun Int.isEven() = this % 2 == 0\n\n  fun example() {\n      val numbers = listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers = numbers.filter(Int::isEven)\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  fun Int.isEven() = this % 2 == 0\n\n  fun example() {\n      val numbers = listOf(1, 2, 4, 7, 9, 10)\n      val evenNumbers = numbers.filter { it.isEven() }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "IfThenToElvis",
          "displayName": "If-Then foldable to '?:'",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>if-then</b> expressions that can be folded into elvis (<b>?:</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousAsDynamic",
          "displayName": "Suspicious 'asDynamic' member invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>asDynamic</code> function on a receiver of dynamic type.\n<p><code>asDynamic</code> function has no effect for expressions of dynamic type.</p>\n<p><code>asDynamic</code> function on a receiver of dynamic type can lead to runtime problems because <code>asDynamic</code>\n    will be executed in JavaScript environment, and such function may not be present at runtime.\n    The intended way is to use this function on usual Kotlin type.</p>\n<p><b>Remove \"asDynamic\" invocation</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun wrongUsage(d: Dynamic) {\n     d.asDynamic().foo() // &lt;== redundant, quick-fix simplifies the call expression to \"d.foo()\"\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceNotNullAssertionWithElvisReturn",
          "displayName": "Not-null assertion can be replaced with 'return'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports not-null assertion (<code>!!</code>) calls that can be replaced with the elvis operator and return (<code>?: return</code>).\n<p>A not-null assertion can lead to NPE (NullPointerException) that is not expected. Avoiding the use of <code>!!</code> is good practice.</p>\n<p>The quick-fix replaces the not-null assertion with <code>return</code> or <code>return null</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(number: Int?) {\n      val x = number!!\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(number: Int?) {\n      val x = number ?: return\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CascadeIf",
          "displayName": "Cascade if can be replaced with when",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements with three or more branches that can be replaced with a <code>when</code> expression.\n<p><b>Example:</b></p>\n<pre><code>\n  fun checkIdentifier(id: String) {\n      fun Char.isIdentifierStart() = this in 'A'..'z'\n      fun Char.isIdentifierPart() = isIdentifierStart() || this in '0'..'9'\n\n      if (id.isEmpty()) {\n          print(\"Identifier is empty\")\n      } else if (!id.first().isIdentifierStart()) {\n          print(\"Identifier should start with a letter\")\n      } else if (!id.subSequence(1, id.length).all(Char::isIdentifierPart)) {\n          print(\"Identifier should contain only letters and numbers\")\n      }\n  }\n</code></pre>\n<p>A quick-fix is suggested to convert <code>if</code> expression to a <code>when</code> one:</p>\n<pre><code>\n  fun checkIdentifier(id: String) {\n      fun Char.isIdentifierStart() = this in 'A'..'z'\n      fun Char.isIdentifierPart() = isIdentifierStart() || this in '0'..'9'\n\n      when {\n          id.isEmpty() -> {\n              print(\"Identifier is empty\")\n          }\n          !id.first().isIdentifierStart() -> {\n              print(\"Identifier should start with a letter\")\n          }\n          !id.subSequence(1, id.length).all(Char::isIdentifierPart) -> {\n              print(\"Identifier should contain only letters and numbers\")\n          }\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NullableBooleanElvis",
          "displayName": "Equality check can be used instead of elvis for nullable boolean check",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases when an equality check should be used instead of the elvis operator.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSubstringWithIndexingOperation",
          "displayName": "'substring' call should be replaced with indexing operator",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls like <code>\"abc\".substring(0, 1)</code> that can be replaced with <code>\"abc\"[0]</code>.\n<p>Obtaining the element by index makes your code simpler.</p>\n<p>The quick-fix replaces the <code>substring</code> call with the indexing operator.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo() {\n      &quot;abc&quot;.substring(0, 1)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() {\n      &quot;abc&quot;[0]\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyNestedEachInScopeFunction",
          "displayName": "Scope function with nested forEach can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>forEach</code> functions in the scope functions such as <code>also</code> or <code>apply</code> that can be simplified.\n<p><b>Convert forEach call to onEach</b> quick-fix can be used to amend the code automatically.</p>\n<p>Examples:</p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;) {\n      val x = list.also { it.forEach { it + 4 } }.toString()\n      val y = list.apply { forEach { println(it) } }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;) {\n      val x = list.onEach { it + 4 }.toString()\n      val y = list.onEach { println(it) }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceCallWithBinaryOperator",
          "displayName": "Can be replaced with binary operator",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function calls that can be replaced with binary operators, in particular comparison-related ones.\n<p><b>Example:</b></p>\n<pre><code>  fun test(): Boolean {\n      return 2.compareTo(1) > 0 // replaceable 'compareTo()'\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun test(): Boolean {\n      return 2 > 1\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "BooleanLiteralArgument",
          "displayName": "Boolean literal argument without parameter name",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports call arguments with <code>Boolean</code> type without an explicit parameter name specified.\n<p>\n    When multiple boolean literals are passed sequentially, it's easy to forget parameter ordering and make a mistake.\n    Explicit parameter names allow for easier code reading and understanding.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}\n\n  fun usage() {\n      check(true, false, true) // What does this mean?\n  }\n</code></pre>\n<p>A quick-fix is suggested to add missing parameter names:</p>\n<pre><code>\n  fun check(checkName: Boolean, checkAddress: Boolean, checkPhone: Boolean) {}\n\n  fun usage() {\n      check(checkName = true, checkAddress = false, checkPhone = true)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantAsync",
          "displayName": "Redundant 'async' call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n    Reports <code>async</code> calls that are immediately followed by <code>await</code>.\n    Such calls can be replaced with blocking calls.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  suspend fun test(ctx: CoroutineContext, scope: CoroutineScope) {\n      scope.async(ctx) { doSomeJob() }.await()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  suspend fun test(ctx: CoroutineContext, scope: CoroutineScope) {\n      withContext(scope.coroutineContext + ctx) { doSomeJob() }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceToStringWithStringTemplate",
          "displayName": "Call of 'toString' could be replaced with string template",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>toString</code> function calls that can be replaced with a string template.\n<p>Using string templates makes your code simpler.</p>\n<p>The quick-fix replaces <code>toString</code> with a string template.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(): String {\n      val x = 1\n      return x.toString()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(): String {\n      val x = 1\n      return &quot;$x&quot;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceCollectionCountWithSize",
          "displayName": "Collection count can be converted to size",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Collection&lt;T&gt;.count()</code>.\n<p>\n    This function call can be replaced with <code>.size</code>.\n</p>\n<p>\n    <code>.size</code> form ensures that the operation is O(1) and won't allocate extra objects, whereas\n    <code>count()</code> could be confused with <code>Iterable&lt;T&gt;.count()</code>, which is O(n) and allocating.\n    <br>\n</p>\n<p><b>Example:</b></p>\n<pre><code>  fun foo() {\n      var list = listOf(1,2,3)\n      list.count() // replaceable 'count()'\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun foo() {\n      var list = listOf(1,2,3)\n      list.size\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveVariableDeclarationIntoWhen",
          "displayName": "Variable declaration could be moved inside `when`",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variable declarations that can be moved inside a <code>when</code> expression.\n</body>\n</html>"
        },
        {
          "shortName": "ConvertTwoComparisonsToRangeCheck",
          "displayName": "Two comparisons should be converted to a range check",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports two consecutive comparisons that can be converted to a range check.\n<p>Checking against a range makes code simpler by removing test subject duplication.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun checkMonth(month: Int): Boolean {\n      return month >= 1 && month <= 12\n  }\n</code></pre>\n<p>A quick-fix is suggested to replace the comparison-based check into a range one:</p>\n<pre><code>\n  fun checkMonth(month: Int): Boolean {\n      return month in 1..12\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Destructure",
          "displayName": "Use destructuring declaration",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations that can be destructured.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceGuardClauseWithFunctionCall",
          "displayName": "Guard clause can be replaced with Kotlin's function call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports guard clauses that can be replaced with a function call.\n<p><b>Example:</b></p>\n<pre><code>  fun test(foo: Int?) {\n      if (foo == null) throw IllegalArgumentException(\"foo\") // replaceable clause\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun test(foo: Int?) {\n      checkNotNull(foo)\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceSubstringWithSubstringAfter",
          "displayName": "'substring' call should be replaced with 'substringAfter'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls like <code>s.substring(s.indexOf(x))</code> that can be replaced with <code>s.substringAfter(x)</code>.\n<p>Using <code>s.substringAfter(x)</code> makes your code simpler.</p>\n<p>The quick-fix replaces the <code>substring</code> call with <code>substringAfter</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(s: String) {\n      s.substring(s.indexOf('x'))\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(s: String) {\n      s.substringAfter('x')\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceRangeToWithUntil",
          "displayName": "'rangeTo' or the '..' call should be replaced with 'until'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>rangeTo</code> or the <code>..</code> operator instead of calls to <code>until</code>.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces <code>rangeTo</code> or the <code>..</code> call with <code>until</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(a: Int) {\n      for (i in 0..a - 1) {\n\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(a: Int) {\n      for (i in 0 until a) {\n\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "UnlabeledReturnInsideLambda",
          "displayName": "Unlabeled return inside lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unlabeled <code>return</code> expressions inside inline lambda.\n<p>Such expressions can be confusing because it might be unclear which scope belongs to <code>return</code>.</p>\n<p><b>Change to return@…</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;) {\n      list.forEach {\n          // This return expression returns from the function test\n          // One can change it to return@forEach to change the scope\n          if (it == 10) return\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;) {\n      list.forEach {\n          if (it == 10) return@test\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceManualRangeWithIndicesCalls",
          "displayName": "Range can be converted to indices or iteration",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>until</code> and <code>rangeTo</code> operators that can be replaced with <code>Collection.indices</code> or iteration over collection inside <code>for</code> loop.\n<p>Using syntactic sugar makes your code simpler.</p>\n<p>The quick-fix replaces the manual range with the corresponding construction.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main(args: Array&lt;String&gt;) {\n      for (index in 0..args.size - 1) {\n          println(args[index])\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main(args: Array&lt;String&gt;) {\n      for (element in args) {\n          println(element)\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceWithOperatorAssignment",
          "displayName": "Assignment can be replaced with operator assignment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports modifications of variables with a simple assignment (such as <code>y = y + x</code>) that can be replaced with an operator assignment.\n<p>The quick-fix replaces the assignment with an assignment operator.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo() {\n      val list = mutableListOf(1, 2, 3)\n      list = list + 4\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() {\n      val list = mutableListOf(1, 2, 3)\n      list += 4\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IfThenToSafeAccess",
          "displayName": "If-Then foldable to '?.'",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>if-then</b> expressions that can be folded into safe-access (<b>?.</b>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSubstringWithDropLast",
          "displayName": "'substring' call should be replaced with 'dropLast' call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls like <code>s.substring(0, s.length - x)</code> that can be replaced with <code>s.dropLast(x)</code>.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces the <code>substring</code> call with <code>dropLast</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(s: String) {\n      s.substring(0, s.length - 5)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(s: String) {\n      s.dropLast(5)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyNegatedBinaryExpression",
          "displayName": "Negated boolean expression can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports negated binary expressions that can be simplified.\n<p>The quick-fix simplifies the binary expression.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(n: Int) {\n      !(0 == 1)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(n: Int) {\n      0 != 1\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UsePropertyAccessSyntax",
          "displayName": "Accessor call that can be replaced with property access syntax",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Java <code>get</code> and <code>set</code> method calls that can be replaced with the Kotlin synthetic properties.\n<p><b>Use property access syntax</b> quick-fix can be used to amen the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  // Java:\n  public class JavaClassWithGetter {\n      private final String expr = \"result\";\n\n      // ...\n\n      public String getExpr() {\n          return expr;\n      }\n  }\n</code></pre>\n<pre><code>\n  // Kotlin:\n  fun test(j: JavaClassWithGetter) {\n      // ...\n      j.getExpr() // &lt;== A quick-fix simplifies the expression to 'j.expr'\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ProtectedInFinal",
          "displayName": "'protected' visibility is effectively 'private' in a final class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>protected</code> visibility used inside of a non-<code>final</code> class.\nIn such cases <code>protected</code> members are accessible only in the class itself, so they are effectively <code>private</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  class FinalClass {\n      <b>protected</b> fun foo() {}\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class FinalClass {\n      <b>private</b> fun foo() {}\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceNegatedIsEmptyWithIsNotEmpty",
          "displayName": "Negated call can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports negation <code>isEmpty()</code> and <code>isNotEmpty()</code> for collections and <code>String</code>, or <code>isBlank()</code> and <code>isNotBlank()</code> for <code>String</code>.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces the negation call with the corresponding call from the Standard Library.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      val list = listOf(1,2,3)\n      if (!list.isEmpty()) {\n          // do smth\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      val list = listOf(1,2,3)\n      if (list.isNotEmpty()) {\n          // do smth\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Reformat",
          "displayName": "File is not formatted according to project settings",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports places that are not formatted according to the project settings.\n<p>Use the 'Reformat Code' and 'Reformat File...' quick-fixes to format either the highlighted code block\nor the entire file accordingly.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "NestedLambdaShadowedImplicitParameter",
          "displayName": "Nested lambda has shadowed implicit parameter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports nested lambdas with shadowed implicit parameters.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnclearPrecedenceOfBinaryExpression",
          "displayName": "Multiple operators with different precedence",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports binary expressions that consist of different operators without parentheses.\n<p>Such expressions can be less readable due to different <a href=\"https://kotlinlang.org/docs/reference/grammar.html#expressions\">precedence rules</a> of operators.</p>\n<p>Example:</p>\n<pre>\n  fun foo(b: Boolean?, i: Int?) {\n      val x = b ?: i == null // evaluated as `(b ?: i) == null`\n      val y = i ?: 0 + 1 // evaluated as `i ?: (0 + 1)`\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConvertTryFinallyToUseCall",
          "displayName": "Convert try / finally to use() call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a <code>try-finally</code> block with <code>resource.close()</code> in <code>finally</code> which can be converted to a <code>resource.use()</code> call.\n<p><code>use()</code> is easier to read and less error-prone as there is no need in explicit <code>close()</code> call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun example() {\n      val reader = File(\"file.txt\").bufferedReader()\n      try {\n          reader.lineSequence().forEach(::print)\n      } finally {\n          reader.close()\n      }\n  }\n</code></pre>\n<p>After the fix applied and minor clean-up:</p>\n<pre><code>\n  fun example() {\n      File(\"file.txt\").bufferedReader().use { reader ->\n          reader.lineSequence().forEach(::print)\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantAsSequence",
          "displayName": "Redundant 'asSequence' call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant <code>asSequence()</code> call that can never have a positive performance effect.</p>\n<p>Normally, <code>asSequence</code> speeds up collection processing that includes multiple operations by performing them lazily.\nHowever, if a terminal operation (such as <code>toList()</code>) is used right after <code>asSequence()</code>, this doesn't give\nyou any positive performance effect.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(list: List&lt;String&gt;) {\n      list.<b>asSequence()</b>.last()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(list: List&lt;String&gt;) {\n      list.last()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "IntroduceWhenSubject",
          "displayName": "'when' that can be simplified by introducing an argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a <b>when</b> expression that can be simplified by introducing a subject argument.\n</body>\n</html>\n"
        },
        {
          "shortName": "ConvertPairConstructorToToFunction",
          "displayName": "Convert Pair constructor to 'to' function",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a <code>Pair</code> constructor invocation that can be replaced with a <code>to()</code> infix function call.\n<p>\n    Explicit constructor invocations may add verbosity, especially if used multiple times.\n    Replacing constructor calls with <code>to()</code> makes code easier to read and maintain.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  val countries = mapOf(\n      Pair(\"France\", \"Paris\"),\n      Pair(\"Spain\", \"Madrid\"),\n      Pair(\"Germany\", \"Berlin\")\n  )\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  val countries = mapOf(\n      \"France\" to \"Paris\",\n      \"Spain\" to \"Madrid\",\n      \"Germany\" to \"Berlin\"\n  )\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSizeCheckWithIsNotEmpty",
          "displayName": "Size check can be replaced with 'isNotEmpty()'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports size checks of <code>Collections/Array/String</code> that should be replaced with <code>isNotEmpty()</code>.\n<p>Using <code>isNotEmpty()</code> makes your code simpler.</p>\n<p>The quick-fix replaces the size check with <code>isNotEmpty()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo() {\n      val arrayOf = arrayOf(1, 2, 3)\n      arrayOf.size &gt; 0\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() {\n      val arrayOf = arrayOf(1, 2, 3)\n      arrayOf.isNotEmpty()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssertBooleanWithAssertEquality",
          "displayName": "Assert boolean could be replaced with assert equality",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>assertTrue()</code> and <code>assertFalse()</code> that can be replaced with assert equality functions.\n<p>\n    <code>assertEquals()</code>, <code>assertSame()</code>, and their negating counterparts (-Not-) provide more informative messages on\n    failure.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  assertTrue(a == b)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  assertEquals(a, b)\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "OptionalExpectation",
          "displayName": "Optionally expected annotation has no actual annotation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports optionally expected annotations without actual annotation in some platform modules.\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromAnnotationEntry",
          "displayName": "Remove unnecessary parentheses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant empty parentheses in annotation entries.\n<p>Use the 'Remove unnecessary parentheses' quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  annotation class MyAnnotationA\n  annotation class MyAnnotationB(val x: Int)\n  annotation class MyAnnotationC(val x: Int = 10) // default value is present\n\n  @MyAnnotationA() // &lt;== parentheses are redundant\n  fun testA() {\n  }\n\n  @MyAnnotationB() // &lt;== missing argument, parentheses are required\n  fun testB() {\n  }\n\n  @MyAnnotationC() // &lt;== parentheses are redundant\n  fun testC() {\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnusedMainParameter",
          "displayName": "Main parameter is not necessary",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>main</code> function with an unused single parameter.\n</body>\n</html>\n"
        },
        {
          "shortName": "DirectUseOfResultType",
          "displayName": "Function returning Result directly",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports functions that return value of <b>Result</b> type.\n<p>\n<b>Result</b> should never be used as a return type.\nThrow exception, or use a nullable type, or use domain-specific result class to indicate failure.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "MayBeConstant",
          "displayName": "Might be 'const'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports top-level <code>val</code> properties in objects that might be declared as <code>const</code>\nfor better performance and Java interoperability.\n<p><b>Example:</b></p>\n<pre><code>\n  object A {\n      val foo = 1\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  object A {\n      const val foo = 1\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifiableCallChain",
          "displayName": "Call chain on collection type can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports two-call chains replaceable by a single call.\n<p>It can help you to avoid redundant code execution.</p>\n<p>The quick-fix replaces the call chain with a single call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      listOf(1, 2, 3).filter { it &gt; 1 }.count()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      listOf(1, 2, 3).count { it &gt; 1 }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "LiftReturnOrAssignment",
          "displayName": "Return or assignment can be lifted out",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code>, <code>when</code>, and <code>try</code> statements that can be converted to expressions\nby lifting the <code>return</code> statement or an assignment out.\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(arg: Int): String {\n      when (arg) {\n          0 -> return \"Zero\"\n          1 -> return \"One\"\n          else -> return \"Multiple\"\n      }\n  }\n</code></pre>\nAfter the quick-fix is applied:\n<pre><code>\n  fun foo(arg: Int): String {\n      return when (arg) {\n          0 -> \"Zero\"\n          1 -> \"One\"\n          else -> \"Multiple\"\n      }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceToWithInfixForm",
          "displayName": "'to' call should be replaced with infix form",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>to</code> function calls that can be replaced with the infix form.\n<p>Using the infix form makes your code simpler.</p>\n<p>The quick-fix replaces <code>to</code> with the infix form.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(a: Int, b: Int) {\n      val pair = a.to(b)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(a: Int, b: Int) {\n      val pair = a to b\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceJavaStaticMethodWithKotlinAnalog",
          "displayName": "Java methods should be replaced with Kotlin analog",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a Java method call that can be replaced with a Kotlin function, for example, <code>System.out.println()</code>.\n<p>Replacing the code gets rid of the dependency to Java and makes the idiomatic Kotlin code.</p>\n<p>The quick-fix replaces the Java method calls on the same Kotlin call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  import java.util.Arrays\n\n  fun main() {\n      val a = Arrays.asList(1, 3, null)\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      val a = listOf(1, 3, null)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "DeferredIsResult",
          "displayName": "Function returning Deferred directly",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports functions with <code>kotlinx.coroutines.Deferred</code> result.\n<p>\n    Functions that use <code>Deferred</code> as return type should have a name with suffix <code>Async</code>.\n    Otherwise, it's recommended to turn a function into a <code>suspend</code> one and unwrap <code>Deferred</code> inside it.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun calcEverything(): Deferred&lt;Int&gt; {\n      return CompletableDeferred(42)\n  }\n</code></pre>\n<p>After the fix applied (add the <code>Async</code> suffix):</p>\n<pre><code>\n  fun calcEverythingAsync(): Deferred&lt;Int&gt; {\n      return CompletableDeferred(42)\n  }\n</code></pre>\n<p>After the fix applied (turn the function into a <code>suspend</code> one):</p>\n<pre><code>\n  suspend fun calcEverything(): Int {\n      return CompletableDeferred(42).await()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "JavaCollectionsStaticMethod",
          "displayName": "Java Collections static method call can be replaced with Kotlin stdlib",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a Java <b>Collections</b> static method call replaceable by Kotlin stdlib, e.g. <b>Collections.sort(list)</b>.\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceSizeZeroCheckWithIsEmpty",
          "displayName": "Size zero check can be replaced with 'isEmpty()'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>size == 0</code> checks on <code>Collections/Array/String</code> that should be replaced with <code>isEmpty()</code>.\n<p>Using <code>isEmpty()</code> makes your code simpler.</p>\n<p>The quick-fix replaces the size check with <code>isEmpty()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo() {\n      val arrayOf = arrayOf(1, 2, 3)\n      arrayOf.size == 0\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() {\n      val arrayOf = arrayOf(1, 2, 3)\n      arrayOf.isEmpty()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AddOperatorModifier",
          "displayName": "Function should have 'operator' modifier",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a function that matches one of the operator conventions but lacks the <code>operator</code> keyword.\n<p>By adding an <code>operator</code> modifier, you might allow consumers of a function for writing a more Kotlin-idiomatic code.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Complex(val real: Double, val imaginary: Double) {\n      fun plus(other: Complex) =\n          Complex(real + other.real, imaginary + other.imaginary)\n  }\n\n  fun usage(a: Complex, b: Complex) {\n      a.plus(b)\n  }\n</code></pre>\n<p>A quick-fix is suggested to add the <code>operator</code> modifier keyword:</p>\n<pre><code>\n  class Complex(val real: Double, val imaginary: Double) {\n      operator fun plus(other: Complex) =\n          Complex(real + other.real, imaginary + other.imaginary)\n  }\n\n  fun usage(a: Complex, b: Complex) {\n      a + b\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LoopToCallChain",
          "displayName": "Loop can be replaced with stdlib operations",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code> loops that can be replaced with a sequence of stdlib operations (like <code>map</code>, <code>filter</code>, and so on).\n</body>\n</html>\n"
        },
        {
          "shortName": "MapGetWithNotNullAssertionOperator",
          "displayName": "'map.get()' with not-null assertion operator (!!)",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>map.get()!!</code> that can be replaced with <code>map.getValue()</code>, <code>map.getOrElse()</code>, and so on.\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceIsEmptyWithIfEmpty",
          "displayName": "'if' condition can be replaced with lambda call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>isEmpty</code>, <code>isBlank</code>, <code>isNotEmpty</code>, or <code>isNotBlank</code> calls in an <code>if</code> statement to assign a default value.\n<p>The quick-fix replaces the <code>if</code> condition with <code>ifEmpty</code> or <code>ifBlank</code> calls.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;): List&lt;Int&gt; {\n      return if (list.isEmpty()) {\n          println()\n          foo()\n      } else {\n          list\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(list: List&lt;Int&gt;): List&lt;Int&gt; {\n      return list.ifEmpty {\n          println()\n          foo()\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the Kotlin language version of the project or module is 1.3 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceRangeStartEndInclusiveWithFirstLast",
          "displayName": "Boxed properties should be replaced with unboxed",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>boxed</b> <code>Range.start</code> and <code>Range.endInclusive</code> properties.\n<p>These properties can be replaced with <b>unboxed</b> <code>first</code> and <code>last</code> properties to avoid redundant calls.</p>\n<p>The quick-fix replaces <code>start</code> and <code>endInclusive</code> properties with the corresponding <code>first</code> and <code>last</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(range: CharRange) {\n      val lastElement = range.endInclusive\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(range: CharRange) {\n      val lastElement = range.last\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseWithIndex",
          "displayName": "Manually incremented index variable can be replaced with use of 'withIndex()'",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code> loops with a manually incremented index variable.\n<p><code>for</code> loops with a manually incremented index variable can be simplified with the <code>withIndex()</code> function.</p>\n<p><b>Use withIndex() instead of manual index increment</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun foo(list: List&lt;String&gt;): Int? {\n      var index = 0\n      for (s in list) { &lt;== can be simplified\n          val x = s.length * index\n          index++\n          if (x > 0) return x\n      }\n      return null\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(list: List&lt;String&gt;): Int? {\n      for ((index, s) in list.withIndex()) {\n          val x = s.length * index\n          if (x > 0) return x\n      }\n      return null\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyAssertNotNull",
          "displayName": "'assert' call can be replaced with '!!' or '?:'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>assert</code> calls that check a not null value of the declared variable.\n<p>Using <code>!!</code> or <code>?:</code> makes your code simpler.</p>\n<p>The quick-fix replaces <code>assert</code> with <code>!!</code> or <code>?:</code> operator in the variable initializer.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(p: Array&lt;String?&gt;) {\n      val v = p[0]\n      assert(v != null, { &quot;Should be not null&quot; })\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(p: Array&lt;String?&gt;) {\n      val v = p[0] ?: error(&quot;Should be not null&quot;)\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "SafeCastWithReturn",
          "displayName": "Safe cast with 'return' should be replaced with 'if' type check",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports safe cast with <code>return</code> that can be replaced with <code>if</code> type check.\n<p>Using corresponding functions makes your code simpler.</p>\n<p>The quick-fix replaces the safe cast with <code>if</code> type check.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(x: Any) {\n      x as? String ?: return\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(x: Any) {\n      if (x !is String) return\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceArrayOfWithLiteral",
          "displayName": "'arrayOf' call can be replaced with array literal [...]",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>arrayOf</code> calls that can be replaced with array literals <code>[...]</code>.\n<p><b>Examples:</b></p>\n<pre><code>  annotation class MyAnnotation(val strings: Array&lt;String&gt;)\n\n  @MyAnnotation(arrayOf(\"alpha\", \"beta\", \"omega\")) // replaceable 'arrayOf()'\n  class MyClass\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  annotation class MyAnnotation(val strings: Array&lt;String&gt;)\n\n  @MyAnnotation([\"alpha\", \"beta\", \"omega\"])\n  class MyClass\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "CopyWithoutNamedArguments",
          "displayName": "'copy' method of data class is called without named arguments",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to a data class' <code>copy()</code> method without named arguments.\n<p>\n    As all arguments of the <code>copy()</code> function are optional, it might be hard to figure out what exact properties are modified.\n    Providing parameter names explicitly makes code easy to understand without navigating to the <code>data class</code> declaration.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  data class User(val name: String, val age: Int)\n\n  fun copyUser(user: User): User {\n      return user.copy(\"John\")\n  }\n</code></pre>\n<p>A quick-fix is suggested to provide parameter names to all <code>copy()</code> arguments:</p>\n<pre><code>\n  data class User(val name: String, val age: Int)\n\n  fun copyUser(user: User): User {\n      return user.copy(name = \"John\")\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "MoveLambdaOutsideParentheses",
          "displayName": "Lambda argument inside parentheses",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports lambda expressions in parentheses which can be moved outside of them.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "MongoJS",
      "inspections": [
        {
          "shortName": "MongoJSResolveInspection",
          "displayName": "Resolution problems",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references in MongoDB and JavaScript code.\n<p>Example:</p>\n<pre><code>db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()</code></pre>\n<p>The <code>non_existing_collection</code> collection does not exist in the database and will be reported.</p>\n</body>\n</html>"
        },
        {
          "shortName": "MongoJSDeprecationInspection",
          "displayName": "Deprecated element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated methods in MongoDB and JavaScript code.\n<p>The quick-fix replaces deprecated methods with recommended alternatives.</p>\n<p>Example:</p>\n<pre><code>db.my_collection.insert()</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>db.my_collection.insertOne()</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "MongoJSSideEffectsInspection",
          "displayName": "Statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "MongoJS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports statements that can cause side effects while the data source is in read-only mode.\n<p>For more information about enabling read-only mode, see\n  <a href=\"https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection\">Enable\n    read-only mode for a connection in the IDE documentation</a>.</p>\n<p>The <b>Disable read-only mode</b> quick-fix turns off the read-only mode for the respective data source.</p>\n<p>Example:</p>\n<pre><code>\ndb.my_collection.insertOne()\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHP strict standards",
      "inspections": [
        {
          "shortName": "PhpSignatureMismatchDuringInheritanceInspection",
          "displayName": "Declaration of overridden method should be compatible with parent class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the overridden methods declarations that are not compatible with the parent class. The inspection is enabled only for the PHP language level lower than 8.0.\n</body>\n</html>"
        },
        {
          "shortName": "PhpAbstractStaticMethodInspection",
          "displayName": "Static function should not be abstract",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the static methods that are declared as abstract.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Validity issues",
      "inspections": [
        {
          "shortName": "GroovyDuplicateSwitchBranch",
          "displayName": "Duplicate switch case",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicated expressions in <code>case</code> labels for <code>switch</code>\nstatements.\n<p><b>Example:</b></p>\n<pre>\n<code>\nswitch (n) {\n  case 1: //duplicate\n    break\n  case 1: //duplicate\n    System.out.println(\"2\")\n    break\n  default:\n    System.out.println(\"default\");\n}\n</code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "GroovyUnreachableStatement",
          "displayName": "Unreachable statement",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports statements that are unreachable. This can occur if the statement is after an infinite loop, <code>return</code>, <code>break</code>\nor <code>continue</code> statement.\n<p><b>Example:</b></p>\n<pre><code>\n  <b>void</b> foo (int n) {\n      if (n < 1) {\n          return\n          <b>print('This statement is unreachable')</b>\n      }\n      while (true){\n          print ('Hello, world!')\n      }\n      <b>print('This statement is unreachable too')</b>\n  }\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Accessibility",
      "inspections": [
        {
          "shortName": "HtmlRequiredTitleAttribute",
          "displayName": "Missing required 'title' attribute",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing title attribute <code>frame</code>, <code>iframe</code>, <code>dl</code>, and <code>a</code> tags. Suggests adding a title attribute. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H33.html\">H33</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H40.html\">H40</a>, and <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H64.html\">H64</a>.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredAltAttribute",
          "displayName": "Missing required 'alt' attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a missing <code>alt</code> attribute in a <code>img</code> or <code>applet</code> tag or in a <code>area</code> element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H24.html\">H24</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H35.html\">H35</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H36.html\">H36</a>, <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H37.html\">H37</a>.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlFormInputWithoutLabel",
          "displayName": "Missing associated label",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a form element (<code>input</code>, <code>textarea</code>, or <code>select</code>) without an associated label. Suggests creating a new label. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H44.html\">H44</a>.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredLangAttribute",
          "displayName": "Missing required 'lang' attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a missing <code>lang</code> (or <code>xml:lang</code>) attribute in a <code>html</code> tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H57.html\">H57</a>.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredSummaryAttribute",
          "displayName": "Missing required 'summary' attribute",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing <code>summary</code> attribute in a <code>table</code> tag. Suggests adding a<code>summary</code> attribute. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H73.html\">H73</a>.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlRequiredTitleElement",
          "displayName": "Missing required 'title' element",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a missing <code>title</code> element inside a <code>head</code> section. Suggests adding a <code>title</code> element. The title should describe the document. Based on WCAG 2.0: <a href=\"https://www.w3.org/TR/WCAG20-TECHS/H25.html\">H25</a>.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "HTML",
      "inspections": [
        {
          "shortName": "HtmlUnknownAnchorTarget",
          "displayName": "Unresolved fragment in a link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved last part of an URL after the <code>#</code> sign.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlDeprecatedTag",
          "displayName": "Obsolete tag",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.\n</body>\n</html>"
        },
        {
          "shortName": "CheckEmptyScriptTag",
          "displayName": "Empty tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an empty tag (such as <code>script</code>) that does not work in some browsers.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownTarget",
          "displayName": "Unresolved file in a link",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved file in a link.\n</body>\n</html>"
        },
        {
          "shortName": "CheckImageSize",
          "displayName": "Mismatched image size",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a <code>width</code> and <code>height</code> attribute value of a <code>img</code> tag\nthat is different from the actual width and height of the referenced image.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlDeprecatedAttribute",
          "displayName": "Obsolete attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an obsolete HTML5 attribute.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlExtraClosingTag",
          "displayName": "Redundant closing tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a redundant closing tag for an empty element, for example, <code>img</code> or <code>br</code>.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownAttribute",
          "displayName": "Unknown attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown HTML attribute. Suggests configuring attributes that should not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlMissingClosingTag",
          "displayName": "Missing closing tag",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an HTML element without a closing tag.\nSome coding styles require that HTML elements have closing tags even where this is optional.\n</body>\n</html>"
        },
        {
          "shortName": "RequiredAttributes",
          "displayName": "Missing required attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlPresentationalElement",
          "displayName": "Presentational tag",
          "defaultSeverity": "INFORMATION",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownTag",
          "displayName": "Unknown tag",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unknown HTML tag. Suggests configuring tags that should not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "CheckValidXmlInScriptTagBody",
          "displayName": "Malformed content of 'script' tag",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid XML contents of a <code>script</code> tag.<br>\n</body>\n</html>"
        },
        {
          "shortName": "HtmlUnknownBooleanAttribute",
          "displayName": "Incorrect boolean attribute",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "HTML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "HtmlNonExistentInternetResource",
          "displayName": "Unresolved web link",
          "defaultSeverity": "WARNING",
          "pluginId": "HtmlTools",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an unresolved web link. Works by making network requests in the background.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Method metrics",
      "inspections": [
        {
          "shortName": "ParametersPerConstructor",
          "displayName": "Constructor with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a constructor with too many parameters.\n<p>Such objects are hard to instantiate, especially if some parameters are optional. Constructors with too many parameters may indicate that refactoring is necessary. Consider applying the builder pattern, for example.\n<p><b>Example:</b></p>\n<pre><code>\n  public BankAccount(long accountNumber, String owner, double balance, double interestRate) {\n    // fields initialization\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Parameter limit</b> field to specify the maximum allowed number of parameters in a constructor.</li>\n  <li>Use the <b>Ignore constructors with visibility</b> list to specify whether the inspection should ignore constructors with specific visibility.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "OverlyLongLambda",
          "displayName": "Overly long lambda expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a lambda expression where the number of statements exceeds the specified maximum.\n<p>Lambda expressions that are too long may be confusing, and it is often better to extract the statements into a separate method.<p>\n<p>The following statements are not counted:</p>\n<ul>\n  <li>empty statements (semicolons)</li>\n  <li>block statements</li>\n  <li><code>for</code> loop initialization statements, that is, <code>int i = ...</code> within a <code>for(int i = ...;...)</code>\n    statement</li>\n  <li><code>for</code> loop update statements, that is, <code>i += 2</code> within a <code>for(int i = ...;...; i += 2)</code>\n    statement</li>\n</ul>\n<!-- tooltip end -->\n<p>Use the  <b>Non-comment source statements limit</b> field to specify the maximum allowed number of statements in a lambda expression.<p>\n  <!--<small>New in 2016.3</small>-->\n</body>\n</html>"
        },
        {
          "shortName": "CyclomaticComplexity",
          "displayName": "Overly complex method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that has too many branch points.\n<p>A branch point is one of the following:</p>\n<ul>\n  <li>loop statement</li>\n  <li><code>if</code> statement</li>\n  <li>ternary expression</li>\n  <li><code>catch</code> section</li>\n  <li>expression with one or more <code>&&</code> or <code>||</code> operators inside</li>\n  <li><code>switch</code> block with non-default branches</li>\n</ul>\n<p>Methods with too high cyclomatic complexity may be confusing and hard to test.</p>\n<!-- tooltip end -->\n<p>Use the <b>Method complexity limit</b> field to specify the maximum allowed cyclomatic complexity for a method.<p>\n</body>\n</html>"
        },
        {
          "shortName": "NestingDepth",
          "displayName": "Overly nested method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method where the number of nested statements in the method's body exceeds the specified maximum.\n<p>Methods with too deep statement\n  nesting may be confusing and are a good sign that refactoring may be necessary.</p>\n<!-- tooltip end -->\n<p>Use the <b>Nesting depth limit</b> field to specify the maximum allowed nesting depth for a method.<p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodWithMultipleLoops",
          "displayName": "Method with multiple loops",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that contains more than one loop statement.\n<p><b>Example:</b></p>\n<p>The method below will be reported because it contains two loops:</p>\n<pre><code>\n  void methodWithTwoLoops(int n1, int n2) {\n    for (int i = 0; i &lt; n1; i++) {\n      System.out.println(i);\n    }\n\n    int j = 0;\n    while (j &lt; n2) {\n      System.out.println(j);\n      j++;\n    }\n  }\n</code></pre>\n<p>The following method will also be reported because it contains a nested loop:</p>\n<pre><code>\n  void methodWithNestedLoop(int n1, int n2) {\n    for (int i = 0; i &lt; n1; i++) {\n      for (int j = 0; j &lt; n2; j++) {\n        System.out.println(i + j);\n      }\n  }\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "MultipleReturnPointsPerMethod",
          "displayName": "Method with multiple return points",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method where the number of <code>return</code> points exceeds the specified maximum.\n<p>A <code>return</code> point is either a <code>return</code> statement or a falling through the bottom of a\n  <code>void</code> method or constructor.</p>\n<p>Methods with too many <code>return</code> points may be confusing\n  and hard to refactor.</p>\n<p><b>Example:</b></p>\n<p>The method below is reported if only two <code>return</code> statements are allowed:</p>\n<pre><code>\n  void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user)) {\n        user.setId(getId());\n        return;\n      } else if (cond2(user)) {\n        if (cond3(user)) {\n          user.setId(getId());\n          return;\n        }\n      }\n    }\n  }\n</code></pre>\n<p>Consider rewriting the method so it becomes easier to understand:</p>\n<pre><code>\n  void doSmth(User[] users) {\n    for (User user : users) {\n      if (cond1(user) || cond2(user) && cond3(user)) {\n        user.setId(getId());\n        return;\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Return point limit</b> field to specify the maximum allowed number of <code>return</code> points for a method.</li>\n  <li>Use the <b>Ignore guard clauses</b> option to ignore guard clauses.\n    A guard clause is an <code>if</code> statement that contains only a <code>return</code> statement</li>\n  <li>Use the <b>Ignore for 'equals()' methods</b> option to ignore <code>return</code> points inside <code>equals()</code> methods.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ParametersPerMethod",
          "displayName": "Method with too many parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method where the number of parameters exceeds the specified maximum.\n<p>Methods with too many parameters can be a good sign that refactoring is necessary.</p>\n<p>Methods that have super methods are not reported.</p>\n<!-- tooltip end -->\n<p>Use the <b>Parameter limit</b> field to specify the maximum allowed number of parameters for a method.<p>\n</body>\n</html>"
        },
        {
          "shortName": "ThreeNegationsPerMethod",
          "displayName": "Method with more than three negations",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method with three or more negation operators <code>!</code> or <code>!=</code>.\n<p>Such methods may be confusing.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (!flag && !flag2) {\n      if (a != b) {\n        doOther();\n      }\n    }\n  }\n</code></pre>\n<p>Without negations, the method becomes easier to understand:</p>\n<pre><code>\n  void doSmth(int a, int b, boolean flag1, boolean flag2) {\n    if (flag1 || flag2 || a == b) return;\n    doOther();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore negations in 'equals()' methods</b> option to disable the inspection within <code>equals()</code> methods.</li>\n  <li>Use the <b>Ignore negations in 'assert' statements</b> to disable the inspection within <code>assert</code> statements.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "NonCommentSourceStatements",
          "displayName": "Overly long method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method where the number of statements exceeds the specified maximum.\n<p>Methods with too many statements may be confusing and are a good sign that refactoring is necessary.</p>\n<p>The following statements are not counted:</p>\n<ul>\n  <li>empty statements (semicolons)</li>\n  <li>block statements</li>\n  <li><code>for</code> loop initialization statements, that is, <code>int i = ...</code> within a <code>for(int i = ...;...)</code>\n    statement</li>\n  <li><code>for</code> loop update statements, that is, <code>i += 2</code> within a <code>for(int i = ...;...; i += 2)</code>\n    statement</li>\n</ul>\n<!-- tooltip end -->\n<p>Use the <b>Maximum statements per method</b> field to specify the maximum allowed number of statements in a method.<p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodCoupling",
          "displayName": "Overly coupled method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that references too many other classes. Each referenced class is counted only once no matter how many times it is referenced.\n<p>Methods with too high coupling can be very fragile and should be probably split into smaller methods.<p>\n  <!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Method coupling limit</b> field to specify the maximum allowed coupling for a method.</li>\n  <li>Use the <b>Include couplings to java system classes</b> option to count references to classes from <code>java</code>or <code>javax</code> packages.</li>\n  <li>Use the <b>Include couplings to library classes</b> option to count references to third-party library classes.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ThrownExceptionsPerMethod",
          "displayName": "Method with too many exceptions declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that has too many different types of exceptions in its <code>throws</code> list.\n<p>Methods with too many exceptions declared are a good sign that your error handling code is getting overly complex.</p>\n<!-- tooltip end -->\n<p>Use the <b>Exceptions thrown limit</b> field to specify the maximum number of exception types a method is allowed to have in its <code>throws</code> list.<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Memory",
      "inspections": [
        {
          "shortName": "ZeroLengthArrayInitialization",
          "displayName": "Zero-length array allocation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports allocations of arrays with known lengths of zero.\n<p>\n  Since array lengths in Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly\n  allocate new ones. Such sharing may provide useful optimizations in the program runtime or footprint.\n</p>\n<p>\n  Note that the inspection does not report zero-length arrays allocated as static final fields,\n  since those arrays are assumed to be used for implementing array sharing.\n</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SystemGC",
          "displayName": "Calls to 'System.gc()' or 'Runtime.gc()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>System.gc()</code> or <code>Runtime.gc()</code> calls.\nWhile occasionally useful in testing, explicitly triggering garbage collection via <code>System.gc()</code> is almost never recommended in production code and can result in serious performance issues.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassMayBeStatic",
          "displayName": "Inner class may be 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports any inner classes that can be made <code>static</code>.</p>\n<p>A <code>static</code> inner class does not keep an implicit reference to its enclosing instance.\n  This prevents a common cause of memory leaks and uses less memory per instance of the class.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Outer {\n    <b>class</b> Inner { // not static\n      <b>public void</b> foo() {\n        bar(\"x\");\n      }\n\n      <b>private void</b> bar(String string) {}\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Outer {\n    <b>static class</b> Inner {\n      <b>public void</b> foo() {\n        bar(\"x\");\n      }\n\n      <b>private void</b> bar(String string) {}\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StaticCollection",
          "displayName": "Static collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the static fields of the <code>Collection</code> type. While it's\nnot necessarily a problem, static collections often cause memory leaks and are\ntherefore prohibited by some coding standards.\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  public class Example {\n    static List&lt;String&gt; list = new ArrayList&lt;&gt;();\n\n    ...\n  }\n  </code>\n</pre>\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>Use the <b>Ignore weak static collections or maps</b> option to ignore the fields of the <code>java.util.WeakHashMap</code> type.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClassMayBeStatic",
          "displayName": "Anonymous class may be a named 'static' inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the anonymous classes that may be safely replaced with static inner classes.\nAn anonymous class may be a static inner class if it doesn't explicitly reference its enclosing instance or local classes from its surrounding method.\n<p>\nA static inner class does not keep an implicit reference to its enclosing instance.\nThis prevents a common cause of memory leaks and uses less memory per class instance.\n</p>\n<p>The quick-fix extracts the anonymous class into a named static inner class.</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  void sample(){\n    Thread thread = new Thread(new Runnable() {\n      @Override\n      public void run() {\n      }\n    });\n  }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n  void sample(){\n    Thread thread = new Thread(new Task());\n  }\n\n  private static class Task implements Runnable {\n    @Override\n    public void run() {\n    }\n  }\n  </code>\n</pre>\n  <!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReturnOfInnerClass",
          "displayName": "Return of instance of anonymous, local or inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>return</code> statements that return an instance of an anonymous, local, or inner class.\nSuch instances keep an implicit reference to the outer instance, which can prevent the outer instance from being garbage-collected.\nAny caller of a method returning such an instance might cause a memory leak by holding on to the instance returned.\n<!-- tooltip end -->\n<p>\n  Configure the inspection:\n</p>\n<ul>\n  <li>Use the <b>Ignore returns from non-public methods</b> option to ignore returns from <code>protected</code> or package-private methods.\n    Returns from <code>private</code> methods are always ignored.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryEmptyArrayUsage",
          "displayName": "Unnecessary zero length array usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports allocations of arrays with known lengths of zero when there is a constant for that in the class of the array's element type.\n  As zero-length arrays are immutable, you can save memory reusing the same array instance.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Item {\n    // Public zero-length array constant that can be reused \n    public static final Item[] EMPTY_ARRAY = new Item[0];\n  }\n  class EmptyNode {\n    Item[] getChildren() {\n      // Unnecessary zero-length array creation\n      return new Item[0];\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class EmptyNode {\n    Item[] getChildren() {\n      return Item.EMPTY_ARRAY;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferField",
          "displayName": "'StringBuilder' field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the fields of the <code>java.lang.StringBuffer</code> or <code>java.lang.StringBuilder</code> types.\nSuch fields can grow without limit and are often the cause of memory leaks.\n<p><b>Example:</b></p>\n<pre>\n  <code>\npublic class Example {\n  StringBuilder builder = new StringBuilder();\n\n  ...\n}\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Method",
      "inspections": [
        {
          "shortName": "BooleanMethodNameMustStartWithQuestion",
          "displayName": "Boolean method name must start with question word",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean methods whose names do not start with a question\nword.\n<p>Boolean methods that override library methods are ignored by this inspection.</p>\n<p><b>Example:</b></p>\n<pre><code>boolean empty(List&lt;String&gt; list) {\n  return list.isEmpty();\n}</code></pre>\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Boolean method name prefixes</b> list to specify acceptable question words to start boolean method names with.</li>\n  <li>Use the <b>Ignore methods with 'java.lang.Boolean' return type</b> option to ignore methods with the <code>java.lang.Boolean</code> return type. </li>\n  <li>Use the <b>Ignore boolean methods in an @interface</b> option to ignore boolean methods in annotation types (<code>@interface</code>).</li>\n  <li>Use the <b>Ignore methods overriding/implementing a super method</b> to ignore methods the have supers.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MethodNameSameAsClassName",
          "displayName": "Method name same as class name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports methods that are named identically to their class.</p>\n<p>While such naming is allowed by the Java language, it's usually a mistake, as it was intended to create a constructor.\nSuch naming is bad practice.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class MyClass {\n    int val;\n\n    // Method MyClass named identically to its containing class.\n    // Likely, 'void' was added by mistake.\n    void MyClass(int val) {\n      this.val = val;\n    }\n  }\n</code></pre>\n<p>When appropriate, a quick-fix converts the method to a constructor:</p>\n<pre><code>\n  class MyClass {\n    int val;\n\n    MyClass(int val) {\n      this.val = val;\n    }\n  }\n</code></pre>\n<p>Another quick-fix renames the method.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledMethodName",
          "displayName": "Method names differing only by case",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports cases in which multiple methods of a class have the names that differ only by\ncase. Such names may be very confusing.\n<p><b>Example:</b> <pre>\n<code>\npublic int hashcode() {//reported, should be hashCode probably?\n  return 0;\n}\n</code></pre>\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Use the <b>Ignore methods overriding/implementing a super method</b> option to ignore methods overriding or implementing a method from\n  the superclass.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedMethodsWithSameNumberOfParameters",
          "displayName": "Overloaded methods with same number of parameters",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are declared in the same class, have the same name, and the same number of parameters.\nSuch overloads cam be very confusing because it can be unclear which overload gets called.\n<p><b>Example:</b></p>\n<pre><code>\n  class Main {\n    public static void execute(Runnable r) {}\n    public static &lt;T&gt; void execute(RunnableFuture&lt;T&gt; c) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to ignore overloaded methods whose parameter types are definitely incompatible.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NewMethodNamingConvention",
          "displayName": "Method naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p>Instance methods that override library\n  methods and constructors are ignored by this inspection.</p>\n<p><b>Example:</b> if the inspection is enabled for static methods, and the minimum specified method name length is 4 (the default),\n  the following static method produces a warning, because the length of its name is 3, which is less\n  than 4: <code>public static int max(int a, int b)</code>.\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the list in the <b>Options</b> section to specify which methods should be checked. Deselect the checkboxes for the method types for which\n  you want to skip the check. Specify <b>0</b> in the length fields to skip the corresponding checks.</p>\n<p>Regular expressions should be specified in the standard <code>java.util.regex</code> format.</p>\n</body>\n</html>"
        },
        {
          "shortName": "OverloadedVarargsMethod",
          "displayName": "Overloaded varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports varargs methods with the same name as other methods in the class or in a superclass.\nOverloaded methods that take a variable number of arguments can be very confusing\nbecause it is often unclear which overload gets called.\n<p><b>Example:</b></p>\n<pre><code>\n    public void execute(Runnable... r) {} // warning\n    public void execute(Runnable r1, Runnable r2) {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonBooleanMethodNameMayNotStartWithQuestion",
          "displayName": "Non-boolean method name must not start with question word",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-boolean methods whose names start with a question\nword. Such method names may be confusing.\n<p>Non-boolean methods that override library methods are ignored by this inspection.</p>\n<p><b>Example:</b> <pre>\n  <code>public void hasName(String name) { assert names.contains(name); }</code>\n</pre>\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Boolean method name prefixes</b> list to specify the question words that should be used only for boolean methods.</li>\n  <li>Use the <b>Ignore methods with 'java.lang.Boolean' return type</b> option to ignore methods with <code>java.lang.Boolean</code> return type.</li>\n  <li>Use the <b>Ignore methods overriding/implementing a super method</b> option to ignore methods which have supers. </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MethodNameSameAsParentName",
          "displayName": "Method name same as parent class name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that have the same name as the superclass of the method's class, as\nsuch a method name may be confusing.\n<p>This inspection doesn't check interfaces or superclasses deep in the hierarchy.</p>\n<p><b>Example:</b>\n  <pre>\n  <code>\n    class Parent {}\n    class Child extends Parent {\n       public Parent Parent() {\n         return null;\n       }    \n    }\n  </code>\n</pre>\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LambdaUnfriendlyMethodOverload",
          "displayName": "Lambda-unfriendly method overload",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports overloaded methods that take functional interfaces with conflicting abstract method signatures.\n<p>Such overloads introduce ambiguity and require callers to cast lambdas to a specific type or specify lambda parameter types explicitly.\n  It is preferable to give the overloaded methods different names to eliminate ambiguity.</p>\n<p>Example:</p>\n<pre><code>\n  interface MyExecutor {\n    void execute(Supplier&lt;?&gt; supplier);\n    void execute(Callable&lt;?&gt; callable);\n  }\n</code></pre>\n<p>\nHere, <code>Supplier</code> and <code>Callable</code> are functional interfaces\nwhose single abstract methods do not take any parameters and return a non-void value.\nAs a result, the type of the lambda cannot be inferred at the call site unless an explicit cast is used.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Portability",
      "inspections": [
        {
          "shortName": "UseOfAWTPeerClass",
          "displayName": "Use of AWT peer class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of AWT peer classes. Such classes represent\nnative windowing system widgets, and will be non-portable between different windowing\nsystems.\n<p><b>Example:</b></p>\n<pre><code>\n  import java.awt.peer.ButtonPeer;\n\n  abstract class Sample implements ButtonPeer {\n    public void foo() {\n        Sample sample;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfJDBCDriverClass",
          "displayName": "Use of concrete JDBC driver class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of specific JDBC driver classes. Use of such classes will\nbind your project to a specific database and driver, defeating the purpose of JDBC and\nresulting in loss of portability.\n<p><b>Example:</b></p>\n<pre><code>\n  import java.sql.Driver;\n\n  abstract class Sample implements Driver {\n    public void foo() {\n        Sample sample;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfProcessBuilder",
          "displayName": "Use of 'java.lang.ProcessBuilder' class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of <code>java.lang.ProcessBuilder</code>,\nwhich might be unportable between operating systems because\npaths to executables, environment variables, command-line arguments and\ntheir escaping might vary depending on the OS.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NativeMethods",
          "displayName": "Native method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods declared <code>native</code>. Native methods are inherently unportable.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RuntimeExec",
          "displayName": "Call to 'Runtime.exec()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Runtime.exec()</code> or any of its variants.\nCalls to <code>Runtime.exec()</code> are inherently unportable.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SystemGetenv",
          "displayName": "Call to 'System.getenv()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>System.getenv()</code>.\nCalls to <code>System.getenv()</code> are inherently unportable.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SystemExit",
          "displayName": "Call to 'System.exit()' or related methods",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>System.exit()</code>, <code>Runtime.exit()</code>,\nand <code>Runtime.halt()</code>.\n<p>\n  Invoking <code>System.exit()</code> or <code>Runtime.exit()</code>\n  calls the shutdown hooks and terminates the currently running Java\n  virtual machine. Invoking <code>Runtime.halt()</code> forcibly\n  terminates the JVM without causing shutdown hooks to be started.\n  Each of these methods should be used with extreme caution. Calls\n  to these methods make the calling code unportable to most\n  application servers.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the option to ignore calls in main methods.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UseOfSunClasses",
          "displayName": "Use of 'sun.*' classes",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of classes from the <code>sun.*</code> hierarchy.\nSuch classes are non-portable between different JVMs.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedFileSeparators",
          "displayName": "Hardcoded file separator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the forward (<code>/</code>) or backward (<code>\\</code>) slash in a string or\ncharacter literal. These characters are commonly used as file separators, and portability may suffer if they are hardcoded.\n<p>\n  The inspection will not report backward slashes inside escape sequences and forward slashes immediately following the '&lt;' character\n  or immediately preceding the '&gt;' character, as those often indicate XML or HTML tags rather than file names.\n  Strings representing a <code>java.util.TimeZone</code> ID, strings that are valid regular expressions,\n  or strings that equal IANA-registered MIME media types will not be reported either.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  new File(\"C:\\\\Users\\\\Name\");\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to include <code>example/*</code> in the set of recognized media types.\n  Normally, usage of the <code>example/*</code> MIME media type outside of an example (e.g. in a <code>Content-Type</code>\n  header) is an error.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "HardcodedLineSeparators",
          "displayName": "Hardcoded line separator",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the newline (<code>\\n</code>) and return (<code>\\r</code>) characters in a string or\ncharacter literal. These characters are commonly used as line separators, and portability may suffer if they are hardcoded.\n<p><b>Example:</b></p>\n<pre><code>\n  void test() {\n    String str = \"first\\nsecond\\rthird\";\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Security",
      "inspections": [
        {
          "shortName": "CloneableClassInSecureContext",
          "displayName": "Cloneable class in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which may be cloned.\n<p>\n  A class\n  may be cloned if it supports the <code>Cloneable</code> interface,\n  and its <code>clone()</code> method is not defined to immediately\n  throw an error. Cloneable classes may be dangerous in code intended for secure use.\n</p>\n<p><b>Example:</b></p>\n<code>class SecureBean implements Cloneable {}</code>\n<p>After the quick-fix is applied:</p><code>class SecureBean {}</code>\n<p>\nWhen the class extends an existing cloneable class or implements a cloneable interface,\n  then after the quick-fix is applied, the code may look like: \n<pre><code>class SecureBean extends ParentBean {\n    @Override\n    protected SecureBean clone() throws CloneNotSupportedException {\n        throw new CloneNotSupportedException();\n    }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JDBCExecuteWithNonConstantString",
          "displayName": "Call to 'Statement.execute()' with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.sql.Statement.execute()</code> or any\nof its variants which take a dynamically-constructed string as the query to execute.\n<p>Constructed SQL statements are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.</p>\n<p><b>Example:</b></p>\n<pre>\n  ResultSet execute(Statement statement, String name) throws SQLException {\n    return statement.executeQuery(\"select * from \" + name); // reports warning\n  }\n</pre>\n<!-- tooltip end -->\n<p>\nUse the inspection options to consider any <code>static</code> <code>final</code> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n<code>private static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";</code>\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "RuntimeExecWithNonConstantString",
          "displayName": "Call to 'Runtime.exec()' with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Runtime.exec()</code> which take a dynamically-constructed string as the command to execute.\n<p>\n  Constructed execution strings are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  String i = getUserInput();\n  Runtime runtime = Runtime.getRuntime();\n  runtime.exec(\"foo\" + i); // reports warning\n</pre>\n<!-- tooltip end -->\n<p>\nUse the inspection settings to consider any <code>static</code> <code>final</code> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n<pre>\n  static final String COMMAND = \"ping \" + getDomainFromUserInput() + \"'\";\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "UnsecureRandomNumberGeneration",
          "displayName": "Insecure random number generation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <code>java.lang.Random</code> or\n<code>java.lang.Math.random()</code>.\n<p>\n  In secure environments,\n  <code>java.secure.SecureRandom</code> is a better choice, since is offers cryptographically secure\n  random number generation.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  long token = new Random().nextLong();\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CustomClassloader",
          "displayName": "Custom 'ClassLoader' is declared",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports user-defined subclasses of <code>java.lang.ClassLoader</code>.\n<p>\n  While not necessarily representing a security hole, such classes should be thoroughly\n  inspected for possible security issues.\n</p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SerializableDeserializableClassInSecureContext",
          "displayName": "Serializable class in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that may be serialized or deserialized.\n<p>\n  A class may be serialized if it supports the <code>Serializable</code> interface,\n  and its <code>readObject()</code> and <code>writeObject()</code> methods are not defined to always\n  throw an exception. Serializable classes may be dangerous in code intended for secure use.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class DeserializableClass implements Serializable { // the class doesn't contain 'writeObject()' method throwing an exception\n    private int sensitive = 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class DeserializableClass implements Serializable {\n    private int sensitive = 736326;\n\n    private void readObject(ObjectInputStream in) {\n        throw new Error();\n    }\n\n    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n        throw new java.io.NotSerializableException(\"DeserializableClass\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    List classes whose inheritors should not be reported by this inspection.\n    This is meant for classes that inherit\n    <code>Serializable</code> from a superclass but are not intended for serialization.\n    Note that it still may be more secure to add <code>readObject()</code> and <code>writeObject()</code> methods\n    which always throw an exception, instead of ignoring those classes.\n  </li>\n  <li>\n    Whether to ignore serializable anonymous classes.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "DesignForExtension",
          "displayName": "Design for extension",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods which are not <code>static</code>, <code>private</code>, <code>final</code> or <code>abstract</code>, and whose bodies\nare not empty.\n<p>\n  Coding in a style that avoids such methods protects the contracts of classes from being broken by their subclasses. The\n  benefit of this style is that subclasses cannot corrupt the state of the superclass by forgetting to call the super method. The cost is\n  that\n  subclasses are limited in their flexibility, in particular they cannot prevent execution of code in the superclass. Use the quick-fix to\n  add\n  the missing modifiers.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    public boolean equals(Object o) { return true; }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class Foo {\n    public final boolean equals(Object o) { return true; }\n  }\n</pre>\nThis inspection is intended for code that is going to be used in secure environments, and is probably not appropriate for less restrictive environments.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SystemProperties",
          "displayName": "Access of system properties",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports code that accesses system properties using one of the following methods:\n<ul>\n  <li>\n    <code>System.getProperties()</code>, <code>System.setProperty()</code>,\n    <code>System.setProperties()</code>, <code>System.clearProperties()</code>\n  </li>\n  <li>\n    <code>Integer.getInteger()</code>\n  </li>\n  <li>\n    <code>Boolean.getBoolean()</code>\n  </li>\n</ul>\n<p>\nWhile accessing the system properties is not a security risk in itself, it is often found in malicious code.\nCode that accesses system properties should be closely examined in any security audit.\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticCollectionField",
          "displayName": "'public static' collection field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports modifiable <code>public</code> <code>static</code> Collection fields. Often used\nto store collections of constant values, these fields nonetheless represent a security\nhazard, as their contents may be modified, even if the field is declared as <code>final</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  public static final List&lt;String&gt; EVENTS = new ArrayList&lt;&gt;();\n  </code>\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the table below to specify methods returning unmodifiable collections.\n  <code>public</code> <code>static</code> Collection fields initialized with these methods will not be reported.\n</body>\n</html>"
        },
        {
          "shortName": "SystemSetSecurityManager",
          "displayName": "Call to 'System.setSecurityManager()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>System.setSecurityManager()</code>.\n<p>While often benign, any call to <code>System.setSecurityManager()</code> should be closely examined in any security audit.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JDBCPrepareStatementWithNonConstantString",
          "displayName": "Call to 'Connection.prepare*()' with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.sql.Connection.prepareStatement()</code>, <code>java.sql.Connection.prepareCall()</code>, or any of their\nvariants which take a dynamically-constructed string as the statement to prepare.\n<p>\n  Constructed SQL statements are a common source of\n  security breaches. By default, this inspection ignores compile-time constants.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  String bar() { return \"bar\"; }\n\n  Connection connection = DriverManager.getConnection(\"\", \"\", \"\");\n  connection.(\"SELECT * FROM user WHERE name='\" + bar() + \"'\");\n</pre>\n<!-- tooltip end -->\nUse the inspection settings to consider any <code>static</code> <code>final</code> fields as constants. Be careful, because strings like the\nfollowing will be ignored when the option is enabled:\n<pre>\n  static final String SQL = \"SELECT * FROM user WHERE name='\" + getUserInput() + \"'\";\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "CustomSecurityManager",
          "displayName": "Custom 'SecurityManager'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports user-defined subclasses of <code>java.lang.SecurityManager</code>.\n<p>\n  While not necessarily representing a security hole, such classes should be thoroughly\n  and professionally inspected for possible security issues.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class CustomSecurityManager extends SecurityManager {\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "PublicStaticArrayField",
          "displayName": "'public static' array field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>public</code> <code>static</code> array fields.\n<p>\n  Such fields are often used to store arrays of constant values. Still, they represent a security\n  hazard, as their contents may be modified, even if the field is declared <code>final</code>.</p>\n<p><b>Example:</b></p>\n<pre>\n  public static String[] allowedPasswords = {\"foo\", \"bar\"};\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalClone",
          "displayName": "Non-final 'clone()' in secure context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>clone()</code> methods without the <code>final</code> modifier.\n<p>\n  Since <code>clone()</code> can be used to instantiate objects without using a constructor, allowing the <code>clone()</code>\n  method to be overridden may result in corrupted objects, and even in security exploits. This may be prevented by making the\n  <code>clone()</code> method or the enclosing class itself <code>final</code>.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class Main implements Cloneable {\n      @Override\n      protected Object clone() throws CloneNotSupportedException {\n        return super.clone();\n      }\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassLoaderInstantiation",
          "displayName": "ClassLoader instantiation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of the <code>java.lang.ClassLoader</code> class.\n<p>While often benign, any instantiations of <code>ClassLoader</code> should be closely examined in any security audit.</p>\n<p><b>Example:</b></p>\n<pre><code>    Class&lt;?&gt; loadExtraClass(String name) throws Exception {\n      try(URLClassLoader loader =\n          new URLClassLoader(new URL[]{new URL(\"extraClasses/\")})) {\n        return loader.loadClass(name);\n      }\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LoadLibraryWithNonConstantString",
          "displayName": "Call to 'System.loadLibrary()' with non-constant string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.System.loadLibrary()</code>, <code>java.lang.System.load()</code>, <code>java.lang.Runtime.loadLibrary()</code>\nand <code>java.lang.Runtime.load()</code>\nwhich take a dynamically-constructed string as the name of the library.\n<p>\n  Constructed library name strings are a common source of security breaches.\n  By default, this inspection ignores compile-time constants.</p>\n<p><b>Example:</b></p>\n<pre>\n  void test(int i) {\n    System.loadLibrary(\"foo\" + i);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\nUse the inspection settings to consider any <code>static final</code> fields as constant.\nBe careful, because strings like the following will be ignored when the option is enabled:\n</p>\n<pre>\n  private static final String LIBRARY = getUserInput();\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 5",
      "inspections": [
        {
          "shortName": "UnnecessaryUnboxing",
          "displayName": "Unnecessary unboxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unboxing, that is explicit unwrapping of wrapped primitive values.\n<p>Unboxing is unnecessary as for Java 5 and later, and can safely be removed.</p>\n<p><b>Examples:</b></p>\n<ul>\n  <li><code>Integer i = Integer.valueOf(42).intValue();</code> &rarr; <code>Integer i = Integer.valueOf(42);</code></li>\n  <li><code>int k = Integer.valueOf(42).intValue();</code> &rarr; <code>int k = Integer.valueOf(42);</code>\n    <p>(reports only when the <b>Only report truly superfluously unboxed expressions</b> option is not checked)</p></li>\n</ul>\n<!-- tooltip end -->\n<p>\n  Use the <b>Only report truly superfluously unboxed expressions</b> option to only report truly superfluous unboxing,\n  where an unboxed value is immediately boxed either implicitly or explicitly.\n  In this case, the entire unboxing-boxing step can be removed. The inspection doesn't report simple explicit unboxing.</p>\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBoxing",
          "displayName": "Unnecessary boxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports explicit boxing, that is wrapping of primitive values in objects.\n<p>Explicit manual boxing is unnecessary as for Java 5 and later, and can safely be removed.</p>\n<p><b>Examples:</b></p>\n<ul>\n  <li><code>Integer i = new Integer(1);</code> &rarr; <code>Integer i = Integer.valueOf(1);</code></li>\n  <li><code>int i = Integer.valueOf(1);</code> &rarr; <code>int i = 1;</code></li>\n</ul>\n\n<!-- tooltip end -->\n<p>\nUse the <b>Only report truly superfluously boxed expressions</b> option to report only truly superfluous boxing,\n  where a boxed value is immediately unboxed either implicitly or explicitly.\nIn this case, the entire boxing-unboxing step can be removed. The inspection doesn't report simple explicit boxing.\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferReplaceableByStringBuilder",
          "displayName": "'StringBuffer' may be 'StringBuilder'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variables declared as <code>StringBuffer</code> and suggests replacing them with <code>StringBuilder</code>.\n<code>StringBuilder</code> is a non-thread-safe replacement for <code>StringBuffer</code>.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "MethodCanBeVariableArityMethod",
          "displayName": "Method can be varargs method",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods that can be converted to variable arity methods.\n<p><b>Example:</b></p>\n<pre><code>\n  void process(String name, Object[] objects);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void process(String name, Object... objects);\n</code></pre>\n<!-- tooltip end -->\n<p>\n  This inspection only reports if the language level of the project or module is five or higher.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "RawUseOfParameterizedType",
          "displayName": "Raw use of parameterized class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports generic classes with omitted type parameters. Such <i>raw</i> use of generic types is valid\nin Java, but it defeats the purpose of type parameters and may mask bugs. This inspection mirrors the\n<code>rawtypes</code> warning of <code>javac</code>.\n<p><b>Examples:</b></p>\n<ul>\n  <li>\n    <pre><code>\n      List list = new ArrayList&lt;String&gt;(); //warning: Raw use of parameterized class 'List'\n      list.add(1);                         //list of strings was created but integer was accepted as well which would lead to runtime exceptions\n    </code></pre>\n  </li>\n  <li>\n    <pre><code>\n      IntFunction&lt;List&lt;?&gt;[]> fun = List[]::new; //no warning as it's impossible to provide type arguments during array creation</code></pre>\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore construction of new objects</b> option to ignore raw types used in object construction.</li>\n  <li>Use the <b>Ignore type casts</b> option to ignore raw types used in type casts.</li>\n  <li>Use the <b>Ignore where a type parameter would not compile</b> option to ignore the cases when a type parameter fails to compile\n    (for example, when creating an array or overriding a library method).</li>\n  <li>Use the <b>Ignore parameter types of overriding methods</b> option to ignore type parameters used in parameters of overridden methods.</li>\n  <li>Use the <b>Ignore when automatic quick-fix is not available</b> option to ignore the cases when a quick-fix is not available.</li>\n</ul>\nThis inspection only reports if the language level of the project or module is 5 or higher.\n</body>\n</html>"
        },
        {
          "shortName": "WhileCanBeForeach",
          "displayName": "'while' loop replaceable with enhanced 'for' loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>while</code> loops that iterate\nover collections and can be replaced with enhanced <code>for</code> loops (foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\n<p><b>Example:</b></p>\n<pre><code>\n  Iterator it = c.iterator();\n  while(it.hasNext()) {\n    Object obj = it.next();\n    System.out.println(obj);\n  }\n</code></pre>\n<p>Can be replaced with:</p>\n<pre><code>\n  for (Object obj : c) {\n    System.out.println(obj);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IndexOfReplaceableByContains",
          "displayName": "'String.indexOf()' expression is replaceable with 'contains()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparisons with <code>String.indexOf()</code> expressions such as <code>String.indexOf(c) > 0</code>,\nwhich can be replaced with a call to the <code>String.contains()</code> method.\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "BigDecimalLegacyMethod",
          "displayName": "'BigDecimal' legacy method called",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>BigDecimal.divide()</code> or <code>BigDecimal.setScale()</code> that use integer constants to specify the rounding mode.\nSince JDK 1.5, consider using methods that take the <code>RoundingMode</code> <code>enum</code> parameter instead.\n<p><b>Example:</b></p>\n<pre><code>new BigDecimal(\"42\").setScale(2, BigDecimal.ROUND_FLOOR);</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>new BigDecimal(\"42\").setScale(2, RoundingMode.FLOOR);</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ForCanBeForeach",
          "displayName": "'for' loop replaceable with enhanced 'for' loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code> loops that iterate over collections or arrays, \nand can be automatically replaced with an enhanced <code>for</code> loop (foreach iteration syntax).\n<!--  'foreach' still used in this description so that the inspection continues to be found using this keyword -->\n<p><b>Example:</b></p>\n<pre><code>\n  for (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext(); ) {\n    String item = iterator.next();\n    System.out.println(item);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  for (String item : list) {\n    System.out.println(item);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Report indexed 'java.util.List' loops</b> option to find loops involving <code>list.get(index)</code> calls.\n  Generally, these loops can be replaced with enhanced <code>for</code> loops,\n  unless they modify an underlying list in the process, for example, by calling <code>list.remove(index)</code>.\n  If the latter is the case, the enhanced <code>for</code> loop may throw <code>ConcurrentModificationException</code>.\n  Also, in some cases, <code>list.get(index)</code> loops may work a little bit faster.</p>\n<p>\n  Use the <b>Do not report iterations over untyped collections</b> option to ignore collections without type parameters.\n  This prevents the creation of enhanced <code>for</code> loop variables of the <code>java.lang.Object</code> type and the insertion of casts\n  where the loop variable is used.</p>\n<p>This inspection only reports if the language level of the project or module is five or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsFieldAccessReplaceableByMethodCall",
          "displayName": "Reference to empty collection field can be replaced with method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>java.util.Collections</code> fields: <code>EMPTY_LIST</code>, <code>EMPTY_MAP</code>\nor <code>EMPTY_SET</code>. These field usages may be replaced with the following method\ncalls: <code>emptyList()</code>, <code>emptyMap()</code>, or <code>emptySet()</code>.\nSuch method calls prevent unchecked warnings by the compiler because the type parameters can be inferred.\n<p><b>Example:</b></p>\n<pre><code>List&lt;Integer&gt; emptyList = Collections.EMPTY_LIST;</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>List&lt;Integer&gt; emptyList = Collections.emptyList();</code></pre>\n<!-- tooltip end -->\n<p>This inspection works only if the language level of a project or a module is 5 or higher.</p>\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "SQL server",
      "inspections": [
        {
          "shortName": "MsBuiltinInspection",
          "displayName": "Builtin functions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "TSQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports truncations of string arguments in ISNULL functions.\n\n<p>The ISNULL syntax is <code>ISNULL(check_expression, replacement_value)</code>.\n</p>\n\n<p>According to <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql\" target=\"_blank\">ISNULL at\n  docs.microsoft.com</a>, <code>replacement_value</code> will be truncated if <code>replacement_value</code> is longer than\n  <code>check_expression</code>.\n</p>\n\n<p>Example (Microsoft SQL Server):</p>\n\n<pre><code>DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "MsOrderByInspection",
          "displayName": "ORDER BY in queries",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "TSQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages when the <code>ORDER BY</code> clause is used without <code>TOP</code>, <code>OFFSET</code>, or <code>FOR XML</code> in views,\ninline functions, derived tables, subqueries, and common table expressions.\n<p>For more information about usages of <code>ORDER BY</code>, see <a\n    href=\"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql\">SELECT - ORDER BY Clause (Transact-SQL) at\n  docs.microsoft.com</a>.</p>\n<p>Example (Microsoft SQL server):</p>\n<pre><code>CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a &lt; 89\nORDER BY b) ALIAS;\n</code></pre>\n<p>In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\n  Alternatively, use the <b>Delete element</b> quick-fix to delete the ORDER BY section.</p>\n<p>After the quick-fix is applied:</p>\n<pre><code>SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a &lt; 89) ALIAS;\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Undefined symbols",
      "inspections": [
        {
          "shortName": "PhpUndefinedConstantInspection",
          "displayName": "Undefined constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to constants that are not found in the project files, configured include paths, or among the PHP predefined constants.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedVariableInspection",
          "displayName": "Undefined variable",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Produces two types of warnings:\n  <ul>\n    <li>\n      <i>Undefined variable</i>: the variable's definition is not found in the project files, configured include paths, or among the PHP predefined variables.\n    </li>\n    <li>\n      <i>Variable might have not been defined</i>: there are one or more paths to reach the line with the variable usage without defining it.\n    </li>\n  </ul>\n  <p>\n    Use the options below to customize the inspection:\n  </p>\n\n  <ul>\n    <li>\n      <b>Report that variable is probably undefined</b>: clear the checkbox to disable the <i>Variable might have not been defined</i> warnings.\n    </li>\n    <li>\n      <b>Enable inspection in global space</b>: by default, the inspection is enabled for global space. Clear the checkbox to only report\n      undefined variables from functions' local scope.\n    </li>\n    <li>\n      <p>\n        <b>Search for variable's definition outside the current file</b>: if selected, the IDE reports a global variable as undefined only in case there are no <code>include</code> or <code>require</code> statements in the current file and the variable's definition cannot be found in the project.\n      </p>\n      <p>\n        Otherwise, if not selected, the IDE searches for the variable's definition only in the current file and ignores the <code>include</code> or <code>require</code> statements if any.\n      </p>\n    </li>\n  </ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedMethodInspection",
          "displayName": "Undefined method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n    Reports the references to class methods that are not defined.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedClassInspection",
          "displayName": "Undefined class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to classes whose declarations are not found in the project files, configured include paths, or among the PHP predefined classes.\n<p>Use the options below to customize the inspection:</p>\n<ul>\n  <li>\n    <b>Ignore PHPDoc</b>: if selected, the inspection will not report the undefined classes referenced in PHPDoc blocks.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedClassConstantInspection",
          "displayName": "Undefined class constant",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the references to class constants that are not declared.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedCallbackInspection",
          "displayName": "Undefined callback",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the functions, methods, properties, or classes that are referenced from a callback but are not found.\n<!-- tooltip end -->\n<p>Use the options below to customize the inspection:</p>\n<ul>\n  <li>\n    <b>Ignore callback from *_exists and is_callable functions</b>: if selected, the inspection will skip callback references from the\n    <code>method_exists</code>, <code>function_exists</code>, <code>property_exists</code>, <code>class_exists</code> and <code>is_callable</code> functions.\n  </li>\n  <li><b>Don't report in case of ambiguity</b>: if selected, the inspection will skip the parameters with multiple possible types, for example marked as <code>callable|string</code>.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedNamespaceInspection",
          "displayName": "Undefined namespace",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the references to a namespace that is not found.\n</body>\n</html>"
        },
        {
          "shortName": "PhpPossiblePolymorphicInvocationInspection",
          "displayName": "Possible polymorphic call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports polymorphic code usages. Such usages are ambiguous and can be potentially inoperable depending on the class instance passed as the argument.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedFunctionInspection",
          "displayName": "Undefined function",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to functions that are not defined in the project files, configured include paths, or among the PHP predefined functions.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedFieldInspection",
          "displayName": "Undefined property",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to class properties that are not declared.\n<p>\n  The inspection skips the objects of the <code>stdClass</code> or derived types.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMultipleClassDeclarationsInspection",
          "displayName": "Multiple class declarations",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the references to classes that have multiple declarations in project files.\n<p>Use the options below to customize the inspection:</p>\n<ul>\n  <li>\n    <b>Ignore PHPDoc</b>: if selected, the inspection will not report multiple declarations of classes referenced in PHPDoc blocks.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUndefinedGotoLabelInspection",
          "displayName": "Undefined goto label",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>goto</code> labels that are not found in the current scope.\n<!-- tooltip end -->\n<p>\n  The target <code>goto</code> label must reside in the same file and context: you cannot jump into or out of a function or method, and cannot jump into a loop or switch structure.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/control-structures.goto.php\">goto (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "XPath",
      "inspections": [
        {
          "shortName": "IndexZeroUsage",
          "displayName": "XPath predicate with index 0",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports accidental usage of zero in a predicate index or in a comparison with the function\n  <code>position()</code>. Such usage is almost always a bug because in XPath, the index starts at one, <em>not</em> at zero.\n</p>\n\n<p>\n  Example:\n</p>\n\n<p>\n  <code>//someelement[<b>position() = 0</b>]</code> or <code>//something[<b>0</b>]</code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ImplicitTypeConversion",
          "displayName": "Implicit type conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports an implicit conversion among the predefined XPath-types <code>STRING</code>, <code>NUMBER</code>, <code>BOOLEAN</code>,\n  and <code>NODESET</code>. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n</p>\n<p>Example:</p>\n<p>\n  <code>&lt;xsl:if test=\"<b>foo</b>\" /></code> is not the same as <code>&lt;xsl:if test=\"<b>string(foo)</b>\" /></code>\n</p>\n\n<p>\nThe first test checks whether the element \"foo\" exists (<code>count(foo) > 0)</code>; the latter one however is only\n true if the element actually contains any text (<code>string-length(foo) > 0</code>). Suggests making \nthe type conversion more explicit.\n</p>\n\n<p>\nUse the   controls below to customize the inspection.\n</p>\n<ul><li>Enable or disable implicit conversions between certain types</li>\n<li>Always report explicit conversions that do not result in the actually expected type, for example,\n <code>&lt;xsl:if test=\"number(foo)\" /></code></li> \n<li>Ignore conversion from <code>NODESET</code>\n  to <code>BOOLEAN</code> by using the <code>string()</code> function as a shortcut for writing <code>string-length() > 0</code>.</li></ul>\n</p>\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "CheckNodeTest",
          "displayName": "Unknown element or attribute name",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports the name of an element or an attribute that is used in an XPath-expression but is missing in the associated XML file and is not defined in the referenced schema. This prevents problems caused by typos in\n  XPath-expressions that otherwise occur when running the script and may even happen not to be recognized immediately.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:template match=\"<b>h:txtarea</b>\" /></code>\n</p>\n\n<p>\n  If the <code>h</code> is bound to the XHTML namespace, the inspection will report this part of the <code>match</code> expression as an\n  unknown element name because the correct name of the element is \"textarea\".\n</p>\n\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "HardwiredNamespacePrefix",
          "displayName": "Hardcoded namespace prefix",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports comparison of the <code>name()</code> function with a string that contains a colon (<code>:</code>).  Such usages \n  usually indicate a hardcoded namespace prefix in the comparison. As a result,  the code will break when run against XML that\n  uses another prefix for the same namespace.\n</p>\n\n<p>Example:</p>\n\n<p>\n  <code>&lt;xsl:if test=\"name() = 'xlink:href'\">...&lt;xsl:if></code>\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantTypeConversion",
          "displayName": "Redundant type conversion",
          "defaultSeverity": "WARNING",
          "pluginId": "XPathView",
          "pluginVersion": "212.4746.2",
          "language": "XPath",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<head>\n  <style type=\"text/css\">\n    body, table {\n      font-family: Verdana, sans-serif;\n      font-size: 100%;\n      padding-left: 2mm;\n    }\n\n    #footer {\n      font-size: 95%;\n      padding-top: 10px;\n    }\n  </style>\n</head>\n\n<body>\n<p>\n  Reports a type conversion with a <code>string()</code>, <code>number()</code>, or\n  <code>boolean()</code> function where the type of the argument is the same as the function's return type or if\n  the expected expression type is <code>any</code>. Suggests removing the unnecessary conversion.\n</p>\n\n<p id=\"footer\">Powered by XPathView + XSLT-Support</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Data flow",
      "inspections": [
        {
          "shortName": "BooleanVariableAlwaysNegated",
          "displayName": "Boolean variable is always inverted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports boolean variables or fields which are always negated\nwhen their value is used.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n      void m() {\n        boolean b = true; //boolean variable 'b' is always inverted\n        System.out.println(!b);\n      }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLocalVariable",
          "displayName": "Redundant local variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary local variables that add nothing to the comprehensibility of a method, including:\n<ul>\n  <li>Local variables that are immediately returned.</li>\n  <li>Local variables that are immediately assigned to another variable and then not used.</li>\n  <li>Local variables that always have the same value as another local variable or parameter.</li>\n</ul>\n<p><b>Example:</b></p>\n<pre><code>\n  boolean yes() {\n    boolean b = true;\n    return b;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean yes() {\n    return true;\n  }\n  </code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore immediately returned or thrown variables</b> option to ignore immediately returned or thrown variables.\n    Some coding styles suggest using such variables for clarity and ease of debugging.</li>\n  <li>Use the <b>Ignore variables which have an annotation</b> option to ignore annotated variables.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ConstantValueVariableUse",
          "displayName": "Use of variable whose value is known to be constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any usages of variables which are known to be constant.\n<p>This is the case if the (read) use of the variable is surrounded by an\n<code>if</code>, <code>while</code>, or <code>for</code>\nstatement with an <code>==</code> condition which compares the variable with a constant.\n  In this case, the use of a variable which is known to be constant can be replaced with\n  an actual constant.</p>\n<p>Example:</p>\n<pre><code>\n    private static void foo(double number) {\n        if (number == 1.0) {\n            f(number);\n        }\n    }\n    private static void f(double number) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n    private static void foo(double number) {\n        if (number == 1.0) {\n            f(1.0);\n        }\n    }\n    private static void f(double number) {}\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ReuseOfLocalVariable",
          "displayName": "Reuse of local variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables that are \"reused\" overwriting their\nvalues with new values unrelated to their original use.\n<p>Such a local variable reuse may be confusing,\nas the intended semantics of the local variable may vary with each use. It may also be\nprone to bugs if due to the code changes, the values that have been considered overwritten actually\nappear to be alive. It is a good practice to keep variable lifetimes as short as possible, and not\n  to reuse local variables for the sake of brevity.</p>\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n    void x() {\n        String s = \"one\";\n        System.out.println(\"s = \" + s);\n        s = \"two\"; //reuse of local variable 's'\n        System.out.println(\"s = \" + s);\n    }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "BooleanMethodIsAlwaysInverted",
          "displayName": "Boolean method is always inverted",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods with a <code>boolean</code> return type that are used only in a negated context.\n<p>The quick-fix makes it possible to rename and invert the method.\n  Due to performance reasons, some methods might not be highlighted in the editor.</p>\n<p>Example:</p>\n<pre><code>\n  class C {\n    boolean alwaysTrue() {\n      return true;\n    }\n\n    void f() {\n      if (!alwaysTrue()) {\n        return;\n      }\n    }\n    boolean member = !alwaysTrue();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class C {\n    boolean alwaysFalse() {\n      return false;\n    }\n\n    void f() {\n      if (alwaysFalse()) {\n        return;\n      }\n    }\n    boolean member = alwaysFalse();\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "NegativelyNamedBooleanVariable",
          "displayName": "Negatively named boolean variable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports negatively named variables, for example: <code>disabled</code>, <code>hidden</code>, or <code>isNotChanged</code>.\n<p>Usually, inverting the <code>boolean</code> value and removing the negation from the name makes the code easier to understand.</p>\n<p>Example:</p>\n<pre><code>\n    boolean disabled = false;\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TooBroadScope",
          "displayName": "Scope of variable is too broad",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any variable declarations that can be moved to a smaller scope.\n<p>This inspection is especially\nuseful for <i>Pascal style</i> declarations at the beginning of a method. Moreover, variables with a too broad\n  scope also often remain after refactorings.</p>\n<p>Example of <code>sb</code> movement:</p>\n<pre><code>\n  StringBuilder sb = new StringBuilder();\n  System.out.println();\n  sb.append(1);\n</code></pre>\n<p>After quick-fix is applied:</p>\n<pre><code>\n  System.out.println();\n  StringBuilder sb = new StringBuilder();\n  sb.append(1);\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Only report variables that can be moved into inner blocks</b> option to report only those variables that can be moved inside deeper code blocks.\n    For example, when the option is enabled, the movement will be suggested for <code>sb</code> variable, but not for the following code:\n<pre><code>\n  StringBuilder sb = new StringBuilder(a);\n  if (flag) {\n    sb.append(1);\n  }\n</code></pre></li>\n  <li>Use the <b>Report variables with a new expression as initializer\n    (potentially unsafe)</b> option to report variables that are initialized with a new expression. This makes the inspection potentially\n    unsafe when the constructor has non-local side-effects. For example, when the option is enabled, the movement will be\n    suggested for the <code>foo</code> variable:\n  <pre><code>\n  class Foo {\n    static List&lt;Foo&gt; fooList = new ArrayList&lt;&gt;();\n    String bar;\n\n    Foo(String bar) {\n        this.bar = bar;\n        fooList.add(this);\n    }\n\n    public static void main(String[] args) {\n      Foo foo = new Foo(\"bar\"); // the movement is possible even though is unsafe\n      System.out.println(fooList.size());\n      System.out.println(foo.bar);\n    }\n  }\n</code></pre></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "LawOfDemeter",
          "displayName": "Method call violates Law of Demeter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <a href=\"https://en.wikipedia.org/wiki/Law_of_Demeter\">Law of Demeter</a> violations.\n<p>The Law of Demeter specifies a style guideline: never call a method on an object you got from another call.\nThe code that follows this guideline is easier to maintain, adapt, and refactor, has less coupling between methods, less duplication,\n  and better information hiding. On the other hand, you might need to write many wrapper methods to meet this guideline.</p>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Verbose or redundant code constructs",
      "inspections": [
        {
          "shortName": "UnnecessaryReturn",
          "displayName": "Unnecessary 'return' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>return</code> statements at the end of constructors and methods returning\n<code>void</code>. These statements are redundant and may be safely removed.\n<p>This inspection does not report in JSP files.\n<p>Example:</p>\n<pre><code>\n  <b>void</b> message() {\n    System.out.println(\"Hello World\");\n    <b>return</b>;\n  }\n</code></pre>\n<p>After the quick-fix is applied:\n<pre><code>\n  <b>void</b> message() {\n    System.out.println(\"Hello World\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore in then branch of 'if' statement with 'else' branch</b> option to ignore <code>return</code> statements in the then branch of <code>if</code> statements\nwhich also have an <code>else</code> branch.\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArrayFilling",
          "displayName": "Explicit array filling",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops that can be replaced with <code>Arrays.setAll()</code> or <code>Arrays.fill()</code> calls.\n<p>This inspection suggests replacing loops with <code>Arrays.setAll()</code> if the language level of the project or module is 8 or higher.\n  Replacing loops with <code>Arrays.fill()</code> is possible with any language level.</p>\n<p>Example:</p>\n<pre><code>\n  for (int i=0; i&lt;array.length; i++) {\n     array[i] = calc(i);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Arrays.setAll(array, this::calc);\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateExpressions",
          "displayName": "Multiple occurrences of the same expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple equivalent occurrences of the same expression within a method (or constructor, or class initializer)\nif the result of the expression can be reused.\n<p>\n  The expression is reported if it's free of side effects and its result is always the same (in terms of <code>Object.equals()</code>).\n  The examples of such expressions are <code>a + b</code>, <code>Math.max(a, b)</code>, <code>a.equals(b)</code>,\n  <code>s.substring(a,b)</code>. To make sure the result is always the same, it's verified that the variables used in the expression don't\n  change their values between the occurrences of the expression.</p>\n<p>\n  Such expressions may contain methods of immutable classes like <code>String</code>, <code>BigDecimal</code>, and so on,\n  and of utility classes like <code>Objects</code>, <code>Math</code> (except <code>random()</code>).\n  The well-known methods, such as <code>Object.equals()</code>, <code>Object.hashCode()</code>, <code>Object.toString()</code>,\n  <code>Comparable.compareTo()</code>, and <code>Comparator.compare()</code> are OK as well because they normally don't have\n  any observable side effects.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Expression complexity threshold</b> option to specify the minimal expression complexity threshold. Specifying bigger\n  numbers will remove reports on short expressions.\n</p>\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStreamOptionalCall",
          "displayName": "Redundant step in Stream or Optional call chain",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant Stream or Optional calls like <code>map(x -&gt; x)</code> or <code>filter(x -&gt; true)</code>,\n  redundant <code>sorted</code> or <code>distinct</code>.</p>\n<!-- tooltip end -->\n<p>Note that a mapping operation in code like <code>streamOfIntegers.map(Integer::valueOf)</code>\n  works as <code>requireNonNull</code> check:\n  if the stream contains <code>null</code>, it throws a <code>NullPointerException</code>, thus it's not absolutely redundant.\n  Disable the <b>Report redundant boxing in Stream.map</b> option if you do not want such cases to be reported.</p>\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyCollector",
          "displayName": "Simplifiable collector",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports collectors that can be simplified.\n<p>In particular, some cascaded <code>groupingBy</code> collectors can be expressed by using a\n  simpler <code>toMap</code> collector, which is also likely to be more performant.</p>\n<p>Example:</p>\n<pre><code>\n  Collectors.groupingByConcurrent(String::length, Collectors.collectingAndThen(Collectors.maxBy(String::compareTo), Optional::get));\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Collectors.toConcurrentMap(String::length, Function.identity(), BinaryOperator.maxBy(String::compareTo));\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 8 or higher.</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryDefault",
          "displayName": "Unnecessary 'default' for enum 'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports enum <code>switch</code> statements or expression with <code>default</code> branches which can never be taken,\nbecause all possible values are covered by a <code>case</code> branch.\n<p>Such elements are redundant, especially for <code>switch</code> expressions, because they don't compile when all\n  enum constants are not covered by a <code>case</code> branch.</p>\n<p>\n  The language level needs to be configured to 14 to report <code>switch</code> expressions.\n</p>\n<p>The provided quick-fix removes <code>default</code> branches.</p>\n<p>Example:</p>\n<pre><code>\n  enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -&gt; 1;\n      case B -&gt; 2;\n      default -&gt; 3;\n    };\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  enum E { A, B }\n  int foo(E e) {\n    return switch (e) {\n      case A -&gt; 1;\n      case B -&gt; 2;\n    };\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Only report switch expressions</b> option to report only redundant <code>default</code> branches in switch expressions.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCollectionOperation",
          "displayName": "Redundant Collection operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessarily complex collection operations which have simpler alternatives.\n<p>Example:</p>\n<pre><code>\n  void f(String[] array, Collection&lt;String&gt; collection) {\n    String[] strings = Arrays.asList(array).subList(0, 10).toArray(new String[0]);\n    boolean contains = collection.containsAll(Collections.singletonList(\"x\"));\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void f(String[] array, Collection&lt;String&gt; collection) {\n    String[] strings = Arrays.copyOf(array, 10);\n    boolean contains = collection.contains(\"x\");\n  }\n</code></pre>\n\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantClassCall",
          "displayName": "Redundant 'isInstance()' or 'cast()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant calls of <code>java.lang.Class</code> methods.\n<p>For example, <code>Xyz.class.isInstance(object)</code> can be replaced with <code>object instanceof Xyz</code>.\nThe instanceof check is preferred: even though the performance will probably be the same as these methods are intrinsics,\nthey better indicate a static check.</p>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyOptionalCallChains",
          "displayName": "Optional call chain can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>Optional</b> call chains that can be simplified. Here are several examples of possible simplifications:\n<ul>\n  <li><code>optional.map(x -> true).orElse(false)</code> &rarr; <code>optional.isPresent()</code></li>\n  <li><code>optional.map(x -> Optional.of(x.trim())).orElseGet(Optional::empty)</code> &rarr; <code>optional.map(String::trim)</code></li>\n  <li><code>optional.map(x -> (String)x).orElse(null)</code> &rarr; <code>(String) optional.orElse(null)</code></li>\n  <li><code>Optional.ofNullable(optional.orElse(null))</code> &rarr; <code>optional</code></li>\n  <li><code>val = optional.orElse(null); val != null ? val : defaultExpr </code> &rarr; <code>optional.orElse(defaultExpr)</code></li>\n  <li><code>val = optional.orElse(null); if(val != null) expr(val) </code> &rarr; <code>optional.ifPresent(val -> expr(val))</code></li>\n</ul>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLabelOnBreakStatement",
          "displayName": "Unnecessary label on 'break' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>break</code> statements with unnecessary labels. Such labels do not change the\ncontrol flow but make the code difficult to follow.\n<p><b>Example:</b></p>\n<pre><code>\n  label:\n  for(int i = 0; i &lt; 10; i++) {\n    if (shouldBreak()) break label;\n    //doSmth\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  label:\n  for(int i = 0; i &lt; 10; i++) {\n    if (shouldBreak()) break;\n    //doSmth\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "DuplicateBranchesInSwitch",
          "displayName": "Duplicate branches in 'switch'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements or expressions that contain the same code in different branches\nand suggests merging the duplicate branches.\n<p>Example:</p>\n<pre><code>\n  <b>switch</b> (n) {\n    <b>case</b> 1:\n      System.out.println(n);\n      <b>break</b>;\n    <b>case</b> 2:\n      System.out.println(n);\n      <b>break</b>;\n    <b>default</b>:\n      System.out.println(\"default\");\n  }\n</code></pre>\n<p>Can be replaced with:</p>\n<pre><code>\n  <b>switch</b> (n) {\n    <b>case</b> 1:\n    <b>case</b> 2:\n      System.out.println(n);\n      <b>break</b>;\n    <b>default</b>:\n      System.out.println(\"default\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantFileCreation",
          "displayName": "Redundant 'File' instance creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>File</code> creation in one of the following constructors when only <code>String</code> path can be used: <code>FileInputStream</code>, <code>FileOutputStream</code>,\n<code>FileReader</code>, <code>FileWriter</code>, <code>PrintStream</code>, <code>PrintWriter</code>, <code>Formatter</code>.\n<p>Example:</p>\n<pre>\nInputStream is = new FileInputStream(new File(\"in.txt\"));\n</pre>\n<p>After quick-fix is applied:</p>\n<pre>\nInputStream is = new FileInputStream(\"in.txt\");\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ExcessiveRangeCheck",
          "displayName": "Excessive range check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports condition chains in which a value range is checked and these condition chains can be simplified to a single check.\n<p>The quick-fix replaces a condition chain with a simplified expression:</p>\n<p>Example:</p>\n<pre>\n  x > 2 && x &lt; 4\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  x == 3\n</pre>\n<p>Example:</p>\n<pre>\n  arr.length == 0 || arr.length > 1\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  arr.length != 1\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringOperationCanBeSimplified",
          "displayName": "Redundant String operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>String</code> constructors and calls to methods like <code>toString()</code> or <code>substring()</code>\nwhen they can be replaced with a simplified expression.\n<p>For example, calls to these methods can be safely removed in cases\n  like <code>\"string\".substring(0)</code>, <code>\"string\".toString()</code>, or\n  <code>new StringBuilder().toString().substring(1,3)</code>.</p>\n<p>Example:</p>\n<pre><code>\n  System.out.println(new String(\"message\"));\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  System.out.println(\"message\");\n</code></pre>\n<p>\n  Note that the quick-fix removes the redundant constructor, and this may affect <code>String</code> referential equality.\n  If you need to preserve it even though it is considered bad practice, suppress the warning or configure the settings to ignore\n  redundant <code>String</code> constructors.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CastCanBeRemovedNarrowingVariableType",
          "displayName": "Too weak variable type leads to unnecessary cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports type casts that can be removed if the variable type is narrowed to the cast type.\n<p>Example:</p>\n<pre><code>\n  Object x = \"  string  \";\n  System.out.println(((String)x).trim());\n</code></pre>\n<p>\nHere, changing the type of <code>x</code> to <code>String</code> makes the cast redundant. The suggested quick-fix updates the variable type and\nremoves all redundant casts on that variable:\n</p>\n<pre><code>\n  String x = \"  string  \";\n  System.out.println(x.trim());\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "StringBufferReplaceableByString",
          "displayName": "'StringBuilder' can be replaced with 'String'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>StringBuffer</code>, <code>StringBuilder</code>, or <code>StringJoiner</code>\nwhich can be replaced with a single <code>String</code> concatenation.\n<p>Using <code>String</code> concatenation\n  makes the code shorter and simpler.</p>\n<p>\nThis inspection only reports when the suggested replacement does not result in significant\nperformance drawback on modern JVMs. In many cases, <code>String</code> concatenation may perform better.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  StringBuilder result = new StringBuilder();\n  result.append(\"i = \");\n  result.append(i);\n  result.append(\";\");\n  return result.toString();\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String result = \"i = \" + i + \";\";\n  return result;\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ExcessiveLambdaUsage",
          "displayName": "Excessive lambda usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if a trivial lambda expression is used in cases in which there's an alternative method that behaves in the same way, but accepts a concrete value\ninstead of a lambda.\n<p>This inspection helps simplify the code.</p>\n<p>Example:</p>\n<pre>\n  Optional.orElseGet(() -> null)\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  Optional.orElse(null)\n</pre>\n<!-- tooltip end -->\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryLabelOnContinueStatement",
          "displayName": "Unnecessary label on 'continue' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>continue</code> statements with unnecessary\nlabels.\n<p>Example:</p>\n<pre><code>\n  LABEL:\n  while (a &gt; b) {\n    System.out.println(\"Hello\");\n    //the code below is the last statement in a loop,\n    //so unnecessary label and continue can be removed\n    continue LABEL;\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCompareCall",
          "displayName": "Redundant 'compare()' method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparisons in which the <code>compare</code> method is superfluous.\n<p>Example:</p>\n<pre><code>\n  boolean result = Integer.compare(a, b) == 0;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean result = a == b;\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantArrayCreation",
          "displayName": "Redundant array creation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports arrays that are created specifically to be passed as a varargs parameter.\n<p>Example:</p>\n<p><code>Arrays.asList(new String[]{\"Hello\", \"world\"})</code></p>\n<p>The quick-fix replaces the array initializer with individual arguments:</p>\n<p><code>Arrays.asList(\"Hello\", \"world\")</code></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantCast",
          "displayName": "Redundant type cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary cast expressions.\n\n<p>Example:</p>\n<pre><code>\n  static void foo() {\n        String o = null;\n        Object o2 = (Object) o;\n  }\n</code></pre>\n</body>\n</html>\n<!-- tooltip end -->"
        },
        {
          "shortName": "UnnecessaryContinue",
          "displayName": "Unnecessary 'continue' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>continue</code> statements if they are the last reachable statements in the loop.\nThese <code>continue</code> statements are unnecessary and can be safely removed.\n<p>Example:</p>\n<pre><code>\n  for (String element: elements) {\n    System.out.println();\n    continue;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  for (String element: elements) {\n    System.out.println();\n  }\n</code></pre>\n<p>The inspection doesn't analyze JSP files.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore in then branch of 'if' statement with 'else' branch</b> option to ignore\n  <code>continue</code> statements when they are placed in a <code>then</code> branch of a complete\n  <code>if</code>-<code>else</code> statement.\n</p>\n<p>Example:</p>\n<pre><code>\n  for (String element: elements) {\n    if(element.isEmpty()) {\n      continue;\n    } else {\n      //...\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantTypeArguments",
          "displayName": "Redundant type arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports all calls to parametrized methods in which explicit argument types\ncan be omitted since they will be unambiguously inferred by the compiler.\n<p>\n  Using redundant type arguments makes code superfluous and thus less readable.\n</p>\n<p>Example:</p>\n<pre>\n  List&lt;String&gt; list = Arrays.&lt;String&gt;asList(\"Hello\", \"World\");\n</pre>\n<p>A quick-fix is provided to remove redundant type arguments:</p>\n<pre>\n  List&lt;String&gt; list = Arrays.asList(\"Hello\", \"World\");\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SimplifyStreamApiCallChains",
          "displayName": "Stream API call chain can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports stream API call chains that can be simplified.\n  It enables you to avoid creating redundant temporary objects when traversing a collection.</p>\n<p>\n  The inspection replaces the following call chains:\n</p>\n<ul>\n  <li><code>collection.stream().forEach()</code> &rarr; <code>collection.forEach()</code></li>\n  <li><code>collection.stream().collect(toList/toSet/toCollection())</code> &rarr; <code>new CollectionType&lt;&gt;(collection)</code></li>\n  <li><code>collection.stream().toArray()</code> &rarr; <code>collection.toArray()</code></li>\n  <li><code>Arrays.asList().stream()</code> &rarr; <code>Arrays.stream()</code> or <code>Stream.of()</code></li>\n  <li><code>IntStream.range(0, array.length).mapToObj(idx -> array[idx])</code> &rarr; <code>Arrays.stream(array)</code></li>\n  <li><code>IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))</code> &rarr; <code>list.stream()</code></li>\n  <li><code>Collections.singleton().stream()</code> &rarr; <code>Stream.of()</code></li>\n  <li><code>Collections.emptyList().stream()</code> &rarr; <code>Stream.empty()</code></li>\n  <li><code>stream.filter().findFirst().isPresent()</code> &rarr; <code>stream.anyMatch()</code></li>\n  <li><code>stream.collect(counting())</code> &rarr; <code>stream.count()</code></li>\n  <li><code>stream.collect(maxBy())</code> &rarr; <code>stream.max()</code></li>\n  <li><code>stream.collect(mapping())</code> &rarr; <code>stream.map().collect()</code></li>\n  <li><code>stream.collect(reducing())</code> &rarr; <code>stream.reduce()</code></li>\n  <li><code>stream.collect(summingInt())</code> &rarr; <code>stream.mapToInt().sum()</code></li>\n  <li><code>stream.mapToObj(x -> x)</code> &rarr; <code>stream.boxed()</code></li>\n  <li><code>stream.map(x -> {...; return x;})</code> &rarr; <code>stream.peek(x -> ...)</code></li>\n  <li><code>!stream.anyMatch()</code> &rarr; <code>stream.noneMatch()</code></li>\n  <li><code>!stream.anyMatch(x -> !(...))</code> &rarr; <code>stream.allMatch()</code></li>\n  <li><code>stream.map().anyMatch(Boolean::booleanValue)</code> &rarr; <code>stream.anyMatch()</code></li>\n  <li><code>IntStream.range(expr1, expr2).mapToObj(x -> array[x])</code> &rarr; <code>Arrays.stream(array, expr1, expr2)</code></li>\n  <li><code>Collection.nCopies(count, ...)</code> &rarr; <code>Stream.generate().limit(count)</code></li>\n  <li><code>stream.sorted(comparator).findFirst()</code> &rarr; <code>Stream.min(comparator)</code></li>\n  <li><code>optional.orElseGet(() -> { throw new ...; })</code> &rarr; <code>optional.orElseThrow()</code></li>\n</ul>\n<p>\n  Note that the replacements semantic may have minor difference in some cases. For example,\n  <code>Collections.synchronizedList(...).stream().forEach()</code> is not synchronized while\n  <code>Collections.synchronizedList(...).forEach()</code> is synchronized.\n  Also, <code>collect(Collectors.maxBy())</code> returns an empty <code>Optional</code> if the resulting element is\n  <code>null</code> while <code>Stream.max()</code> throws <code>NullPointerException</code> in this case.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ManualMinMaxCalculation",
          "displayName": "Manual min/max calculation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases in which the minimum or the maximum of two numbers can be calculated by using\n<code>Math.max()</code> or <code>Math.min()</code> instead of doing it manually.\n<p>Example:</p>\n<pre>\n  public int min(int a, int b) {\n    return b &lt; a ? b : a;\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  public int min(int a, int b) {\n    return Math.min(a, b);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Disable for float and double</b> option to disable this inspection for <code>double</code> and <code>float</code>.\n  This is useful because the quick-fix may slightly break semantics for <code>float</code>/\n  <code>double</code> when handling <code>NaN</code>. Nevertheless, in most cases it will actually fix\n  the subtle bug when users do not care about <code>NaN</code>.\n</p>\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryStringEscape",
          "displayName": "Unnecessarily escaped character",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessarily escaped characters in <code>String</code> and optionally <code>char</code> literals.\n<p>The escaped tab character <code>\\t</code> is not reported, because otherwise it will be invisible.</p>\n<p>Examples:</p>\n<pre><code>\n  String s = \"\\'Scare\\' quotes\";\n  String t = \"\"\"\n    All you need is\\n\\tLove\\n\"\"\";\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String s = \"'Scare' quotes\";\n  String t = \"\"\"\n    All you need is\n    \\tLove\n  \"\"\";\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2019.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ConditionCoveredByFurtherCondition",
          "displayName": "Condition is covered by further condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports conditions that become redundant as they are completely covered by a subsequent condition.\n<p>For example, in the <code>value != -1 && value > 0</code> condition, the first part is redundant:\nif it's false, then the second part is also false.\nOr in a condition like <code>obj != null && obj instanceof String</code>,\n  the null-check is redundant as <code>instanceof</code> operator implies non-nullity.</p>\n<!-- tooltip end -->\n<p><small>New in 2018.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantUnmodifiable",
          "displayName": "Redundant usage of unmodifiable collection wrappers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant calls to unmodifiable collection wrappers within the\n<code>Collections</code> class.\n<p>If the argument that is passed to an unmodifiable\n  collection wrapper is already immutable, such a wrapping becomes redundant.</p>\n<p>Example:</p>\n<pre>\n  Collections.unmodifiableList(Collections.singletonList(\"abc\"));\n</pre>\n<p>In order to detect the methods that return unmodifiable collections, the\ninspection uses the <code>org.jetbrains.annotations.Unmodifiable</code>\nand <code>org.jetbrains.annotations.UnmodifiableView</code> annotations.\nUse them to extend the inspection to your own unmodifiable collection\n  wrappers.</p>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantComparatorComparing",
          "displayName": "Comparator method can be simplified",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>Comparator</code> combinator constructs which can be simplified.\n<p>Example:</p>\n<pre><code>\n  c.thenComparing(Comparator.comparing(function));\n\n  Comparator.comparing(Map.Entry::getKey);\n\n  Collections.max(list, Comparator.reverseOrder());\n</code></pre>\n<p>After the quick-fixes are applied:</p>\n<pre>\n  c.thenComparing(function)\n\n  Map.Entry.comparingByKey()\n\n  Collections.min(list, Comparator.naturalOrder());\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ObviousNullCheck",
          "displayName": "Null-check method is called with obviously non-null argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports if a null-checking method (for example, <code>Objects.requireNonNull</code> or <code>Assert.assertNotNull</code>) is\ncalled on the value that is obviously non-null (for example, a newly created object). Such a check is redundant and may indicate\na programming error.\n<!-- tooltip end -->\n<p>New in 2017.2</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryBreak",
          "displayName": "Unnecessary 'break' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any unnecessary <code>break</code> statements.\n<p>An <code>break</code> statement is unnecessary if no other statements are executed after it has been removed.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  switch (e) {\n    case A -&gt; {\n        System.out.println(\"A\");\n        break; // reports 'break' statement is unnecessary\n    }\n    default -&gt; {\n        System.out.println(\"Default\");\n        break; // reports 'break' statement is unnecessary\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Proofreading",
      "inspections": [
        {
          "shortName": "SpellCheckingInspection",
          "displayName": "Typo",
          "defaultSeverity": "TYPO",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html><body>Reports typos and misspellings in your code, comments, and literals and fixes them with one click.</body></html>\n"
        }
      ]
    },
    {
      "name": "Performance",
      "inspections": [
        {
          "shortName": "MapReplaceableByEnumMap",
          "displayName": "'Map' can be replaced with 'EnumMap'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of <code>java.util.Map</code> objects\nwhose key types are enumerated classes. Such <code>java.util.Map</code> objects\ncan be replaced with <code>java.util.EnumMap</code> objects.\n<p>\n  <code>java.util.EnumMap</code> implementations can be much more efficient\n  because the underlying data structure is a simple array.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Map&lt;MyEnum, String&gt; myEnums = new HashMap&lt;&gt;();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Map&lt;MyEnum, String&gt; myEnums = new EnumMap&lt;&gt;(MyEnum.class);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "TrivialStringConcatenation",
          "displayName": "Concatenation with empty string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n  Reports string concatenations where one of the arguments is the empty string.\n  Such a concatenation is unnecessary and inefficient, particularly when used as\n  an idiom for formatting non-<code>String</code> objects or primitives into <code>String</code>s.\n</p>\n<p>\n  A quick-fix is suggested to simplify the concatenation.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(int x, int y) {\n    String s = \"\" + x + \" ; \" + y;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void foo(int x, int y) {\n    String s = x + \" ; \" + y;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ArraysAsListWithZeroOrOneArgument",
          "displayName": "Call to 'Arrays.asList()' with too few arguments",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Arrays.asList()</code> with at most one argument.\n<p>\n  Such calls could be replaced\n  with <code>Collections.singletonList()</code>, <code>Collections.emptyList()</code>,\n  or <code>List.of()</code> on JDK 9 and later, which will save some memory.</p>\n<p>In particular, <code>Collections.emptyList()</code> and <code>List.of()</code> with no arguments\n  always return a shared instance,\n  while <code>Arrays.asList()</code> with no arguments creates a new object every time it's called.</p>\n<p>Note: the lists returned by <code>Collections.singletonList()</code> and <code>List.of()</code> are immutable,\nwhile the list returned <code>Arrays.asList()</code> allows calling the <code>set()</code> method.\nThis may break the code in rare cases.</p>\n<p><b>Example:</b></p>\n<pre>\n  List&lt;String&gt; empty = Arrays.asList();\n  List&lt;String&gt; one = Arrays.asList(\"one\");\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  List&lt;String&gt; empty = Collections.emptyList();\n  List&lt;String&gt; one = Collections.singletonList(\"one\");\n</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SetReplaceableByEnumSet",
          "displayName": "'Set' replaceable with 'EnumSet'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of <code>java.util.Set</code> objects whose content types are enumerated classes. Such <code>Set</code> objects\ncan be replaced with <code>java.util.EnumSet</code> objects.\n<p>\n  <code>EnumSet</code> implementations can be much more efficient compared to\n  other sets, as the underlying data structure is a bit vector. Use the quick-fix to replace the initializer with a call to\n  <code>EnumSet.noneOf()</code>. This quick-fix is not available when the type of the variable is a sub-class of <code>Set</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  enum MyEnum { FOO, BAR; }\n\n  Set&lt;MyEnum&gt; enums = new HashSet&lt;MyEnum&gt;();\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  enum MyEnum { FOO, BAR; }\n\n  Set&lt;MyEnum&gt; enums = EnumSet.noneOf(MyEnum.class);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInLoops",
          "displayName": "String concatenation in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports String concatenation in loops.\n<p>\n  As every String concatenation copies the whole\n  string, usually it is preferable to replace it with explicit calls to <code>StringBuilder.append()</code> or\n  <code>StringBuffer.append()</code>.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  String str = \"\";\n  for(int i=0; i&lt;10; i++) {\n    str += i;\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String str = \"\";\n  StringBuilder strBuilder = new StringBuilder(str);\n  for(int i = 0; i&lt;10; i++) {\n    strBuilder.append(i);\n  }\n  str = strBuilder.toString();\n</pre>\n<!-- tooltip end -->\n<p>\n  Sometimes, the quick-fixes allow you to convert a <code>String</code> variable to a <code>StringBuilder</code> or\n  introduce a new <code>StringBuilder</code>. Be careful if the original code specially handles the <code>null</code> value, as the\n  replacement may change semantics. If <code>null</code> is possible, null-safe fixes that generate\n  necessary null-checks are suggested. Also, it's not guaranteed that the automatic replacement will always be more performant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "DynamicRegexReplaceableByCompiledPattern",
          "displayName": "Dynamic regular expression could be replaced by compiled Pattern",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the regular expression methods (such as <code>matches()</code> or <code>replace()</code>)\nof <code>java.lang.String</code> using constants arguments.\n<p>\n  Such calls may be profitably replaced with a <code>private static final Pattern</code> field\n  so that the regular expression does not have to be compiled each time it is used.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  text.replace(\"abc\", replacement);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  private static final Pattern ABC = Pattern.compile(\"abc\", Pattern.LITERAL);\n  ABC.matcher(text).replaceAll(Matcher.quoteReplacement(replacement));\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "BooleanConstructor",
          "displayName": "Boolean constructor call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports creation of <code>Boolean</code> objects.\n<p>\n  Constructing new <code>Boolean</code> objects is rarely necessary,\n  and may cause performance problems if done often enough. Also, <code>Boolean</code>\n  constructors are deprecated since Java 9 and could be removed or made\n  inaccessible in future Java versions.</p>\n<p><b>Example:</b></p>\n<pre>\n  Boolean b1 = new Boolean(true);\n  Boolean b2 = new Boolean(str);\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  Boolean b1 = Boolean.TRUE;\n  Boolean b2 = Boolean.valueOf(str);\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ManualArrayToCollectionCopy",
          "displayName": "Manual array to collection copy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that uses a loop to copy the contents of an array into a collection.\n<p>\n  A shorter and potentially faster (depending on the collection implementation) way to do this is using <code>Collection.addAll(Arrays.asList())</code> or <code>Collections.addAll()</code>.\n</p>\n<p>\n<p>Only loops without additional statements inside are reported.</p>\n<p><b>Example:</b></p>\n<pre>\n  void addAll(List&lt;String&gt; list, String[] arr) {\n    for (int i = 0; i &lt; arr.length; i++) {\n      String s = arr[i];\n      list.add(s);\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  void addAll(List&lt;String&gt; list, String[] arr) {\n    Collections.addAll(list, arr);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringInIndexOf",
          "displayName": "Single character string argument in 'String.indexOf()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports single character strings being used as an argument in <code>String.indexOf()</code> and\n<code>String.lastIndexOf()</code> calls.\n<p>A quick-fix is suggested to replace such string literals with equivalent character literals, gaining some performance enhancement.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  return s.indexOf(\"x\");\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  return s.indexOf('x');\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantStringFormatCall",
          "displayName": "Redundant call to 'String.format()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to methods like <code>format()</code> and <code>printf()</code> that can be safely removed or simplified.\n<p><b>Example:</b></p>\n<pre>\n  System.out.println(String.format(\"Total count: %d\", 42));\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  System.out.printf(\"Total count: %d%n\", 42);\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InstantiatingObjectToGetClassObject",
          "displayName": "Instantiating object to get Class object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that instantiates a class to get its class object.\n<p>It is more performant to access the class object\n  directly by name.</p>\n<p><b>Example:</b></p>\n<pre>\n  Class&lt;?&gt; c = new Sample().getClass();\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  Class&lt;?&gt; c = Sample.class;\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IfStatementMissingBreakInLoop",
          "displayName": "Early loop exit in 'if' condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops with an <code>if</code> statement that can end with <code>break</code> without changing the semantics.\n<p>This prevents redundant loop iterations.</p>\n<p><b>Example:</b></p>\n<pre>\n  boolean found = false;\n  for (int i = 0; i &lt; arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found = true;\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  boolean found = false;\n  for (int i = 0; i &lt; arr.length; i++) {\n    if (Objects.equals(value, arr[i])) {\n      found = true;\n      break;\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<small>New in 2019.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "BoxingBoxedValue",
          "displayName": "Boxing of already boxed value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports boxing of already boxed values.\n<p>\n  This is a redundant\n  operation since any boxed value will first be auto-unboxed before boxing the\n  value again. If done inside an inner loop, such code may cause performance\n  problems.\n</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre>  Integer value = 1;\n  method(Integer.valueOf(value));\n</pre>\n<p>After the quick fix is applied:</p>\n<pre>\n  Integer value = 1;\n  method(value);\n</pre>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "StringEqualsEmptyString",
          "displayName": "'String.equals()' can be replaced with 'String.isEmpty()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>equals()</code> being called to compare a <code>String</code> with an empty string.\nIn this case, using <code>.isEmpty()</code> is better as it shows you exactly what you're checking.\n<p><b>Example:</b></p>\n<pre><code>\n  void checkString(String s){\n    if (\"\".equals(s)) throw new IllegalArgumentException();\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void checkString(String s){\n    if (s != null && s.isEmpty()) throw new IllegalArgumentException();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <code>\"\".equals(str)</code> returns false when <code>str</code> is null. For safety, this inspection's quick-fix inserts an explicit\n  null-check when\n  the <code>equals()</code> argument is nullable. Use the option to make the inspection ignore such cases.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInsideStringBufferAppend",
          "displayName": "String concatenation as argument to 'StringBuilder.append()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>String</code> concatenation used as the argument to <code>StringBuffer.append()</code>,\n<code>StringBuilder.append()</code> or <code>Appendable.append()</code>.\n<p>\n  Such calls may profitably be turned into chained append calls on the existing <code>StringBuffer/Builder/Appendable</code>\n  saving the cost of an extra <code>StringBuffer/Builder</code> allocation.\n  This inspection ignores compile-time evaluated <code>String</code> concatenations, in which case the conversion would only\n  worsen performance.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  void bar(StringBuilder builder, String name) {\n    builder.append(\"Hello,\" + name);    //warning\n    builder.append(\"Hello,\" + \"world\"); //no warning\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ObjectAllocationInLoop",
          "displayName": "Object allocation in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports object or array allocations inside loops. While not\nnecessarily a problem, an object allocation inside a loop is a great place to look for memory leaks\nand performance issues.\n<p>\n  The inspection reports the following constructs:\n</p>\n<ul>\n  <li>Explicit allocations via <code>new</code> operator</li>\n  <li>Methods known to return new object</li>\n  <li>Instance-bound method references</li>\n  <li>Lambdas that capture variables or <code>this</code> reference</li>\n</ul>\n<p><b>Example:</b></p>\n<pre><code>\n  // Explicit allocation\n  for (Status status : Status.values()) {\n    declarationsMap.put(status, new ArrayList&lt;&gt;());\n  }\n\n  // Lambda captures variable\n  String message = \"Engine running.\";\n  for (Engine engine : engines) {\n      if (!isRunning(engine)) {\n          logger.warn(() -> {\n              return String.format(message);\n          });\n      }\n  }\n\n  // Instance-bound method reference\n  for(Node node : nodes) {\n    descriptor = node.getDescription();\n    descriptor.ifPresent(dynamicTestExecutor::execute);\n  }\n</code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseBulkOperation",
          "displayName": "Bulk operation can be used instead of iteration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports single operations inside loops that could be replaced with a bulk method.\n<p>\n  Not only bulk methods are shorter, but in some cases they may be more performant as well.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  void test(Collection&lt;Integer&gt; numbers) {\n    List&lt;Integer&gt; result = new ArrayList&lt;>();\n    for (Integer i : numbers) {\n      result.add(i);\n    }\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre>\n  void test(Collection&lt;Integer&gt; numbers) {\n    List&lt;Integer&gt; result = new ArrayList&lt;>();\n    result.addAll(numbers);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  The <b>Use Arrays.asList() to wrap arrays</b> option allows you to also look out for arrays, even if the bulk method requires a collection.\n  In this case the quick-fix will automatically wrap the array in <code>Arrays.asList()</code> call.\n</p>\n<p><small>New in 2017.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "LengthOneStringsInConcatenation",
          "displayName": "Single character string concatenation",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports concatenation with string literals that consist of one character.\n<p>These literals may be replaced with equivalent character literals, gaining some performance enhancement.</p>\n<p><b>Example:</b></p>\n<pre>\n  String hello = hell + \"o\";\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String hello = hell + 'o';\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassInitializerMayBeStatic",
          "displayName": "Class initializer may be 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports instance initializers which may be made <code>static</code>.\n<p>\n  An instance initializer may be static if it does not reference any of its class' non-static members.\n  Static initializers are executed once the class is resolved,\n  while instance initializers are executed on each instantiation of the class.</p>\n<p><b>Example:</b></p>\n<pre>\n  class A {\n     public static String CONSTANT;\n     {\n        CONSTANT = \"Hello\";\n     }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  class A {\n     public static String CONSTANT;\n     static {\n        CONSTANT = \"Hello\"; //now initialized only once per class\n     }\n  }\n</pre>\n\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "TailRecursion",
          "displayName": "Tail recursion",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports tail recursion, that is, when a method calls itself as its last action before returning.\n<p>\n  Tail recursion can always be replaced by looping, which will be considerably faster.\n  Some JVMs perform tail-call optimization, while others do not. Thus, tail-recursive solutions may have considerably different\n  performance characteristics on different virtual machines.\n</p>\n<p>Example:</p>\n<pre>\n  int factorial(int val, int runningVal) {\n    if (val == 1) {\n      return runningVal;\n    } else {\n      return factorial(val - 1, runningVal * val);\n    }\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  int factorial(int val, int runningVal) {\n    while (true) {\n      if (val == 1) {\n        return runningVal;\n      } else {\n        runningVal = runningVal * val;\n        val = val - 1;\n      }\n    }\n  }\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "CollectionContainsUrl",
          "displayName": "'Map' or 'Set' may contain 'URL' objects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instantiations of <code>java.util.Set</code> and <code>java.util.Map</code> that contain\n<code>java.net.URL</code> objects.\n<p>\n  Adding <code>URL</code> objects to such collections can cause performance problems because of calls to\n  the <code>equals()</code> and <code>hashCode()</code> methods of <code>URL</code>.\n</p>\n<p>\n  <code>URL</code>'s <code>equals()</code> and\n  <code>hashCode()</code> methods use a DNS lookup, which depending on the availability of the network and the speed of the DNS server can\n  cause significant delays.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Set&lt;URL&gt; set = new HashSet&lt;URL&gt;();\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AutoBoxing",
          "displayName": "Auto-boxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports expressions that are affected by autoboxing conversion (automatic wrapping of primitive values as objects).\nTry not to use objects instead of primitives. It might significantly affect performance.\n<p><b>Example:</b></p>\n<pre><code>Integer x = 42;</code></pre>\n<p>The quick-fix makes the conversion explicit:</p>\n<pre><code>Integer x = Integer.valueOf(42);</code></pre>\n<!-- tooltip end -->\n<p>Autoboxing conversion is not supported in Java 1.4 and earlier JVM.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceInefficientStreamCount",
          "displayName": "Inefficient Stream API call chains ending with count()",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Stream API call chains ending with the <code>count()</code> operation that\ncould be optimized.\n<p>\n  The following call chains are replaced by this inspection:\n</p>\n<ul>\n  <li><code>Collection.stream().count()</code> &rarr; <code>Collection.size()</code>. In Java 8 <code>Collection.stream().count()</code>\n    actually iterates over the collection elements to count them, while <code>Collection.size()</code> is much faster for most of the collections.</li>\n  <li><code>Stream.flatMap(Collection::stream).count()</code> &rarr; <code>Stream.mapToLong(Collection::size).sum()</code>. Similarly,\n    there's no need to iterate over all the nested collections. Instead, their sizes could be summed up.</li>\n  <li><code>Stream.filter(o -> ...).count() > 0</code> &rarr; <code>Stream.anyMatch(o -> ...)</code>. Unlike the original call,\n    <code>anyMatch()</code> may stop the computation as soon as a matching element is found.</li>\n  <li><code>Stream.filter(o -> ...).count() == 0</code> &rarr; <code>Stream.noneMatch(o -> ...)</code>. Similar to the above.</li>\n</ul>\n<p>\n  Note that if the replacement involves a short-circuiting operation like <code>anyMatch()</code>, there could be a visible behavior change,\n  if the intermediate stream operations produce side effects. In general, side effects should be avoided in Stream API calls.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferToStringInConcatenation",
          "displayName": "'StringBuilder.toString()' in concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>StringBuffer.toString()</code> or <code>StringBuilder.toString()</code> calls in string concatenations.\nSuch calls are unnecessary when concatenating and can be removed, saving a method call and an object allocation,\nwhich may improve performance.\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ToArrayCallWithZeroLengthArrayArgument",
          "displayName": "'Collection.toArray()' call style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports the usage of <code>Collection.toArray()</code> calls depending on different styles, and suggests applying the preferred style.</p>\n<p>There are two styles to convert a collection to an array:</p>\n<list>\n  <li>A pre-sized array, for example, <code>c.toArray(new String[c.size()])</code></li>\n  <li>An empty array, for example,  <code>c.toArray(new String[0])</code></li>\n</list>\n<p>In older Java versions, using a pre-sized array was recommended, as the reflection\n  call necessary to create an array of proper size was quite slow.</p>\n<p>However, since late updates of OpenJDK 6, this call was intrinsified, making\n  the performance of the empty array version the same, and sometimes even better, compared\n  to the pre-sized version. Also, passing a pre-sized array is dangerous for a concurrent or\n  synchronized collection as a data race is possible between the <code>size</code> and <code>toArray</code>\n  calls. This may result in extra nulls at the end of the array if the collection was concurrently\n  shrunk during the operation.</p>\n<!-- tooltip end -->\n<p>Use the inspection options to select the preferred style.</p>\n</body>\n</html>"
        },
        {
          "shortName": "StringBufferMustHaveInitialCapacity",
          "displayName": "StringBuilder without initial capacity",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports attempts to instantiate a new <code>StringBuffer</code> or\n<code>StringBuilder</code> object without specifying its initial capacity.\n<p>\n  If no initial capacity is specified, a default capacity is used, which will rarely be optimal.\n  Failing to specify the initial capacity for <code>StringBuffer</code> may result\n  in performance issues if space needs to be reallocated and memory copied\n  when the initial capacity is exceeded.\n</p>\n<p>Example:</p>\n<pre><code>\n  // Capacity is not specified\n  var sb = new StringBuilder();\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ObjectEqualsCanBeEquality",
          "displayName": "'equals()' call can be replaced with '=='",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports calls to <code>equals()</code> that can be replaced by <code>==</code> or <code>!=</code> expressions without a change in semantics.</p>\n<p>These calls can be replaced when they are used to compare <code>final</code> classes that don't have their own <code>equals()</code> implementation but use the default <code>Object.equals()</code>.</p>\n<p>This replacement may result in better performance.</p>\n<p>There is a separate inspection for <code>equals()</code> calls on <code>enum</code> values: 'equals()' called on Enum value.</p>\n<!-- tooltip end -->\n<!--<p><small>New in 2017.3</small>-->\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionFromString",
          "displayName": "Unnecessary temporary object in conversion from String",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom <code>String</code> to primitive types.\n<p><b>Example:</b></p>\n<pre>\n  new Integer(\"3\").intValue()\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  Integer.valueOf(\"3\")\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringReplaceableByStringBuffer",
          "displayName": "Non-constant string should be `StringBuilder`",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports variables declared as <code>java.lang.String</code> that are\nrepeatedly appended to. Such variables could be declared more efficiently as <code>java.lang.StringBuffer</code>\nor <code>java.lang.StringBuilder</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  String s = \"\";\n  for (int i = 0; i &lt; names.length; i++) {\n    String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n    s = s + name;\n  }\n</code></pre>\n<p>Such a loop can be replaced with:</p>\n<pre><code>\n  StringBuilder s = new StringBuilder();\n  for (int i = 0; i &lt; names.length; i++) {\n    String name = names[i] + (i == names.length - 1 ? \"\" : \" \");\n    s.append(name);\n  }\n</code></pre>\n<p>Or even with:</p>\n<pre><code>\n  String s = String.join(\" \", names);\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to make this inspection only report when the variable is appended to in a loop.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SlowAbstractSetRemoveAll",
          "displayName": "Call to 'set.removeAll(list)' may work slowly",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>java.util.Set.removeAll()</code> with a <code>java.util.List</code> argument.\n<p>\n  Such a call can be slow when the size of the argument is greater than or equal to the size of the set,\n  and the set is a subclass of <code>java.util.AbstractSet</code>.\n  In this case, <code>List.contains()</code> is called for each element in the set, which will perform a linear search.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  public void check(String... ss) {\n    // possible O(n^2) complexity\n    mySet.removeAll(List.of(ss));\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>  public void check(String... ss) {\n    // O(n) complexity\n    List.of(ss).forEach(mySet::remove);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ListRemoveInLoop",
          "displayName": "'List.remove()' called in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>List.remove(index)</code> called in a loop that can be replaced with <code>List.subList().clear()</code>.\n<p>The replacement\n  is more efficient for most <code>List</code> implementations when many elements are deleted.</p>\n<p>Example:</p>\n<pre><code>\n  void removeRange(List&lt;String&gt; list, int from, int to) {\n    for (int i = from; i &lt; to; i++) {\n        list.remove(from);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  void removeRange(List&lt;String&gt; list, int from, int to) {\n    if (to &gt; from) {\n      list.subList(from, to).clear();\n    }\n  }\n</pre>\n<p>\n  The quick-fix adds a range check automatically to prevent a possible <code>IndexOutOfBoundsException</code> when the minimal value is bigger\n  than the maximal value. It can be removed if such a situation is impossible in your code.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleSetterInClass",
          "displayName": "Call to simple setter from within class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to a simple property setter from within the property's class.\n<p>\n  A simple property setter is defined as one which simply assigns the value of its parameter to a field,\n  and does no other calculations. Such simple setter calls can be safely inlined.\n  Some coding standards also suggest against the use of simple setters for code clarity reasons.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n  private int index;\n    public Foo(int idx) {\n       setIndex(idx);\n    }\n    public void setIndex(int idx) {\n       index = idx;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo {\n    private int index;\n    public Foo(int idx) {\n      index = idx;\n    }\n    public void setIndex(int idx) {\n      index = idx;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>Whether to only report setter calls on <code>this</code>, not on objects of the same type passed in as a parameter.</li>\n  <li>Whether to ignore non-<code>private</code> setters.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsHashCodeCalledOnUrl",
          "displayName": "'equals()' or 'hashCode()' called on 'java.net.URL' object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>hashCode()</code> and <code>equals()</code> being called on <code>java.net.URL</code> objects.\n<p>\n  The <code>java.net.URL</code> class internally uses an instance of <code>java.net.URLStreamHandler</code>\n  to execute <code>hashCode()</code> and <code>equals()</code>.\n  This can cause performance problems because <code>java.net.URLStreamHandler</code> performs DNS lookups.\n  Depending on the availability of the network and the speed of a DNS server this can cause significant delays.\n</p>\n<p>The problem can most likely be solved by using <code>java.net.URI</code> instead.</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    int f(URL url1, URL url2) {\n      if (url1.equals(url2)) return url1.hashCode();\n      else return url2.hashCode();\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MethodMayBeStatic",
          "displayName": "Method may be 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that can safely be made <code>static</code>.\nMaking methods static when possible can reduce memory consumption and improve your code quality.\n<p>A method can be <code>static</code> if:</p>\n<ul>\n  <li>\n    it is not <code>synchronized</code>, <code>native</code> or <code>abstract</code>,\n  </li>\n  <li>\n    does not reference any of non-static methods and non-static fields from the containing class,\n  </li>\n  <li>\n    is not an override and is not overridden in a subclass.\n  </li>\n</ul>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>Whether to report only <code>private</code> and <code>final</code> methods, which increases the performance of this inspection.</li>\n  <li>Whether to ignore empty methods.</li>\n  <li>Whether to ignore default methods in interface when using Java 8 or higher.</li>\n  <li>\n    Whether to let the quick-fix replace instance qualifiers with class references\n    in calls to methods which are made <code>static</code>,\n    that is, call <code>myClass.m()</code> would be replaced with <code>MyClass.m()</code>.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "FieldMayBeStatic",
          "displayName": "Field may be 'static'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance variables that can safely be made <code>static</code>. A field\ncan be static if it is declared <code>final</code> and initialized with a constant.\n<p><b>Example:</b></p>\n<pre><code>\n  public final String str = \"sample\";\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CallToSimpleGetterInClass",
          "displayName": "Call to simple getter from within class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to a simple property getter from within the property's class.\n<p>\n  A simple property getter is defined as one which simply returns the value of a field,\n  and does no other calculations. Such simple getter calls can be safely inlined using the quick-fix.\n  Some coding standards also suggest against the use of simple getters for code clarity reasons.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return getName();\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public class Salient {\n    private String name;\n\n    public String getName() {\n      return name;\n    }\n\n    @Override\n    public String toString() {\n      return name;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>Whether to only report getter calls on <code>this</code>, not on objects of the same type passed in as a parameter.</li>\n  <li>Whether to ignore non-<code>private</code> getters.</li>\n</ul>\n\n</body>\n</html>"
        },
        {
          "shortName": "RandomDoubleForRandomInteger",
          "displayName": "Using 'Random.nextDouble()' to get random integer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to\n<code>java.util.Random.nextDouble()</code> that are used to create a positive integer number by multiplying\nthe call by a factor and casting to an integer.\n<p>\n  For generating a random positive integer in a range,\n  <code>java.util.Random.nextInt(int)</code> is simpler and more efficient.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  int getRandomInt() {\n    return (int) ((new Random()).nextDouble() * SIZE);\n  }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int getRandomInt() {\n    return (new Random()).nextInt(SIZE);\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "AutoUnboxing",
          "displayName": "Auto-unboxing",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports expressions that are affected by unboxing conversion (automatic unwrapping of objects into primitive values).\nTry not to use objects instead of primitives. It might significantly affect the performance.\n<p><b>Example:</b></p>\n<pre><code>int x = new Integer(42);</code></pre>\n<p>The quick-fix makes the conversion explicit:</p>\n<pre><code>int x = new Integer(42).intValue();</code></pre>\n<!-- tooltip end -->\n<p>Autoboxing conversion is not supported in Java 1.4 and earlier JVM.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "WrapperTypeMayBePrimitive",
          "displayName": "Wrapper type may be primitive",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables of wrapper type that are mostly used as primitive types.\n<p>In some cases, boxing can be source of significant performance penalty, especially in loops.</p>\n<p>Heuristics are applied to estimate the number of boxing operations. For example, conversions inside loops are considered\n  as much more numerous.</p>\n\n<p><b>Example:</b></p>\n<pre><code>  public void example() {\n    Integer value = 12;\n    needBox(value);\n    for (int i = 0; i &lt; 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  public void example() {\n    int value = 12;\n    needBox(value);\n    for (int i = 0; i &lt; 10; i++) {\n      // Loop usages considered as happening more often\n      needPrimitive(value);\n    }\n  }\n\n  void needPrimitive(int value) {}\n  void needBox(Integer value) {}\n</code></pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ManualArrayCopy",
          "displayName": "Manual array copy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports manual copying of array contents which can be replaced with <code>System.arraycopy()</code>.\n<p><b>Example:</b></p>\n<pre>\n  for (int i = 0; i &lt; array.length; i++) {\n    new_array[i] = array[i];\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  System.arraycopy(array, 0, new_array, 0, array.length);\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "KeySetIterationMayUseEntrySet",
          "displayName": "Iteration over 'keySet()' may be optimized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports iterations over the <code>keySet()</code> of a <code>java.util.Map</code> instance,\nwhere the iterated keys are used to retrieve the values from the map.\n<p>\n  Such iteration may be more efficient when replaced with an iteration over the\n  <code>entrySet()</code> or <code>values()</code> (if the key is not actually used).\n</p>\n<p>\n  Similarly, <code>keySet().forEach(key -&gt; ...)</code>\n  can be replaced with <code>forEach((key, value) -&gt; ...)</code> if values are retrieved\n  inside a lambda.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  for (Object key : map.keySet()) {\n   Object val = map.get(key);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  for (Object val : map.values()) {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectInstantiationInEqualsHashCode",
          "displayName": "Object instantiation inside 'equals()' or 'hashCode()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports construction of (temporary) new objects inside <code>equals()</code>, <code>hashCode()</code>, <code>compareTo()</code>, and\n<code>Comparator.compare()</code> methods.\n<p>\n  Besides constructor invocations, new objects can also be created by autoboxing or iterator creation inside a\n  <code>foreach</code> statement.\n  This can cause performance problems, for example, when objects are added to a <code>Set</code> or <code>Map</code>,\n  where these methods will be called often.\n</p>\n<p>\n  The inspection will not report when the objects are created in a <code>throw</code> or <code>assert</code> statement.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Person {\n    private String name;\n    private int age;\n\n    public boolean equals(Object o) {\n      return Arrays.equals(new Object[] {name, age}, new Object[] {((Foo)o).name, ((Foo)o).age});\n    }\n\n    public int hashCode() {\n      return (name + age).hashCode();\n    }\n  }\n</code></pre>\n<p>\n  In this example, two additional arrays are created inside <code>equals()</code>, usages of <code>age</code> field require boxing,\n  and <code>name + age</code> implicitly creates a new string.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddAllCanBeReplacedWithConstructor",
          "displayName": "Redundant 'Collection.addAll()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>Collection.addAll()</code> and <code>Map.putAll()</code> calls immediately after instantiation of a collection using the no-arg constructor.\n<p>Such constructs can be replaced with a single call to a parametrized constructor, which simplifies code. Also, for some collections the replacement\n  might be more performant.</p>\n<p><b>Example:</b></p>\n<pre><code>  Set&lt;String&gt; set = new HashSet&lt;&gt;();\n  set.addAll(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\n<p>Can be replaced with:</p>\n<pre><code>  Set&lt;String&gt; set = new HashSet&lt;&gt;(Arrays.asList(\"alpha\", \"beta\", \"gamma\"));\n</code></pre>\n<!-- tooltip end -->\n<p>\nStandard JDK collection classes are supported by default. Additionally, you can specify other classes in the inspection options.\n</body>\n</html>"
        },
        {
          "shortName": "CollectionsMustHaveInitialCapacity",
          "displayName": "Collection without initial capacity",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports attempts to instantiate a new <code>Collection</code> object without specifying\nan initial capacity.\n<p>\n  If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing\n  to specify initial capacities for collections may result in performance issues if space needs to be reallocated and\n  memory copied when the initial capacity is exceeded.\n  This inspection checks allocations of classes listed in the inspection's settings.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  new HashMap&lt;String, String&gt;();\n</code></pre>\n<!-- tooltip end -->\n<p>Use the following options to configure the inspection:</p>\n<ul>\n  <li>List collection classes that should be checked.</li>\n  <li>Whether to ignore field initializers.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UnnecessaryTemporaryOnConversionToString",
          "displayName": "Unnecessary temporary object in conversion to 'String'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary creation of temporary objects when converting\nfrom a primitive type to <code>String</code>.\n<p><b>Example:</b></p>\n<pre>\n  String foo = new Integer(3).toString();\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  String foo = Integer.toString(3);\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ExplicitArgumentCanBeLambda",
          "displayName": "Explicit argument can be lambda",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls that accept a non-trivial expression and can be replaced with an equivalent method call\nwhich accepts a lambda instead.\n<p>\nConverting an expression to a lambda ensures that the expression won't be evaluated\nif it's not used inside the method. For example, <code>optional.orElse(createDefaultValue())</code> can be converted\nto <code>optional.orElseGet(this::createDefaultValue)</code>.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "XML",
      "inspections": [
        {
          "shortName": "CheckDtdRefs",
          "displayName": "Unresolved DTD reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration.\nWorks in DTD an XML files.\n</body>\n</html>"
        },
        {
          "shortName": "XmlWrongRootElement",
          "displayName": "Wrong root element",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a root tag name different from the name specified in the <code>&lt;doctype&gt;</code> tag.\n</body>\n</html>"
        },
        {
          "shortName": "XmlUnusedNamespaceDeclaration",
          "displayName": "Unused schema declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unused namespace declaration or location hint in XML.\n</body>\n</html>"
        },
        {
          "shortName": "XmlInvalidId",
          "displayName": "Unresolved 'id' reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved <code>id</code> reference in XML.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedClassUsageInspection",
          "displayName": "Deprecated API usage in XML",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated classes and methods in XML files.\n</body>\n</html>"
        },
        {
          "shortName": "XmlDefaultAttributeValue",
          "displayName": "Redundant attribute with default value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a redundant assignment of the default value to an XML attribute.\n</body>\n</html>"
        },
        {
          "shortName": "XmlUnboundNsPrefix",
          "displayName": "Unbound namespace prefix",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unbound namespace prefix in XML.\n</body>\n</html>"
        },
        {
          "shortName": "CheckXmlFileWithXercesValidator",
          "displayName": "Failed external validation",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.\n</body>\n</html>"
        },
        {
          "shortName": "XmlDeprecatedElement",
          "displayName": "Deprecated symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a deprecated XML element or  attribute.\n<p>Symbols can be marked by XML comment or documentation tag with text 'deprecated'.\n</body>\n</html>"
        },
        {
          "shortName": "XmlHighlighting",
          "displayName": "XML highlighting",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports XML validation problems in the results of a batch code inspection.\n</body>\n</html>"
        },
        {
          "shortName": "CheckTagEmptyBody",
          "displayName": "Empty element content",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an element with empty contents.\n</body>\n</html>"
        },
        {
          "shortName": "XmlDuplicatedId",
          "displayName": "Duplicate 'id' attribute",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a duplicate <code>id</code> attribute in XML.\n</body>\n</html>"
        },
        {
          "shortName": "XmlPathReference",
          "displayName": "Unresolved file reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unresolved file reference in XML.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Assignment issues",
      "inspections": [
        {
          "shortName": "NestedAssignment",
          "displayName": "Nested assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment expression that is nested inside another expression.\n<p>Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  String userName;\n  // Warning: result of assignment to 'userName' is used\n  String message = \"Hello \" + (userName = \"Alice\") + \"!\"\n  System.out.println(message);\n  System.out.println(\"Goodbye \" + userName);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAssignmentWithOperatorAssignment",
          "displayName": "Assignment replaceable with operator assignment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignment operations which can be replaced by operator-assignment.\n<p>Code using operator assignment is shorter and may be clearer.</p>\n<p><b>Example:</b></p>\n<pre><code>  x = x + 3;\n  x = x / 3;\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>  x += 3;\n  x /= 3;\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore conditional operators</b> option to ignore <code>&amp;&amp;</code>\nand <code>||</code>. Replacing conditional operators with operator\nassignment would change the evaluation from lazy to eager, which may change the semantics of the expression.\n</p>\n<p>\nUse the <b>Ignore obscure operators</b> option to ignore <code>^</code> and <code>%</code>, which are less known.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "IncrementDecrementUsedAsExpression",
          "displayName": "Result of '++' or '--' used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an increment or a decrement expression that is nested inside another expression.\n<p>Such expressions may be confusing and violate the general design principle, which states that any construct should do precisely one thing.</p>\n<p>The quick-fix extracts the increment or decrement operation to a separate expression statement.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  int i = 10;\n  while (i-- > 0) {\n    System.out.println(i);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  int i = 10;\n  while (i > 0) {\n    i--;\n    System.out.println(i);\n  }\n  i--;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToForLoopParameter",
          "displayName": "Assignment to 'for' loop parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment to a <code>for</code> statement parameter or its modification inside the body of a <code>for</code> loop.\n<p>Although occasionally intended, this construct may be confusing and is often the result of a typo or a wrong variable being used.</p>\n<p>The quick-fix adds a declaration of a new variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  for (String s : list) {\n    // Warning: s is changed inside the loop\n    s = s.trim();\n    System.out.println(\"String: \" + s);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  for (String s : list) {\n    String trimmed = s.trim();\n    System.out.println(\"String: \" + trimmed);\n  }\n</code></pre>\n<p>Assignments in basic <code>for</code> loops without an update statement are not reported.\n  In such cases the assignment is probably intended and can't be easily moved to the update part of the <code>for</code> loop.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  for (int i = 0; i &lt; list.size(); ) {\n    if (element.equals(list.get(i))) {\n      list.remove(i);\n    } else {\n      // modification of for loop parameter is not reported\n      // as there's no update statement\n      i++;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Check enhanced 'for' loop parameters</b> option to specify whether modifications of enhanced <code>for</code> loop parameters\n  should be also reported.</p>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToCatchBlockParameter",
          "displayName": "Assignment to catch block parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an assignment to a variable declared as a <code>catch</code> block parameter.\n<p>Changing a <code>catch</code> block parameter is very confusing and should be discouraged.</p>\n<p>The quick-fix adds a declaration of a new variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void processFile(String fileName) throws Exception {\n    try {\n      doProcessFile(fileName);\n    }\n    catch(Exception ex) {\n      if (ex instanceof UncheckedIOException) {\n        // Warning: catch block parameter reassigned\n        ex = ((UncheckedIOException) ex).getCause();\n      }\n      throw ex;\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n    catch(Exception ex) {\n      Exception unwrapped = ex;\n      if (unwrapped instanceof UncheckedIOException) {\n        unwrapped = ((UncheckedIOException)\n          unwrapped).getCause();\n      }\n      throw unwrapped;\n    }\n</code></pre>\n<p>Parameters of multi-catch blocks are not reported because such parameters\n  are implicitly <code>final</code> and reassigning them causes a compilation error.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToLambdaParameter",
          "displayName": "Assignment to lambda parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment to a lambda parameter, including compound assignments and incrementing or decrementing the parameter.\n<p>Although occasionally intended, this construct may be confusing and is often caused by a typo or use of a wrong variable.</p>\n<p>The quick-fix adds a declaration of a new variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  list.forEach(s -> {\n    s = s.trim();\n    System.out.println(\"String: \" + s);\n  });\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  list.forEach(s -> {\n    String trimmed = s.trim();\n    System.out.println(\"String: \" + trimmed);\n  });\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore if assignment is a transformation of the original parameter</b> option to ignore assignments that modify the parameter\n  value based on its previous value.</p>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToSuperclassField",
          "displayName": "Constructor assigns value to field defined in superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment to a field that is declared in a superclass from within a constructor.\n<p>It is considered preferable to initialize the fields of a superclass in its own constructor and\n  delegate to that constructor in a subclass. This will also allow declaring a field <code>final</code>\n  if it isn't changed after the construction.</p>\n<p><b>Example:</b></p>\n<pre><code>\nclass Super {\n  int x;\n}\nclass Sub extends Super {\n  Sub(int _x) {\n    // Warning: x is declared in a superclass\n    x = _x;\n  }\n}\n</code></pre>\n<p>To avoid the problem, declare a superclass constructor:</p>\n<pre><code>\nclass Super {\n  final int x;\n\n  Super(int _x) {\n    x = _x;\n  }\n}\nclass Sub extends Super {\n  Sub(int _x) {\n    super(_x);\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentUsedAsCondition",
          "displayName": "Assignment used as condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an assignment that is used as a condition of an <code>if</code>, <code>while</code>, <code>for</code>, or\n<code>do</code> statement, or in any other context.\n<p>Although occasionally intended, this usage is confusing and may indicate a typo, for example, <code>=</code> instead of <code>==</code>.</p>\n<p>The quick-fix replaces <code>=</code> with <code>==</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void update(String str, boolean empty) {\n    // Warning: 'empty' is reassigned,\n    // not compared to str.isEmpty()\n    if (empty = str.isEmpty()) {\n      ...\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void update(String str, boolean empty) {\n    if (empty == str.isEmpty()) {\n      ...\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToNull",
          "displayName": "'null' assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a variable that is assigned to <code>null</code> outside a declaration.\n<p>The main purpose of <code>null</code> in Java is to denote uninitialized\n  reference variables. In rare cases, assigning a variable explicitly to <code>null</code>\n  is useful to aid garbage collection. However, using <code>null</code> to denote a missing, not specified, or invalid value or a not\n  found element is considered bad practice and may make your code more prone to <code>NullPointerExceptions</code>.\n  Instead, consider defining a sentinel object with the intended semantics\n  or use library types like <code>Optional</code> to denote the absence of a value.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Integer convert(String s) {\n    Integer value;\n    try {\n      value = Integer.parseInt(s);\n    } catch (NumberFormatException e) {\n      // Warning: null is used to denote an 'invalid value'\n      value = null;\n    }\n    return value;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore assignments to fields</b> option to ignore assignments to fields.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToMethodParameter",
          "displayName": "Assignment to method parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment to a variable that is declared as a method parameter.\nAlso reports any attempt to increment or decrement the variable.\n<p>Although occasionally intended, this construct may be confusing\n  and is therefore prohibited in some Java projects.</p>\n<p>The quick-fix adds a declaration of a new variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void printTrimmed(String s) {\n    s = s.trim();\n    System.out.println(s);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void printTrimmed(String s) {\n    String trimmed = s.trim();\n    System.out.println(trimmed);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore if assignment is a transformation of the original parameter</b> option to ignore assignments that modify\n  the parameter value based on its previous value.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentToStaticFieldFromInstanceMethod",
          "displayName": "Assignment to static field from instance context",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an assignment to a <code>static</code> field from within\nan instance method, including increments and decrements.\n<p>Although legal, such assignments are tricky to do\n  safely and are often a result of marking fields <code>static</code> inadvertently.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Counter {\n    private static int count = 0;\n\n    void increment() {\n      // Warning: updating a static field\n      // from an instance method\n      count++;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PHPDoc",
      "inspections": [
        {
          "shortName": "PhpReturnDocTypeMismatchInspection",
          "displayName": "Return type in PHPDoc comment does not match the actual return type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the return types in PHPDoc comments that do not match the actual return type of a function.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantDocCommentInspection",
          "displayName": "Redundant PHPDoc comment",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the PHPDoc comments that contain only the information already provided in declarations.\n</body>\n</html>"
        },
        {
          "shortName": "PhpInappropriateInheritDocUsageInspection",
          "displayName": "Inappropriate @inheritDoc usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports inappropriate <code>@inheritDoc</code> usages:\n  <ul>\n    <li>\n      On non-class members\n    </li>\n    <li>\n      On class members without any super members having a doc comment.\n    </li>\n  </ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocDuplicateTypeInspection",
          "displayName": "Type already exists in PHPDoc tag",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate types in PHPDoc comments.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocFieldTypeMismatchInspection",
          "displayName": "Type doesn't match property's declared type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the properties' types in PHPDoc <code>@var</code> tags that do not match the declared type of a property.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDocRedundantThrowsInspection",
          "displayName": "Redundant @throws tag(s)",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>@throws</code> tags for exceptions that are not thrown by the function/method.\n  <!-- tooltip end -->\n  <p>The exception classes added to the <b>Unchecked Exceptions</b> list under <b>Settings/Preferences | PHP | Analysis</b> are excluded from the inspection scope.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantVariableDocTypeInspection",
          "displayName": "Redundant @var tag",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>@var</code> tags for variables whose type is already inferred from source code.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDocSignatureInspection",
          "displayName": "PHPDoc comment matches function/method signature",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the parameters' names and types in a PHPDoc comment that do not match the ones in the function/method declaration.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code style issues",
      "inspections": [
        {
          "shortName": "CssMissingSemicolon",
          "displayName": "Missing semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a missing semicolon at the end of a declaration.\n</body>\n</html>"
        },
        {
          "shortName": "CssRedundantUnit",
          "displayName": "Redundant measure unit",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.css",
          "pluginVersion": "212.4746.2",
          "language": "CSS",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a measure unit of a zero value where units are not required by the specification.\n<!-- tooltip end -->\n<br/>\n<p>Example:</p>                                                                                                                                                                                                                                                                                         \n<pre><code>width: 0px</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Control flow",
      "inspections": [
        {
          "shortName": "PhpUnreachableStatementInspection",
          "displayName": "Unreachable statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the statements that cannot be reached.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpForeachVariableOverwritesAlreadyDefinedVariableInspection",
          "displayName": "'foreach' variable overwrites already defined variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the keys and values in <code>foreach</code> loops that are assigned a non-primitive value before the <code>foreach</code> loop and are accessed after it.\n\nSuch usages may unwillingly overwrite an already defined value and cause latent bugs.\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionAlwaysConstantInspection",
          "displayName": "Variable is always true/false when reached",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variables that are always <code>true</code> (or always <code>false</code>) when reached.\n</body>\n</html>"
        },
        {
          "shortName": "PhpSwitchWithCommonPartsInspection",
          "displayName": "'switch' with common parts",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the 'switch' statements with duplicated common parts.\n</body>\n</html>"
        },
        {
          "shortName": "PhpConditionAlreadyCheckedInspection",
          "displayName": "Condition always evaluates to 'true/false'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions that are already covered by earlier conditions and thus have no effect.\n</body>\n</html>"
        },
        {
          "shortName": "PhpIfWithCommonPartsInspection",
          "displayName": "'if' with common parts",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>if</code> statements with duplicated common parts.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayWriteIsNotUsedInspection",
          "displayName": "Array write access is not used",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the array write access expressions that are not used in code afterwards. The most common source of such problems is modifying an array passed via a parameter: if an array is passed by value, the change will not be visible outside the function.\n</body>\n</html>"
        },
        {
          "shortName": "PhpWriteAccessToReferencedArrayValueWithoutUnsetInspection",
          "displayName": "Write access to referenced array value without 'unset'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the write access expressions on variables that are still referencing the array value previously used in a <code>foreach</code> statement.\n<!-- tooltip end -->\n<p>\n  It is recommended to destroy such references by using <code>unset</code>.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/control-structures.foreach.php\">foreach (php.net)</a> and <a href=\"https://www.php.net/manual/en/function.unset.php\">unset (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionAlwaysNullInspection",
          "displayName": "Expression is always 'null'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports return variables which are effectively 'null'\n</body>\n</html>"
        },
        {
          "shortName": "PhpTypedPropertyMightBeUninitializedInspection",
          "displayName": "Typed property might be uninitialized",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the attempts to read from an uninitialized typed property. Such attempts will result in <code>TypeError</code>.\n<p>\n  Typed properties should be initialized in any of the following ways:\n</p>\n<ul>\n  <li>by a default value</li>\n  <li>in the constructor</li>\n  <li>by the <code>__get()</code> magic getter</li>\n  <li>in-place, at the moment of usage</li>\n</ul>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/typed_properties_v2#uninitialized_and_unset_properties\">Uninitialized and Unset Properties (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpInstanceofIsAlwaysTrueInspection",
          "displayName": "Result of 'instanceof' is always 'true'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>instanceof</code> expressions whose argument is within the hierarchy of the checked variable. Such expressions will always evaluate to <code>true</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryElseBranchInspection",
          "displayName": "Unnecessary 'else' branch",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>else</code> branches in <code>if</code> statements whose bodies always execute a terminating statement such as\n<code>return</code> or <code>throw</code>. Such branches are redundant and can be safely omitted.\n</body>\n</html>"
        },
        {
          "shortName": "PhpConditionCheckedByNextConditionInspection",
          "displayName": "Condition inside logical expression checked by subsequent condition",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions inside logical binary expressions that are are covered by subsequent conditions and are therefore redundant.\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopNeverIteratesInspection",
          "displayName": "Loop does not iterate",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the loop statements whose bodies will execute at most once.\n\n<p>\n  The inspection does not report <code>foreach</code> loops with a key or value used inside the loop body. Commonly, such loops are intended to perform an action only on their first iteration (for example, get the first element of an array).\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Properties files",
      "inspections": [
        {
          "shortName": "UnresolvedPropertyKey",
          "displayName": "Invalid property key",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java-i18n",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid arguments that are passed to methods with parameters annotated as <code>@PropertyKey</code>.\n<p>These arguments should be valid property keys in corresponding properties files.\nAlso, the inspection verifies that the <code>resourceBundle</code>\n  argument of the <code>@PropertyKey</code> annotation is an existing resource bundle.</p>\n<p>\n  Use the quick-fix to create a new property or to select an existing one.\n</p>\n<p>Example:</p>\n<pre><code>\n  @PropertyKey(resourceBundle = \"myBundle\") String value = \"invalid.key\";\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Annotations",
      "inspections": [
        {
          "shortName": "GrAnnotationReferencingUnknownIdentifiers",
          "displayName": "@TupleConstructor and @MapConstructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved identifiers in <code>@TupleConstructor</code> and <code>@MapConstructor</code>\n<code>includes</code> and <code>excludes</code> annotation attribute values.\n<p><b>Example:</b></p>\n<pre><code>\n  // unresolved 'c'\n  @TupleConstructor(includes = ['a', 'b', 'c'])\n  class X {\n      def a\n      def b\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "DelegatesTo",
          "displayName": "@DelegatesTo",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unused <code>@DelegatesTo.Target</code> annotations and unresolved <code>@DelegatedTo.target</code> annotation attribute values.\n<p><b>Example:</b></p>\n<pre><code>\n  // unused target 't1' and unresolved target 't2'\n  def m(\n      @DelegatesTo.Target('t1') target,\n      @DelegatesTo(target = 't2') Closure c\n  ) {}\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SingletonConstructor",
          "displayName": "@Singleton constructors",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports constructors of classes annotated by <b>@Singleton</b> unless it is declared non-strict.\n<p><b>Example:</b></p>\n<pre><code>\n  @Singleton\n  class Foo{\n      Foo(){\n      }\n  }\n</code></pre>\nThere are two possible quick-fixes: either to remove the constructor or to declare <b>@Singleton</b> non-strict.\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  @Singleton\n  class Foo{\n  }\n</code></pre>\n<p>or:</p>\n<pre><code>\n  @Singleton(<b>strict = false</b>)\n  class Foo{\n      Foo(){\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GrNamedVariantLabels",
          "displayName": "@NamedVariant/@NamedParam/@NamedDelegate unresolved label",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved argument labels in calls of methods annotated\nby <code>@NamedVariant</code>/<code>@NamedParam</code>/<code>@NamedDelegate</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  @groovy.transform.NamedVariant\n  def foo(a, b) {}\n\n  // unresolved label 'c'\n  foo(a: 1, b: 2, c: 3)\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Class structure",
      "inspections": [
        {
          "shortName": "MultipleTopLevelClassesInFile",
          "displayName": "Multiple top level classes in single file",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports multiple top-level classes in a single Java file.\n<p>Putting multiple\ntop-level classes in one file may be confusing and degrade the usefulness of various\n  software tools.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousInnerClass",
          "displayName": "Anonymous inner class can be replaced with inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous inner classes.\n<p>In some cases, replacing anonymous inner classes with inner classes can lead to more readable and maintainable code.\n  Also, some code standards discourage anonymous inner classes.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EmptyClass",
          "displayName": "Redundant empty class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports empty classes and Java files without any defined classes.\n<p>A class is empty if it\ndoesn't contain any fields, methods, constructors, or initializers. Empty classes often remain\n  after significant changes or refactorings.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>\n    Use the <b>Ignore if annotated by</b> option to specify special annotations. The inspection will ignore the classes marked with these\n    annotations.\n  </li>\n  <li><p>\n    Use the <b>Ignore class if it is a parametrization of a super type</b> option to ignore classes that parameterize a superclass. For example:\n  </p>\n    <pre><code>class MyList extends ArrayList&lt;String&gt; {}</code></pre>\n  </li>\n  <li>\n    Use the <b>Ignore subclasses of java.lang.Throwable</b> to ignore classes that extend <code>java.lang.Throwable</code>.\n  </li>\n  <li>\n    Use the <b>Comments count as content</b> option to ignore classes that contain comments.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "Singleton",
          "displayName": "Singleton",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports singleton classes.\n<p>Singleton classes are declared in a way that only one instance of the class can ever be instantiated. Singleton classes complicate testing,\n  and their presence may indicate a lack of object-oriented design.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Singleton {\n    private static final Singleton ourInstance = new Singleton();\n\n    private Singleton() {\n    }\n\n    public Singleton getInstance() {\n        return ourInstance;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithPublicConstructor",
          "displayName": "Utility class with 'public' constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes with <code>public</code> constructors.\n<p>Utility classes have all fields and methods declared as <code>static</code>. Creating a <code>public</code>\n  constructor in such classes is confusing and may cause accidental class instantiation.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConstantDeclaredInInterface",
          "displayName": "Constant declared in interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constants (<code>public static final</code> fields) declared in interfaces.\n<p>Some coding standards require declaring constants in abstract classes instead.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassWithoutPrivateConstructor",
          "displayName": "Utility class without 'private' constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes without <code>private</code> constructors.\n<p>Utility classes have all fields and methods declared as <code>static</code>. Creating <code>private</code>\nconstructors in utility classes prevents them from being accidentally instantiated.\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore if annotated by</b> option to specify special annotations. The inspection ignores classes marked with one of\nthese annotations.\n<p>\nUse the <b>Ignore classes with only a main method</b> option to ignore classes with no methods other than the main one.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NoopMethodInAbstractClass",
          "displayName": "No-op method in 'abstract' class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports no-op (for \"no operation\") methods in <code>abstract</code> classes.\n<p>It is usually a better\ndesign to make such methods <code>abstract</code> themselves so that classes inheriting these\n  methods provide their implementations.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  abstract class Test {\n    protected void doTest() {\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PublicConstructor",
          "displayName": "'public' constructor can be replaced with factory method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>public</code> constructors.\n<p>Some coding standards discourage the use of <code>public</code> constructors and recommend\n<code>static</code> factory methods instead.\nThis way the implementation can be swapped out without affecting the call sites.\n<p><b>Example:</b></p>\n<pre><code>\n  class Test {\n    private String name;\n\n    public Test(String name) {\n        this.name = name;\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        new Test(\"str\").test();\n    }\n  }\n</code></pre>\n<p>After quick-fix is applied:</p>\n<pre><code>\n  class Test {\n    private String name;\n\n    private Test(String name) {\n        this.name = name;\n    }\n\n    public static Test getInstance(String name) {\n        return new Test(name);\n    }\n\n    public void test() {\n        System.out.println(name);\n    }\n\n    public static void main(String[] args) {\n        getInstance(\"str\").test();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassInitializer",
          "displayName": "Non-'static' initializer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>static</code> initializers in classes.\n<p>Some coding standards prohibit instance initializers and recommend using constructors or field initializers for initialization.\n  Also, deleting the <code>static</code> keyword may accidentally create non-<code>static</code> initializers and result in obscure bugs.\n</p>\n<p>This inspection doesn't report instance initializers in anonymous classes.\n  <!-- tooltip end -->\n<p>\n  Use the <b>Only warn when the class has one or more constructors</b> option to ignore instance initializers in classes that don't have any constructors.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "FinalStaticMethod",
          "displayName": "'static' method declared 'final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports static methods that are marked as <code>final</code>.\n<p>Such code might indicate an error or an incorrect assumption about the effect of the <code>final</code> keyword.\nStatic methods are not subject to runtime polymorphism, so the only purpose of the <code>final</code> keyword used with static methods\n  is to ensure the method will not be hidden in a subclass.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "FinalPrivateMethod",
          "displayName": "'private' method declared 'final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods that are marked with both <code>final</code> and <code>private</code> keywords.\n<p>Since <code>private</code> methods cannot be meaningfully overridden because of their visibility, declaring them\n<code>final</code> is redundant.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MethodReturnAlwaysConstant",
          "displayName": "Method returns per-class constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that only return a constant, which may differ for various inheritors.\n<p>This inspection requires global code analysis. It is only available from <b>Analyze | Inspect Code</b> or\n  <b>Analyze | Run Inspection by Name</b> and doesn't report in the editor.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassOnInterface",
          "displayName": "Inner class of interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports inner classes in <code>interface</code> classes.\n<p>Some coding standards\ndiscourage the use of such classes. The inspection doesn't report enumeration and annotation classes.</p>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore inner interfaces of interfaces</b> option to ignore inner interfaces. For example:\n<pre><code>\n  interface I {\n    interface Inner {\n    }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMayBeAnnotatedFunctional",
          "displayName": "Interface may be annotated as '@FunctionalInterface'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports interfaces that can be annotated with <code>@FunctionalInterface</code> (available since JDK 1.8).\n<p>Annotating an interface with <code>@FunctionalInterface</code> indicates that the interface\n  is functional and cannot have any more <code>abstract</code> methods.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is eight or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "MarkerInterface",
          "displayName": "Marker interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports marker interfaces without any methods or fields.\n<p>Such interfaces may be confusing and typically indicate a design failure.</p>\n<p>The inspection ignores interfaces that extend two or more interfaces and interfaces\n  that specify the generic type of their superinterface.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ListenerMayUseAdapter",
          "displayName": "Class may extend adapter instead of implementing listener",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes implementing listeners instead of extending corresponding adapters.\n<p>A quick-fix is available to\n  remove any redundant empty methods left after replacing a listener implementation with an adapter extension.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Only warn when empty implementing methods are found</b> option to configure the inspection to warn even if no empty methods are found.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassWithOnlyPrivateConstructors",
          "displayName": "Class with only 'private' constructors should be declared 'final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes with only <code>private</code> constructors.\n<p>A class that only has <code>private</code> constructors cannot be extended outside a file and should be declared as <code>final</code>.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalUtilityClass",
          "displayName": "Utility class is not 'final'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes that aren't <code>final</code>.\n<p>Utility classes have all fields and methods declared as <code>static</code>.\n  Making them <code>final</code> prevents them from being accidentally subclassed.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "FieldCanBeLocal",
          "displayName": "Field can be local",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant class fields that can be replaced with local variables.\n<p>If all local usages of a field are preceded by assignments to that field, the\n  field can be removed, and its usages can be replaced with local variables.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UtilityClass",
          "displayName": "Utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes.\n<p>Utility classes have all fields and methods declared as <code>static</code> and their\n  presence may indicate a lack of object-oriented design.</p>\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore if annotated by</b> option to specify special annotations. The inspection ignores classes annotated with one of\n  these annotations.</p>\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "FinalClass",
          "displayName": "Class is closed to inheritance",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a class that is declared <code>final</code>.\n<p>Such classes can't be inherited and may indicate a lack of object-oriented design.\n  Some coding standards discourage <code>final</code> classes.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassNameDiffersFromFileName",
          "displayName": "Class name differs from file name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports top-level class names that don't match the name of a file containing them.\n<p>While the Java specification allows for naming non-<code>public</code> classes this way,\n  files with unmatched names may be confusing and decrease usefulness of various software tools.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassMayBeInterface",
          "displayName": "Abstract class may be interface",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>abstract</code> classes that can be converted to interfaces.\n<p>Using interfaces instead of classes is preferable as Java doesn't support multiple class inheritance,\n  while a class can implement multiple interfaces.</p>\n<p>A class may be converted to an interface if it has no superclasses (other\nthan Object), has only <code>public static final</code> fields,\n  <code>public abstract</code> methods, and <code>public</code> inner classes.\n<!-- tooltip end -->\n\n<p>Example:</p>\n<pre><code>\nabstract class Example {\n    public static final int MY_CONST = 42;\n    public abstract void foo();\n}\n\nclass Inheritor extends Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}\n</code></pre>\n\n<p>After the quick-fix is applied:</p>\n\n<pre><code>\ninterface Example {\n    int MY_CONST = 42;\n    void foo();\n}\n\nclass Inheritor implements Example {\n    @Override\n    public void foo() {\n        System.out.println(MY_CONST);\n    }\n}\n</code></pre>\n<p>Configure the inspection:</p>\n<p>\n  Use the <b>Report classes containing non-abstract methods when using Java 8</b> option to report only the classes with <code>static</code> methods and non-abstract methods that can be converted to\n  <code>default</code> methods (only applicable to language level of 8 or higher).\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "NonFinalFieldInEnum",
          "displayName": "Non-'final' field in 'enum'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>final</code> fields in enumeration types as they are rarely needed.\n<p><b>Example:</b></p>\n<pre><code>\n  enum Enum {\n    FIRST(\"first\"),\n    SECOND(\"second\");\n\n    public String str;\n\n    Enum(String str) {\n        this.str = str;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StaticNonFinalField",
          "displayName": "'static', non-'final' field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>final</code> <code>static</code> fields.\n<p>A quick-fix is available to add the <code>final</code> modifier to a non-<code>final</code> <code>static</code> field.</p>\n<p>This inspection doesn't check fields' mutability. For example, adding the <code>final</code> modifier to a field that has a value\n  being set somewhere will cause a compilation error.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Only report 'public' fields</b> option so that the inspection reported only <code>public</code> fields.</p>\n</body>\n</html>"
        },
        {
          "shortName": "LimitedScopeInnerClass",
          "displayName": "Local class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local classes.\n<p>A local class is a named nested class declared inside a code block.\nLocal classes are uncommon and may therefore be confusing.\n  In addition, some code standards discourage the use of local classes.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void test() {\n    class Local { // local class\n    }\n    new Local();\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ParameterCanBeLocal",
          "displayName": "Value passed as parameter never read",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant method parameters that can be replaced with local variables.\n<p>If all local usages of a parameter are preceded by assignments to that parameter, the\nparameter can be removed and its usages replaced with local variables.\nIt makes no sense to have such a parameter, as values that are passed to it are overwritten.\n  Usually, the problem appears as a result of refactoring.</p>\n<p>Example:</p>\n<pre><code>\n  void test(int p) {\n    p = 1;\n    System.out.print(p);\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void test() {\n    int p = 1;\n    System.out.print(p);\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantDeclaredInAbstractClass",
          "displayName": "Constant declared in abstract class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports constants (<code>public static final</code> fields) declared in abstract\nclasses.\n<p>Some coding standards require declaring constants in interfaces instead.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UtilityClassCanBeEnum",
          "displayName": "Utility class can be 'enum'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports utility classes that can be converted to enums.\n<p>Some coding style guidelines declare to implement utility classes as enums\n  to avoid code coverage issues in <code>private</code> constructors.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class StringUtils {\n    public static final String EMPTY = \"\";\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  enum StringUtils {\n    ;\n    public static final String EMPTY = \"\";\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "FinalMethod",
          "displayName": "Method can't be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a method that is declared <code>final</code>.\n<p>Such methods can't be overridden and may indicate a lack of object-oriented design.\n  Some coding standards discourage <code>final</code> methods.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code maturity",
      "inspections": [
        {
          "shortName": "MarkedForRemoval",
          "displayName": "Usage of API marked for removal",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated APIs (classes, fields, and methods) that are marked for removal with\n  <code>@Deprecated(<b>forRemoval</b>=true)</code>.\n<!-- tooltip end -->\n<p>\n  The code that uses an API marked for removal may cause a runtime error with a future version of the API. That is why\n  the recommended severity for this inspection is <i>Error</i>.</p>\n<p>\n  You can change the severity to <i>Warning</i> if you want to use the same code highlighting as in ordinary deprecation.</p>\n<p><small>New in 2017.3</small></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "DeprecatedIsStillUsed",
          "displayName": "Deprecated member is still used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated classes, methods, and fields that are used in your code nonetheless.\n<p>Example:</p>\n\n<pre>\n<code>\nclass MyCode {\n  @Deprecated\n  void oldMethod() {}// warning: \"Deprecated member is still used\"\n\n  void newMethod() {\n    oldMethod(); // forgotten usage\n  }\n}</code>\n</pre>\n<p>Usages within deprecated elements are ignored.</p>\n<p><b>NOTE:</b> Due to performance reasons, a non-private member is checked only when its name rarely occurs in the project.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowablePrintStackTrace",
          "displayName": "Call to 'printStackTrace()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Throwable.printStackTrace()</code> without arguments.\n<p>Such statements are often used for temporary debugging and should be either removed from the production code\n  or replaced with a more robust logging facility.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ObsoleteCollection",
          "displayName": "Use of obsolete collection type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>java.util.Vector</code>, <code>java.util.Hashtable</code> and <code>java.util.Stack</code>.\n<p>Usages of these classes can often be replaced with usages of\n<code>java.util.ArrayList</code>, <code>java.util.HashMap</code> and <code>java.util.ArrayDeque</code> respectively.\nWhile still supported,\nthe former classes were made obsolete by the JDK1.2 collection classes, and should probably\nnot be used in new development.\n<!-- tooltip end -->\n<p>\nUse the <b>Ignore obsolete collection types where they are required</b> option to ignore any cases where the obsolete collections are used\nas method arguments or assigned to a variable that requires the obsolete type.\nEnabling this option may consume significant processor resources.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ThreadDumpStack",
          "displayName": "Call to 'Thread.dumpStack()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>Thread.dumpStack()</code>.\n<p>Such statements are often used for temporary debugging and should be either removed from the production code\n  or replaced with a more robust logging facility.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SystemOutErr",
          "displayName": "Use of System.out or System.err",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>System.out</code> or <code>System.err</code>.\n<p>Such statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\n  logging facility.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CommentedOutCode",
          "displayName": "Commented out code",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the comments that contain Java code.\n<p>Usually, the code that is commented out gets outdated very quickly and becomes misleading.\nAs most of the projects use some kind of version control system,\n  it is better to delete the commented out code completely and use VCS history instead.</p>\n<!-- tooltip end -->\n<p><small>New in 2020.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "ThrowablePrintedToSystemOut",
          "displayName": "'Throwable' printed to 'System.out'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>System.out.println()</code> with an exception as an argument.\n<p>Using print statements for logging exceptions hides the stack trace from you, which can complicate the investigation of the problem.\n  It is recommended that you use logger instead.</p>\n<p>Calls to <code>System.out.print()</code>, <code>System.err.println()</code>, and <code>System.err.print()</code> with an exception argument are also\nreported. It is better to use a logger to log exceptions instead.</p>\n<!-- tooltip end -->\n<p>For example, instead of:</p>\n<pre><code>\n  try {\n      foo();\n  } catch (Exception e) {\n      System.out.println(e);\n  }\n</code></pre>\n<p>use the following code:</p>\n<pre><code>\n  try {\n      foo();\n  } catch (Exception e) {\n      logger.warn(e); // logger call may be different\n  }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "UseOfObsoleteDateTimeApi",
          "displayName": "Use of obsolete date-time API",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>java.util.Date</code>, <code>java.util.Calendar</code>, <code>java.util.GregorianCalendar</code>, <code>java.util.TimeZone</code>,\nand <code>java.util.SimpleTimeZone</code>.\n<p>While still supported, these classes were made obsolete by the JDK8 Date-Time API and should probably\n  not be used in new development.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Deprecation",
          "displayName": "Deprecated API usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of deprecated APIs (classes, fields, and methods), for example: <code>new Thread().stop();</code>.\n<p>By default, the inspection doesn't produce a warning if it's impossible or hard to avoid it.  For example,\n  the following code won't be reported:</p>\n<pre><code>\n  abstract class A { //library code\n     @Deprecated\n     abstract void m();\n  }\n  class B extends A { //project code\n     @Override\n     void m() {\n        //doSmth;\n     }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the inspection's options to disable this inspection inside deprecated members,\n  overrides of abstract deprecated methods, non-static import statements, methods of deprecated classes, or same top-level classes.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuppressionAnnotation",
          "displayName": "Inspection suppression annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports comments or annotations suppressing inspections.\n<p>This inspection can be useful when leaving suppressions intentionally for further review.</p>\n<p><b>Example:</b></p>\n<pre><code>\n    @SuppressWarnings(\"unused\")\n    static Stream&lt;String&gt; stringProvider() {\n        return Stream.of(\"foo\", \"bar\");\n    }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Naming conventions",
      "inspections": [
        {
          "shortName": "FieldNamingConvention",
          "displayName": "Field naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p><b>Example:</b> if the inspection is enabled for constants, and the minimum specified length for a field name is 5 (the default), the following constant\n  produces a warning because the length of its name is 3, which is less than 5:  <code>public static final int MAX = 42;</code>.</p>\n<p>A quick-fix that renames such fields is available only in the editor.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the list in the <b>Options</b> section to specify which fields should be checked. Deselect the checkboxes for the fields for which\nyou want to skip the check.</p>\n<p>For each field type, specify the minimum length, maximum length, and the regular expression expected for field names using the\n  provided input fields.\n  Specify <b>0</b> in the length fields to skip the corresponding checks.</p>\n<p>Regular expressions should be specified in the standard\n  <code>java.util.regex</code> format.</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "JavaModuleNaming",
          "displayName": "Java module name contradicts the convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when a module name contradicts Java Platform Module System recommendations.</p>\n<p>One of the <a href=\"http://mail.openjdk.java.net/pipermail/jpms-spec-experts/2017-March/000659.html\">recommendations</a>\n  is to avoid using digits at the end of module names.</p>\n<p><b>Example:</b></p>\n<pre><code>\nmodule foo1.bar2 {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableNamingConvention",
          "displayName": "Local variable naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p><b>Example:</b> <code>int X = 42;</code>\n  should be reported if the inspection is enabled with the default settings in which a variable name should start with a lowercase letter.</p>\n\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\nUse the fields in the <b>Options</b> section to specify the minimum length, maximum length, and a regular expression expected for local variable names.\nSpecify <b>0</b> in order not to check the length of names. Regular expressions should be specified in the standard <b>java.util.regex</b> format.\n<p>Use checkboxes to ignore <code>for</code>-loop and <code>catch</code> section parameters.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PackageNamingConvention",
          "displayName": "Package naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports packages whose names are either too short, too long, or do not follow the specified regular expression pattern.\n<p><b>Example:</b></p>\n<pre><code>\n  package io;\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the options to specify the minimum and maximum length of the package name\n  as well as a regular expression that matches valid package names\n  (regular expressions are in standard <code>java.util.regex</code> format).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterNamingConvention",
          "displayName": "Lambda parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p><b>Example:</b> <code>Function&lt;String, String&gt; id = X -&gt; X;</code> \n  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.</p>\n<!-- tooltip end -->\n<p>\n<p>Configure the inspection:</p>\nUse the fields in the <b>Options</b> section to specify the minimum length, maximum length, and a regular expression expected for lambda parameter names.\n  Specify <b>0</b> in order not to check the length of names.</p>\n<p>Regular expressions should be specified in the standard <code>java.util.regex</code> format.</p>\n<!--<p><small>New in 15</small></p>-->\n</body>\n</html>"
        },
        {
          "shortName": "QuestionableName",
          "displayName": "Questionable name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports variables, methods, or classes with questionable, not really descriptive names.\nSuch names do not help to understand the code, and most probably were created as a temporary thing but were forgotten afterwards.\n<p><b>Example:</b></p>\n<pre><code>\n  int aa = 42;\n</code></pre>\n<p>Rename quick-fix is suggested only in the editor.</p>\n<!-- tooltip end -->\n<p>\n  Use the option to list names that should be reported.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ParameterNamingConvention",
          "displayName": "Method parameter naming convention",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters whose names are too short, too long, or do not follow\nthe specified regular expression pattern.\n<p><b>Example:</b> <code>void fooBar(int X)</code>\n  should be reported if the inspection is enabled with the default settings in which a parameter name should start with a lowercase letter.</p>\n\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\n  Use the fields in the <b>Options</b> section to specify the minimum length, maximum length, and a regular expression expected for\n  method parameter names. Specify <b>0</b> in order not to check the length of names.</p>\n<p>Regular expressions should be specified in the standard <code>java.util.regex</code> format.</p>\n</body>\n</html>"
        },
        {
          "shortName": "ParameterNameDiffersFromOverriddenParameter",
          "displayName": "Parameter name differs from parameter in overridden method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports parameters whose names differ from the corresponding\nparameters of the methods they override. While legal in Java, such inconsistent names may be confusing\nand decrease the documentation benefits of good naming practices.\n<p><b>Example:</b></p>\n<pre><code>\n  class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String name) { super(name); }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Person {\n    Person(String fullName) {}\n  }\n  class Child extends Person {\n    Child(String fullName) { super(fullName); }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the options to indicate whether to ignore overridden parameter names that are only\n  a single character long or come from a library method. Both can be useful if\n  you do not wish to be bound by dubious naming conventions used in libraries.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "StandardVariableNames",
          "displayName": "Standard variable names",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports variables with 'standard' names that do not correspond to their types.\nSuch names may be confusing. There are the following standard names for specific types:\n<ul>\n  <li>i, j, k, m, n - <code>int</code></li>\n  <li>f - <code>float</code></li>\n  <li>d - <code>double</code></li>\n  <li>b - <code>byte</code></li>\n  <li>c, ch - <code>char</code></li>\n  <li>l - <code>long</code></li>\n  <li>s, str - <code>String</code></li>\n</ul>\n<p>Rename quick-fix is suggested only in the editor.</p>\n<!-- tooltip end -->\n<p>\n  Use the option to ignore parameter names which are identical to the parameter name from a direct super method.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "DollarSignInName",
          "displayName": "Use of '$' in identifier",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports variables, methods, and classes with dollar signs (<code>$</code>) in their names. While\nsuch names are legal Java, their use outside of generated java code is strongly discouraged.\n<p><b>Example:</b></p>\n<pre><code>\n  class SalaryIn${}\n</code></pre>\n<p>Rename quick-fix is suggested only in the editor.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UpperCaseFieldNameNotConstant",
          "displayName": "Non-constant field with upper-case name",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-<code>static</code> non-<code>final</code>\nfields whose names are all in upper case.\n<p>Such fields may cause confusion by breaking a common naming convention and\n  are often used by mistake.</p>\n<p><b>Example:</b> <pre><code>\n  public static int THE_ANSWER = 42; //a warning here: final modifier is missing\n</code></pre>\n<p>A quick-fix that renames such fields is available only in the editor.</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Cast",
      "inspections": [
        {
          "shortName": "CastThatLosesPrecision",
          "displayName": "Numeric cast that loses precision",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports cast operations between primitive numeric types that may\nresult in precision loss.\n<p>Such casts are not necessarily a problem but may result in difficult to\n  trace bugs if the loss of precision is unexpected.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  int a = 420;\n  byte b = (byte) a;\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore casts from int to char</b> option to ignore casts from <code>int</code> to <code>char</code>.\n  This type of cast is often used when implementing I/O operations because the <code>read()</code> method of the\n  <code>java.io.Reader</code> class returns an <code>int</code>.</p>\n<p>Use the <b>Ignore casts from int 128-255 to byte </b> option to ignore casts of constant values (128-255) from <code>int</code> to\n  <code>byte</code>.\n  Such values will overflow to negative numbers that still fit inside a byte.</p>\n</body>\n</html>"
        },
        {
          "shortName": "DoubleLiteralMayBeFloatLiteral",
          "displayName": "Cast to 'float' can be 'float' literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>double</code> literal expressions that are immediately cast to <code>float</code>.\n<p>Such literal expressions can be replaced with equivalent <code>float</code> literals.</p>\n<p><b>Example:</b></p>\n<pre><code>float f = (float)1.1;</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>float f = 1.1f;</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryExplicitNumericCast",
          "displayName": "Unnecessary explicit numeric cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports primitive numeric casts that would be inserted implicitly by the compiler.\nAlso, reports any primitive numeric casts that the compiler will remove.\n<p><b>Example:</b></p>\n<pre><code>int x = (short)5; // The cast will be removed by the javac tool</code></pre>\n<p>After the quick-fix is applied:</p>\n<code>int x = 5;</code>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "IntegerMultiplicationImplicitCastToLong",
          "displayName": "Integer multiplication or shift implicitly cast to long",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports integer multiplications or left shifts that are implicitly cast to long.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void f(int i) {\n    long val = 65536 * i;\n  }\n</code></pre>\n<p>After the quick-fix is applied, the code changes to:</p>\n<pre><code>\n  void x(int i) {\n    long val = 65536<b>L</b> * i;\n  }\n</code></pre>\n<p><b>Example:</b></p>\n<pre><code>\n  void f(int i) {\n    long value = i &lt;&lt; 24;\n  }\n</code></pre>\n<p>After the quick-fix is applied, the code changes to:</p>\n<pre><code>\n  void f(int i) {\n    long value = (long) i &lt;&lt; 24;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Such multiplications are often a mistake, as overflow truncation may occur unexpectedly.\n  Converting an <code>int</code> literal to a <code>long</code> literal (<code>65536<b>L</b></code>) fixes the problem.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IntLiteralMayBeLongLiteral",
          "displayName": "Cast to 'long' can be 'long' literal",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>int</code> literal expressions that are immediately cast to <code>long</code>.\n<p>Such literal expressions can be replaced with equivalent <code>long</code> literals.</p>\n<p><b>Example:</b></p>\n<pre><code>Long l = (long)42;</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>Long l = 42L;</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 14",
      "inspections": [
        {
          "shortName": "EnhancedSwitchBackwardMigration",
          "displayName": "Enhanced 'switch'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports enhanced <code>switch</code> statements and expressions. Suggests replacing them with regular <code>switch</code>\nstatements.\n<p><b>Example:</b></p>\n<pre><code>\n  boolean even = switch (condition) {\n    case 1, 3, 5, 7, 9 -> false;\n    default -> true;\n  };\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  boolean even;\n  switch (condition) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 9:\n      even = false;\n      break;\n    default:\n      even = true;\n      break;\n}\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnhancedSwitchMigration",
          "displayName": "Statement can be replaced with enhanced 'switch'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>switch</code> statements that can be automatically replaced with enhanced <code>switch</code> statements or expressions.\n<p><b>Example:</b></p>\n<pre><code>\n  double getPrice(String fruit) {\n    // Switch statement can be replaced with enhanced 'switch'\n    switch (fruit) {\n      case \"Apple\":\n        return 1.0;\n      case \"Orange\":\n        return 1.5;\n      case \"Mango\":\n        return 2.0;\n      default:\n        throw new IllegalArgumentException();\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  double getPrice(String fruit) {\n    return switch (fruit) {\n      case \"Apple\" -> 1.0;\n      case \"Orange\" -> 1.5;\n      case \"Mango\" -> 2.0;\n      default -> throw new IllegalArgumentException();\n    };\n  }\n  </code></pre>\n<!-- tooltip end -->\n<p>This inspection only applies to language level 14 or higher</p>\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Abstraction issues",
      "inspections": [
        {
          "shortName": "DeclareCollectionAsInterface",
          "displayName": "Collection declared by class, not interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of <code>Collection</code> variables made by using the collection class as a type,\nrather than an appropriate interface. The warning is not issued if weakening the variable type \nwill cause a compilation error.\n<p>Example:</p>\n<pre><code>\n  // Warning: concrete collection class ArrayList used.\n  int getTotalLength(ArrayList&lt;String&gt; list) {\n    return list.stream().mapToInt(String::length).sum();\n  }\n\n  // No warning, as trimToSize() method is not\n  // available in the List interface\n  void addData(ArrayList&lt;String&gt; data) {\n    data.add(\"Hello\");\n    data.add(\"World\");\n    data.trimToSize();\n  }\n</code></pre>\nA quick-fix is suggested to use the appropriate collection interface (e.g. <code>Collection</code>, <code>Set</code>, or <code>List</code>).\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassReferencesSubclass",
          "displayName": "Class references one of its subclasses",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes which contain references to one of their subclasses.\nSuch references may be confusing and violate several rules of object-oriented design.\n<p>Example:</p>\n<pre>\n  class Entity {\n    // Warning: the class references its subclass\n    void compare(SimpleEntity entity) {\n      ...    \n    }\n  }\n  class SimpleEntity extends Entity {\n    ...\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OptionalUsedAsFieldOrParameterType",
          "displayName": "'Optional' used as field or parameter type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any cases in which <code>java.util.Optional&lt;T&gt;</code>, <code>java.util.OptionalDouble</code>, <code>java.util.OptionalInt</code>,\n<code>java.util.OptionalLong</code>, or <code>com.google.common.base.Optional</code> are used as types for fields or parameters.\n<p><code>Optional</code> was designed to provide a limited mechanism for library method return types in which a clear way to represent \"no result\"\n  was needed.</p>\n<p>Using a field with the <code>java.util.Optional</code> type is also problematic if the class needs to be\n  <code>Serializable</code>, as <code>java.util.Optional</code> is not serializable.</p>\n<p>Example:</p>\n<pre><code>\n  class MyClass {\n    Optional&lt;String&gt; name; // Optional field\n\n    // Optional parameter\n    void setName(Optional&lt;String&gt; name) {\n      this.name = name;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "UseOfConcreteClass",
          "displayName": "Use of concrete class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports uses of concrete classes, rather than interfaces.\nSuch declarations may represent a failure of abstraction, and may make testing more difficult.\n<p>\nDeclarations whose classes come from system or third-party libraries will not be reported by this inspection.\nCasts, instanceofs, and local variables are not reported in <code>equals()</code> method implementations.\nAlso, casts are not reported in <code>clone()</code> method implementations.\n</p>\n<p>Example:</p>\n<pre><code>\n  interface Entity {}\n  class EntityImpl implements Entity {}\n\n  void processObject(Object obj) {\n    // warning: instanceof of the concrete class\n    if (obj instanceof EntityImpl) {\n      // warning: cast to the concrete class,\n      // rather than the interface\n      processEntity((EntityImpl)obj);\n    }\n  }\n  // warning: parameter of concrete class\n  void processEntity(EntityImpl obj) {\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the first checkbox below to ignore casts to abstract classes.</p>\n<p>\n  Use the subsequent checkboxes to control contexts where the problem is reported.</p>\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofChain",
          "displayName": "Chain of 'instanceof' checks",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any chains of <code>if</code>-<code>else</code> statements all of whose conditions are <code>instanceof</code> expressions\nor class equality expressions (e.g. comparison with <code>String.class</code>).\nSuch constructions usually indicate a failure in object-oriented design which\ndictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains\nof type tests.\n<p>Example:</p>\n<pre><code>\n  double getArea(Shape shape) {\n    // Warning: abstraction failure.\n    // It would be better to declare a getArea()\n    // abstract method in the shape interface\n    // and implement it in every inheritor.\n    if (shape instanceof Point) {\n      return 0;\n    }\n    if (shape instanceof Circle) {\n      return Math.PI *\n        Math.pow(((Circle) shape).radius(), 2);\n    }\n    if (shape instanceof Rectangle) {\n      return ((Rectangle) shape).width() *\n        ((Rectangle) shape).height();\n    }\n    throw new IllegalArgumentException();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the checkbox below to ignore <code>instanceof</code> expressions on library classes.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InterfaceMethodClashesWithObject",
          "displayName": "Interface method clashes with method in 'java.lang.Object'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the interface methods that clash with the <code>clone()</code> and <code>finalize()</code> methods with the <code>protected</code>\n  access modifier in <code>java.lang.Object</code>.\n<p>In an interface, it is possible to declare these methods with a return type that is incompatible with <code>java.lang.Object</code> methods.\nThis allows creating a class that implements such an interface.\n  When the interface is functional, it is possible to create a lambda from it, but the code might still be confusing.</p>\n<p>Example:</p>\n<pre><code>\n  // Warning: this interface cannot be implemented\n  // by any class,only by a lambda or method reference\n  interface MyInterface {\n    double clone();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "BooleanParameter",
          "displayName": "'public' method with 'boolean' parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports public methods that accept a <code>boolean</code> parameter.\n<p>It's almost always bad practice to add a <code>boolean</code> parameter to a public method (part of an API) if that method is not a setter.\nWhen reading code using such a method, it can be difficult to decipher what the <code>boolean</code> stands for without looking at\nthe source or documentation.</p>\n<p>This problem is also known as <a href=\"https://ariya.io/2011/08/hall-of-api-shame-boolean-trap\">the boolean trap</a>.\n  The <code>boolean</code> parameter can often be replaced with an <code>enum</code>.</p>\n<p>Example:</p>\n<pre><code>\n  // Warning: it's hard to understand what the\n  // boolean parameters mean when looking at\n  // a call to this method\n  public boolean setPermission(File f,\n                               int access,\n                               boolean enable,\n                               boolean ownerOnly) {\n    // ...\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\nUse the <b>Only report methods with multiple boolean parameters</b> option to warn only when a method contains more than one boolean parameter.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "FeatureEnvy",
          "displayName": "Feature envy",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <em>Feature Envy</em> code smell. The warning is thrown when a method calls methods on another class three\nor more times. Calls to library classes, parent classes, contained or containing\nclasses are not counted by this inspection. Feature\nenvy is often an indication of the fact that this functionality is located in a wrong class.\n<p>Example:</p>\n<pre><code>\n  class JobManager {\n    // Warning: this method calls three methods\n    // of the Job class\n    // It would be better to move this chain of\n    // calls to the Job class itself.\n    void performJob(Job job) {\n      job.beforeStart();\n      job.process();\n      job.afterProcessing();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MethodOnlyUsedFromInnerClass",
          "displayName": "Private method only used from inner class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>private</code> methods which\nare only called from an inner class of the class containing the method. Such\nmethods can be safely moved into that inner class.\n<p>Example:</p>\n<pre>\npublic class Outer {\n  public static void main(String[] args) {\n    new Inner().run(args[0]);\n  }\n\n  static class Inner {\n    void run(String arg) {\n      // Method isEmpty() is used from Inner class only\n      // consider moving it to the Inner class\n      if (!isEmpty(arg)) {\n        System.out.println(\"Argument is supplied\");\n      }\n    }\n  }\n\n  private static boolean isEmpty(String s) {\n    return s != null && s.trim().isEmpty();\n  }\n}\n</pre>\n<!-- tooltip end -->\n<p>\nUse the first checkbox below to ignore <code>private</code>\nmethods which are called from an anonymous or local class.\n<p>\nUse the third checkbox to only report <code>static</code> methods.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MagicNumber",
          "displayName": "Magic number",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports \"magic numbers\", which are numeric literals used without being named by a constant declaration.\nMagic numbers can result in code whose intention is unclear, and may result in errors if a magic\nnumber is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,\n0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.\n<p>Example:</p>\n<pre><code>\n  void checkFileSize(long bytes) {\n    if (bytes > 1_048_576) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }\n</code></pre>\n<p>A quick-fix is suggested to introduce a new constant:</p>\n<pre><code>\n  static final int MAX_SUPPORTED_FILE_SIZE = 1_048_576;\n\n  void checkFileSize(long bytes) {\n    if (bytes > MAX_SUPPORTED_FILE_SIZE) {\n      throw new IllegalArgumentException(\"too big\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the first checkbox below to disable this inspection within <code>hashCode()</code> methods.\n<p>\n  Use the second checkbox below to ignore magic numbers in annotations.\n<p>\n  Use the third checkbox below to ignore magic numbers used as initial capacity when constructing\n  <code>Collection</code>, <code>Map</code>,\n  <code>StringBuilder</code> or <code>StringBuffer</code> objects.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstanceofThis",
          "displayName": "'instanceof' check for 'this'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>instanceof</code> or <code>getClass() == SomeClass.class</code> in which a\n<code>this</code> expression is checked.\n<p>Such expressions indicate a failure of the object-oriented design, and should be replaced by\n  polymorphic constructions.</p>\n<p>Example:</p>\n<pre><code>\nclass Super {\n  void process() {\n    if (this instanceof Sub) { // warning\n      doSomething();\n    } else {\n      doSomethingElse();\n    }\n  }\n}\n  \nclass Sub extends Super {}\n</code></pre>\n<p>To fix the problem, use an overriding method:</p>\n<pre><code>\nclass Super {\n  void process() {\n    doSomethingElse();\n  }\n}\n  \nclass Sub extends Super {\n  @Override\n  void process() {\n    doSomething();\n  }\n}  \n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OverlyStrongTypeCast",
          "displayName": "Overly strong type cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports type casts that are overly strong. For instance,\ncasting an object to <code>ArrayList</code> when casting it to\n<code>List</code> would do just as well.\n<p>\n  <b>Note:</b> much like the <i>Redundant type cast</i>\n  inspection, applying the fix for this inspection may change the semantics of your program if you are\n  intentionally using an overly strong cast to cause a <code>ClassCastException</code> to be generated.\n</p>\n<p>Example:</p>\n<pre>\n  interface Super {\n    void doSmth();\n  }\n  interface Sub extends Super { }\n\n  void use(Object obj) {\n    // Warning: ((Super)obj).doSmth() could be used\n    ((Sub)obj).doSmth();\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Use the checkbox below to ignore casts when there's a matching <code>instanceof</code> check in the code.\n</body>\n</html>"
        },
        {
          "shortName": "StaticMethodOnlyUsedInOneClass",
          "displayName": "Static member only used from one other class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": true,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> methods and fields that\nare only used from a class other than the containing class. Such members could be moved into the using class.\nFactory methods and members accessed from an anonymous class inside the member's class are ignored by this inspection.\nConvenience overloads, which call a method with the same name in the same class but have fewer parameters, are also ignored.\n<!-- tooltip end -->\n<p>\nUse the first checkbox to supress this inspection when the static member is only used from a test class.\n<p>\nUse the second checkbox below to ignore member usages from inside anonymous, local, or non-static inner classes.\n<p>\nUse the third checkbox below to not warn on members that cannot be moved without problems,\n  for example, because a method with an identical signature is already present in the target class,\n  or because a field or a method used inside the method will not be accessible when this method is moved.\n<p>\nUse the fourth checkbox to ignore members located in utility classes.\n</body>\n</html>"
        },
        {
          "shortName": "TypeMayBeWeakened",
          "displayName": "Type may be weakened",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports variable and method return types that can be changed to a more abstract (weaker) type.\nThis allows making the code more abstract, hence more reusable.\n<p>Example:</p>\n<pre>\n  // Type of parameter can be weakened to java.util.List\n  void processList(ArrayList&lt;String&gt; list) {\n    if (list.isEmpty()) return;\n    System.out.println(\"Processing\");\n    for (String s : list) {\n      System.out.println(\"String: \" + s);\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  Enable the <b>Use righthand type</b> checkbox below\n  to prevent weakening the left side of assignments when the right side is not\n  a type cast or a new expression. When storing the result of a method call in a variable, it is\n  useful to retain the type of the method call result instead of unnecessarily weakening it.\n</p>\n<p>\n  Enable the <b>Use parameterized type</b> checkbox below\n  to use the parameterized type of the collection as the weakest type when\n  the object evaluated is used as an argument to a collection method with a parameter type of\n  <code>java.lang.Object</code>.\n  Use this option to prevent weakening to <code>Object</code> when passing an object to the  following collection methods:\n  <code>get()</code>, <code>remove()</code>,\n  <code>contains()</code>, <code>indexOf()</code>,\n  <code>lastIndexOf()</code>, <code>containsKey()</code> and <code>containsValue()</code>.\n</p>\n<p>\n  Enable the <b>Do not weaken to Object</b> checkbox below\n  to specify whether a type should be weakened to <code>java.lang.Object</code>.\n  Weakening to <code>java.lang.Object</code> is rarely very useful.\n</p>\n<p>\n  Enable the <b>Only weaken to an interface</b> checkbox below\n  to only report a problem when the type can be weakened to an interface type.\n</p>\n<p>\n  Enable the <b>Do not weaken return type</b> checkbox below\n  to prevent reporting a problem when the return type may be weakened.\n  Only variables will be analyzed.\n</p>\n<p>\n  Enable the <b>Do not suggest weakening variable declared as 'var'</b> checkbox below\n  to prevent reporting on local variables declared using the 'var' keyword (Java 10+)\n</p>\n<p>\n<b>Stop classes</b> are intended to prevent weakening to classes\nlower than stop classes, even if it is possible.\nIn some cases, this may improve readability.\n</body>\n</html>\n"
        },
        {
          "shortName": "PublicMethodNotExposedInInterface",
          "displayName": "'public' method not exposed in interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>public</code> methods in classes\nwhich are not exposed in an interface.\n<p>Exposing all <code>public</code> methods via an interface is important for\n  maintaining loose coupling, and may be necessary for certain component-based programming styles.</p>\n<p>Example:</p>\n<pre><code>\ninterface Person {\n  String getName();\n}\n\nclass PersonImpl implements Person {\n  private String name;\n\n  // ok: method is exposed in interface\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  // warning: method is public\n  // but not exposed in interface\n  public void setName() {\n    this.name = name;\n  }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore if annotated by</b> list to specify special annotations. Methods annotated with one of\nthese annotations will be ignored by this inspection.\n<p>\n  Use the <b>Ignore if the containing class does not implement a non-library interface</b> option to ignore methods from classes which do not\nimplement any interface from the project.\n<p>\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java language level migration aids",
      "inspections": [
        {
          "shortName": "Since15",
          "displayName": "Usages of API which isn't available at the configured language level",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the API that is unavailable at the configured language level.\n<p>API availability is defined\nby the version specified in the <code>@since</code> tag in the documentation. This may be useful because\n  the language level can differ from your project SDK, and there may be no such API in the JDK that is used to run the code.</p>\n<!-- tooltip end -->\n<p>\n  Use the <b>Forbid API usages</b> option to forbid usages of the API in respect to the project or custom language level.\n</p>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "UseCompareMethod",
          "displayName": "'compare()' method can be used to compare numbers",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports cases where the static <code>Integer.compare()</code> method or similar methods can be used\ninstead of more verbose or less efficient constructs.\n<p>If <code>x</code> and <code>y</code> are already boxed integers, then <code>x.compareTo(y)</code> is suggested.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public int compare(int x, int y) {\n    return x > y ? 1 : x &lt; y ? -1 : 0;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  public int compare(int x, int y) {\n    return Integer.compare(x, y);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  The <code>Double.compare()</code> and <code>Float.compare()</code> methods were introduced in Java 1.4. Methods for other primitive types\n  are available since Java 1.7.\n</p>\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EnumerationCanBeIteration",
          "displayName": "Enumeration can be iteration",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>Enumeration</code> methods that are used on collections and may be replaced with equivalent\n<code>Iterator</code> constructs.\n<p><b>Example:</b></p>\n<pre><code>Enumeration&lt;String&gt; keys = map.keys();\n  while (keys.hasMoreElements()) {\n    String name = keys.nextElement();\n  }</code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>Iterator&lt;String&gt; iterator = map.keySet().iterator();\n  while (iterator.hasNext()) {\n    String name = iterator.next();\n  }</code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IfCanBeSwitch",
          "displayName": "'if' can be replaced with 'switch'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> statements that can be replaced with <code>switch</code> statements.\n<p>The replacement result is usually shorter and clearer.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void test(String str) {\n    if (str.equals(\"1\")) {\n      System.out.println(1);\n    } else if (str.equals(\"2\")) {\n      System.out.println(2);\n    } else if (str.equals(\"3\")) {\n      System.out.println(3);\n    } else {\n      System.out.println(4);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void test(String str) {\n    switch (str) {\n      case \"1\" -&gt; System.out.println(1);\n      case \"2\" -&gt; System.out.println(2);\n      case \"3\" -&gt; System.out.println(3);\n      default -&gt; System.out.println(4);\n    }\n  }\n  </code></pre>\n<!-- tooltip end -->\n<p>The inspection is applicable if the language level of a project or module is seven or higher.</p>\n<p>Use the <b>Minimum number of 'if' condition branches</b> field to specify the minimum number of <code>if</code> condition branches\n  for an <code>if</code> statement to have to be reported. Note that the terminal <code>else</code> branch (without <code>if</code>) is not counted.</p>\n<p>\nUse the <b>Suggest switch on numbers</b> option to enable the suggestion of <code>switch</code> statements on\nprimitive and boxed numbers and characters.\n<p>\nUse the <b>Suggest switch on enums</b> option to enable the suggestion of <code>switch</code> statements on\n<code>enum</code> constants.\n<p>\n  Use the <b>Only suggest on null-safe expressions</b> option to suggest <code>switch</code> statements that can't introduce a <code>NullPointerException</code> only.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "PostgreSQL",
      "inspections": [
        {
          "shortName": "PgSelectFromProcedureInspection",
          "displayName": "Postgres: Select from procedure call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "SQL",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example,\n  <code>AS t1(s VARCHAR)</code>).\n  <p>This requirement does not apply to scalar functions.</p>\n<p>Example (PostgreSQL):</p>\n<pre><code>CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;</code></pre>\n<p>The <code>AS s (c1 INT)</code> has a typed alias, while <code>AS s (c1)</code> and <code>AS t1</code> do not.\n  In this case, the second call of <code>produce_a_table()</code> and <code>DBLINK()</code> will be highlighted.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Declaration redundancy",
      "inspections": [
        {
          "shortName": "GroovyUnusedDeclaration",
          "displayName": "Unused declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unused classes, methods and fields.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Department {\n      private Organization myOrganization;\n  }\n</code></pre>\n<p>Here <code>Department</code> explicitly references <code>Organization</code> but if <code>Department</code> class itself is unused,\nthen inspection would report both classes. \n\n<p>\nThe inspection also reports parameters which are not used by their methods and all method implementations/overriders, as well as local\nvariables which are declared but not used.\n</p>\n<!-- tooltip end -->\n<p>For more info see the same inspection in Java.</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Code style",
      "inspections": [
        {
          "shortName": "PhpMethodMayBeStaticInspection",
          "displayName": "Method may be 'static'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the methods that don't use any instance references and thus may be converted to static methods.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMethodOrClassCallIsNotCaseSensitiveInspection",
          "displayName": "Case mismatch in method call or class usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of functions, methods, classes, and namespaces that do not match the case used in their declarations.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryFullyQualifiedNameInspection",
          "displayName": "Unnecessary fully qualified name",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of fully qualified class names, which can be shortened without adding the <code>use</code> statement.\n</body>\n</html>"
        },
        {
          "shortName": "PhpStatementWithoutBracesInspection",
          "displayName": "Control statement body without braces",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the control structures (such as loops or conditionals) whose bodies are not enclosed in braces.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.control-structures.php\">Control structures (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstructorStyleInspection",
          "displayName": "Old style constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports old-style constructor declarations (<code>ClassName()</code>) and suggests replacing them with new-style constructors (<code>__construct()</code>).\n<!-- tooltip end -->\n<p>\n  Prior to PHP 8.0, old-style constructor syntax used in the classes in the global namespace is treated as deprecated and will result in an <code>E_DEPRECATED</code> error. If both a <code>__construct()</code> and a <code>ClassName()</code> method are defined, <code>__construct()</code> will be called.\n</p>\n<p>In namespaced classes, or any classes as of PHP 8.0, a <code>ClassName()</code> method never has any special meaning and will never be called as a constructor. As a result, the inspection does not report such cases if the PHP language level is set to 8.0 or later.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.oop5.decon.php\">Constructors and destructors (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpMatchExpressionCanBeReplacedWithTernaryInspection",
          "displayName": "'match' expression can be replace with ternary expression",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>match</code> expressions containing a default arm and a single non-default arm. Such <code>match</code> expressions can be replaced with ternary expressions.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryLeadingBackslashInUseStatementInspection",
          "displayName": "Unnecessary leading '\\' in 'use' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>use</code> statements with an unnecessary leading <code>\\</code>.\n<p>\n  For namespaced names (fully qualified namespace names containing a namespace separator, such as <code>Foo\\Bar</code> as opposed to global names that do not, such as <code>FooBar</code>), the leading backslash is unnecessary and not recommended, as import names must be fully qualified and are not processed relative to the current namespace.\n</p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.namespaces.importing.php\">Using namespaces: Aliasing/Importing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpIssetCanBeReplacedWithCoalesceInspection",
          "displayName": "'isset' can be replaced with coalesce",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions using <code>isset</code> that can be safely replaced with expressions using the <code>??</code> null coalesce operator.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/isset_ternary\">Null coalesce operator (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpExpressionWithoutClarifyingParenthesesInspection",
          "displayName": "Expression without clarifying parentheses",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports potentially ambiguous expressions and proposes enclosing them in clarifying parentheses.\n</body>\n</html>"
        },
        {
          "shortName": "PhpCastIsUnnecessaryInspection",
          "displayName": "Type cast is unnecessary",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the type cast operators used on the values that are already of the corresponding type. Such operators are redundant and can be safely removed.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.types.type-juggling.php\">Type juggling (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpPluralMixedCanBeReplacedWithArrayInspection",
          "displayName": "'mixed' type can be replaced with 'array'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>mixed[]</code> usages in PHPDoc blocks that can be safely replaced with <code>array</code>.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraitUseRuleInsideDifferentClassUseListInspection",
          "displayName": "Trait use rule resolved to method with different containing class ",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the trait method <code>use</code> rules that are resolved to methods from a different containing class rather than the one specified in the <code>use</code> declaration.\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayMapCanBeConvertedToLoopInspection",
          "displayName": "'array_map' call can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_map</code> calls that can be replaced with <code>foreach</code> loops.\n</body>\n</html>"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayFilterInspection",
          "displayName": "Loop can be converted to 'array_filter' call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> loops that can be replaced with <code>array_filter</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpGetClassCanBeReplacedWithClassNameLiteralInspection",
          "displayName": "'get_class' can be replaced with '::class'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>get_class</code> calls and suggests replacing them with <code>::class</code> when PHP Language level is set to 8.0 or later.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/class_name_literal_on_object\">Allow ::class on objects (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpSingleStatementWithBracesInspection",
          "displayName": "Single-statement body with braces",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the control structures (such as loops or conditionals) whose bodies are enclosed in braces but only contain a single child statement. Using braces in such cases is not necessary.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.control-structures.php\">Control structures (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMultipleClassesDeclarationsInOneFile",
          "displayName": "Multiple classes declarations in one file",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple class declarations in a single file, which violates the PSR-0/PSR-4 standards.\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-4/\">PSR-0/PSR-4 standards (php-fig.org)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpSwitchCanBeReplacedWithMatchExpressionInspection",
          "displayName": "'switch' can be replaced with 'match' expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports 'switch' statements that could be replaced with 'match' expression\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryDoubleQuotesInspection",
          "displayName": "Unnecessary double quotes",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports double-quoted string literals that do not contain string interpolation, escape sequences, or single quotes.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantClosingTagInspection",
          "displayName": "Redundant closing tag",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports PHP closing tag <code>?&gt;</code> usages, which are redundant in files containing only PHP code.\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryCurlyVarSyntaxInspection",
          "displayName": "Unnecessary curly braces syntax for variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary <code>{</code> and <code>}</code> used for interpolating variables in string literals.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.types.string.php#language.types.string.parsing\">Variable parsing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpStrFunctionsInspection",
          "displayName": "'str*' calls can be replaced with PHP 8 'str_*' calls",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>strpos</code> and <code>substr</code> functions calls that can be replaced with the <code>str_*</code> functions calls (introduced in PHP 8.0).\n<p>\n  See <a href=\"https://wiki.php.net/rfc/str_contains\">str_contains (php.net)</a> and <a href=\"https://wiki.php.net/rfc/add_str_starts_with_and_ends_with_functions\">str_starts_with and str_ends_with functions (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDangerousArrayInitializationInspection",
          "displayName": "Dangerous array initialization",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports dangerous array initializations (such as <code>$arr[] = value</code>).\n<p>\n  This practice is discouraged because if <code>$arr</code> already contains some value (for example, a string from a request variable), then this value will stay in place and <code>[]</code> may actually stand for string access operator. It is always preferable to initialize a variable by direct assignment.\n</p>\n<p>See <a href=\"https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying\">Creating/modifying with square bracket syntax (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpShortOpenTagInspection",
          "displayName": "Short open tag usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports short PHP opening tag <code>&lt;?</code> usages. Since short tags can be disabled in the PHP interpreter configuration, using them may lead to code compatibility issues.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.basic-syntax.phptags.php#language.basic-syntax.phptags\">PHP tags (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayFillCanBeConvertedToLoopInspection",
          "displayName": "'array_fill' can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_fill</code> calls that can be replaced with <code>foreach</code> loops.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNullSafeOperatorCanBeUsedInspection",
          "displayName": "Nullsafe operator '?->' can be used",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the null-checking conditional expressions that can be safely replaced with the <code>?-></code> nullsafe operator.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMixedReturnTypeCanBeReducedInspection",
          "displayName": "'mixed' return type can be narrowed",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports 'mixed' return types that can be narrowed down to more concrete types.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDefineCanBeReplacedWithConstInspection",
          "displayName": "Define constant name can be replaced with 'const' syntax",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>define</code> calls that can be replaced with <code>const</code> syntax\n</body>\n</html>"
        },
        {
          "shortName": "PhpVariableVariableInspection",
          "displayName": "Usage of a variable variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the usages of variable variables (dynamic variable names such as <code>$$a</code>).\n</body>\n</html>"
        },
        {
          "shortName": "PhpClosureCanBeConvertedToShortArrowFunctionInspection",
          "displayName": "Closure can be converted to arrow function",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the anonymous functions that can be transformed to short arrow functions. Support for short arrow functions is available since PHP 7.4.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/arrow_functions_v2\">PHP RFC: Arrow Functions 2.0 (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpArrayFilterCanBeConvertedToLoopInspection",
          "displayName": "'array_filter' can be converted to loop",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>array_filter</code> calls that can be replaced with <code>foreach</code> loops.\n</body>\n</html>"
        },
        {
          "shortName": "PhpFullyQualifiedNameUsageInspection",
          "displayName": "Fully qualified name usage",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the fully qualified class names that can be shortened by adding the <code>use</code> statement.\n</body>\n</html>"
        },
        {
          "shortName": "PhpIllegalPsrClassPathInspection",
          "displayName": "Class path doesn't match project structure",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the classes with the filepath not following the PSR-0/PSR-4 project structure.\n<p>\n  You can configure the project vendor roots under <b>Settings/Preferences | Directories</b>.\n</p>\n\n<p>\n  See <a href=\"https://www.php-fig.org/psr/psr-4/\">PSR-0/PSR-4 standards (php-fig.org)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayFillInspection",
          "displayName": "Loop can be converted to 'array_fill' call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>for</code> loops that can be replaced with <code>array_fill</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraditionalSyntaxArrayLiteralInspection",
          "displayName": "Traditional syntax array literal detected",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports traditional array syntax (<code>array()</code>) usages in array literals and suggests replacing them with short array syntax (<code>[]</code>).\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpLoopCanBeConvertedToArrayMapInspection",
          "displayName": "Loop can be converted to 'array_map' call",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>foreach</code> loops that can be replaced with <code>array_map</code> calls.\n</body>\n</html>"
        },
        {
          "shortName": "PhpTraitUsageOutsideUseInspection",
          "displayName": "Trait usage is not allowed",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the class references that are resolved to traits but are specified outside <code>use</code> statements. Such usages are most probably the result of a programming mistake, since traits cannot be instantiated and any <code>instanceof</code>-like behaviour is not supported for traits by design.\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.oop5.traits.php\">Traits (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNamedArgumentsWithChangedOrderInspection",
          "displayName": "Named arguments order does not match parameters order",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports named argument with order that does not match parameter order\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnnecessaryParenthesesInspection",
          "displayName": "Unnecessary parentheses",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the expressions containing redundant parenthesis, which can be safely removed.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Bitwise operation issues",
      "inspections": [
        {
          "shortName": "ShiftOutOfRange",
          "displayName": "Shift operation by inappropriate constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports shift operations\nwhere the shift value is a constant outside the reasonable range.\n<p>Integer shift operations outside the range <code>0..31</code> and long shift operations outside the\n  range <code>0..63</code> are reported. Shifting by negative or overly large values is almost certainly\n  a coding error.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  int shiftSize = 32;\n  // Warning: shift by 32 bits is equivalent to shift by 0 bits, so there's no shift at all. \n  int mask = (1 &lt;&lt; shiftSize) - 1;\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IncompatibleMask",
          "displayName": "Incompatible bitwise mask operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports bitwise mask expressions which are guaranteed to\nevaluate to <code>true</code> or <code>false</code>.\n<p>\n  The inspection checks the expressions of the form <code>(var & constant1) == constant2</code> or\n  <code>(var | constant1) == constant2</code>, where <code>constant1</code>\n  and <code>constant2</code> are incompatible bitmask constants.</p>\n<p><b>Example:</b></p>\n<pre><code>  // Incompatible mask: as the mask ends in 00,\n  // the result could be 0x1200 but not 0x1234\n  if ((mask & 0xFF00) == 0x1234) {...}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PointlessBitwiseExpression",
          "displayName": "Pointless bitwise expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports pointless bitwise\nexpressions.\n<p>\n  Such expressions include applying the <code>&</code> operator to the maximum value for the given type, applying the\n  <code>or</code> operator to zero, and shifting by zero. Such expressions may be the result of automated\n  refactorings not followed through to completion and are unlikely to be originally intended.</p>\n<p><b>Examples:</b></p>\n<pre>\n  // Warning: operation is pointless and can be replaced with just `flags`\n  // 0xFFFF_FFFF is the maximum value for an integer, and both literals are treated\n  // as 32 bit integer literals.\n  int bits = flags & 0xFFFF_FFFF;\n\n  // Warning: operation is pointless and can be replaced with just `bits`\n  // OR-ing with 0 always outputs the other operand.\n  int or = bits | 0x0;\n\n  // Warning: operation is pointless, as always results in 0\n  int xor = or ^ or;\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Structural search",
      "inspections": [
        {
          "shortName": "SSBasedInspection",
          "displayName": "Structural search inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Allows configuring <b>Structural Search/Structural Replace</b> templates that you can apply to the file you are editing.\n</p>\n<p>All matches will be highlighted and marked with the template name that you have configured.\nIf you configure the <b>Structural Replace</b> pattern as well, the corresponding replace option will be available as a quick-fix.\n</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Code",
      "inspections": [
        {
          "shortName": "UElementAsPsi",
          "displayName": "UElement as PsiElement usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usage of UAST <code>UElement</code> as <code>PsiElement</code>.\n<p>\n  The <code>PsiElement</code> obtained this way is ambiguous.\n</p>\n<p>\n  To obtain \"physical\" <code>PsiElement</code> use <code>UElementKt.getSourcePsiElement()</code>,\n  for <code>PsiElement</code> that \"emulates\" behaviour of Java-elements (<code>PsiClass</code>, <code>PsiMethod</code>, etc.)\n  use <code>UElementKt.getAsJavaPsiElement()</code>.\n</p>\n<p>\n  See <a href=\"https://plugins.jetbrains.com/docs/intellij/uast.html\">UAST - Unified Abstract Syntax Tree</a> in SDK Docs.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UsePluginIdEquals",
          "displayName": "Use 'PluginId#equals(Object)'",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparing <code>PluginId</code> instances using <code>==</code>.\n<p>\n  Replace with <code>equals()</code> call.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "SerializableCtor",
          "displayName": "Non-default constructor in serializable class",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-default constructor in serializable classes.\n<p>\n  The platform's <code>IonObjectSerializer</code> requires specifying <code>@PropertyMapping</code> explicitly.\n</p>\n<p>\n  Quick-fix generates necessary <code>@PropertyMapping</code> annotation for the constructor.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseJBColor",
          "displayName": "Use Darcula aware JBColor",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>java.awt.Color</code>.\n<p>\n  These are not aware of \"dark\" themes (e.g., bundled \"Darcula\") and might result in bad looking UI.\n</p>\n<p>\n  Quick-fix replaces usages with <code>JBColor</code>, which defines \"dark\" color variant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeReturnStatementVisitor",
          "displayName": "Unsafe return statements visitor",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unsafe use of <code>JavaRecursiveElementVisitor.visitReturnStatement()</code>.\n<p>\n  Processing <code>PsiReturnStatement</code>s\n  even if they belong to another <code>PsiClass</code> or <code>PsiLambdaExpression</code> is a bug in most cases.\n</p>\n<p>\n  Quick-fix inserts necessary explicit <code>visitClass()/visitLambdaExpression()</code> method(s).\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "HighlightVisitorInternal",
          "displayName": "Good code is red",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports \"good code is red\" problems for Java/Groovy code.\n<p>\n  Must be run in batch mode, IDE internal mode must be enabled.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseCouple",
          "displayName": "Use Couple instead of Pair",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of <code>Pair&lt;T, T&gt;</code> replaceable by <code>Couple&lt;T&gt;</code>.\n<p>\n  Quick-fix performs replacement.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnresolvedPluginConfigReference",
          "displayName": "Unresolved plugin configuration reference",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references to plugin configuration elements.\n<p>\n  Referencing extension with an unknown <code>id</code> might result in errors at runtime.\n</p>\n<p>\n  The following extension points are supported:\n<ul>\n  <li><code>com.intellij.advancedSetting</code> in resource bundle <code>advanced.setting.*</code> key</li>\n  <li><code>com.intellij.experimentalFeature</code> in <code>Experiments.isFeatureEnabled()/setFeatureEnabled()</code></li>\n  <li><code>com.intellij.notificationGroup</code> in <code>Notification</code> constructor and <code>NotificationGroupManager.getNotificationGroup()</code></li>\n  <li><code>com.intellij.registryKey</code> in <code>Registry</code> methods <code>key</code> parameter</li>\n  <li><code>com.intellij.toolWindow</code> in resource bundle <code>toolwindow.stripe.*</code> key</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UndesirableClassUsage",
          "displayName": "Undesirable class usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of undesirable classes (mostly Swing components).\n<p>\n  Quick-fix offers replacement with recommended IntelliJ Platform replacement.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "LeakableMapKey",
          "displayName": "Map key may leak",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports using <code>Language</code> or <code>FileType</code> as a map key in plugin code.\n<p>\n  Such usages might lead to inability to unload the plugin properly.\n</p>\n<p>\n  Please consider using <code>String</code> as keys instead.\n</p>\n<p>\n  See <a href=\"https://plugins.jetbrains.com/docs/intellij/dynamic-plugins.html\">Dynamic\n  Plugins</a> in SDK Docs for more information.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NonDefaultConstructor",
          "displayName": "Non-default constructors for service and extension class",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports extension/service class having a non-default (empty) constructor.\n<p>\n  Other dependencies should be acquired when needed in corresponding methods only.\n  Constructor having <code>Project</code> for extension/service on the corresponding level is allowed.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PsiElementConcatenation",
          "displayName": "Using PsiElement string representation to generate new expression is incorrect",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports direct usage of <code>PsiElement</code> and <code>PsiType</code> in strings.\n<p>\n  When building strings for <code>PsiJavaParserFacade.createExpressionFromText()</code> (or similar methods), <code>PsiElement.getText()</code> should be used\n  instead.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UsePrimitiveTypes",
          "displayName": "Use 'PsiType#equals(Object)' with primitive types",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparing <code>PsiPrimitiveType</code> instances using <code>==</code>.\n<p>\n  Primitive types should be compared with <code>equals</code> as Java 8 type annotations are also applicable for them.\n</p>\n<p>\n  Replace with <code>equals()</code> call.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "QuickFixGetFamilyNameViolation",
          "displayName": "QuickFix's getFamilyName() implementation must not depend on a specific context",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>QuickFix#getFamilyName()</code> using contextual information.\n<p>\n  This method must not use any non-static information.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnregisteredNamedColor",
          "displayName": "Unregistered named color",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>JBColor.namedColor()</code> with unregistered key.\n<p>\n  All keys must be registered with corresponding metadata in <code>*.themeMetadata.json</code>.\n</p>\n<p>\n  Quick-fix offers navigation to all known <code>*.themeMetadata.json</code> candidate files to add necessary entry.\n</p>\n<p>\n  See <a href=\"https://plugins.jetbrains.com/docs/intellij/themes-metadata.html\">Exposing Theme Metadata</a> in SDK Docs for more\n  information.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UseDPIAwareBorders",
          "displayName": "Use DPI-aware borders",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>javax.swing.border.EmptyBorder</code>.\n<p>\n  These are not DPI-aware and can result in UI layout problems.\n</p>\n<p>\n  Quick-fix performs replacement with <code>JBUI.Borders.empty()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "InspectionUsingGrayColors",
          "displayName": "Using new Color(a,a,a)",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>java.awt.Color</code> to create gray colors.\n<p>\n  Quick-fix <b>Convert to Gray</b> replaces it using <code>com.intellij.ui.Gray</code> constants instead.\n</p>\n<p><b>Example:</b></p>\n<code>Color myGray = new Color(55, 55, 55);</code>\n<p>After the quick-fix is applied:</p>\n<code>Color myGray = Gray._55;</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "UseDPIAwareInsets",
          "displayName": "Use DPI-aware insets",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>java.awt.Insets</code>.\n<p>\n  These are not DPI-aware and can result in UI layout problems.\n</p>\n<p>\n  Quick-fix performs replacement with <code>JBUI.insets()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "UnsafeVfsRecursion",
          "displayName": "Unsafe VFS recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usage of <code>VirtualFile.getChildren()</code> inside recursive methods.\n<p>\n  This may cause endless loops when iterating over cyclic symlinks.\n  Use <code>VfsUtilCore.visitChildrenRecursively()</code> instead.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingRecentApi",
          "displayName": "Usage of IntelliJ API not available in older IDEs",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of IntelliJ Platform API introduced in a version <em>newer</em> than the one specified in <code>&lt;idea-version></code> <code>@since-build</code> in <code>plugin.xml</code>.\n<p>\n  Using such API may lead to incompatibilities of the plugin with older IDE versions.\n</p>\n<p>\n  To avoid possible issues when running the plugin in older IDE versions, increase <code>since-build</code> accordingly,\n  or remove usages of this API.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\nIf <code>&lt;idea-version></code> <code>@since/until-build</code> attributes are not specified in <code>plugin.xml</code>, set <b>Since</b>/<b>Until</b> explicitly.\n</body>\n</html>"
        },
        {
          "shortName": "FileEqualsUsage",
          "displayName": "File.equals() usage",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>java.io.File.equals()/hashCode()/compareTo()</code> methods.\n<p>\n  These do not honor case-insensitivity on macOS.\n</p>\n<p>\n  Use <code>com.intellij.openapi.util.io.FileUtil.filesEquals()/fileHashCode()/compareFiles()</code> methods instead.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "StatisticsCollectorNotRegistered",
          "displayName": "Statistics collector not registered",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports statistics collectors not registered in <code>plugin.xml</code> descriptor.\n<p>\n  Internal inspection for IntelliJ IDEA project.\n</p>\n<p>\n  Quick-fix adds necessary registration.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "StatefulEp",
          "displayName": "Stateful extension",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports extensions and quick-fixes holding potentially leaking state.\n<p>\n  Keeping references to <code>PsiElement</code>, <code>PsiReference</code>, or <code>Project</code> instances can result in memory leaks.\n</p>\n<p>\n  Ideally, these should be stateless.\n  For quick-fix, see <code>LocalQuickFixOnPsiElement</code> as a convenient base class.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PresentationAnnotation",
          "displayName": "Invalid icon path in @Presentation",
          "defaultSeverity": "ERROR",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid and deprecated value for <code>icon</code> attribute in <code>com.intellij.ide.presentation.Presentation</code> annotation.\n</body>\n</html>"
        },
        {
          "shortName": "ComponentNotRegistered",
          "displayName": "Component/Action not registered",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JVM",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports plugin components and actions that are not registered in a <code>plugin.xml</code> descriptor.\n<p>\n  This eases developing new components when using the \"Create Class\" intention and helps keep track of potentially obsolete components.\n</p>\n<p>\n  Provided quick-fix to register the component adds necessary registration in <code>plugin.xml</code> descriptor.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Check Actions</b> option to turn off the check for Actions, as they may be intentionally created and\n    registered dynamically.\n  </li>\n  <li>Use the <b>Ignore non-public classes</b> option to ignore abstract and non-public classes.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "UseVirtualFileEquals",
          "displayName": "Use 'VirtualFile#equals(Object)'",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports comparing <code>VirtualFile</code> instances using <code>==</code>.\n<p>\n  Replace with <code>equals()</code> call.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "InspectionUniqueToolbarId",
          "displayName": "Specify toolbar id",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports passing non-unique <code>place</code> parameter for <code>ActionManager.createActionToolbar()</code>.\n<p>\n  Specifying proper <code>place</code> is required to distinguish Action's usage in <code>update()/actionPerformed()</code> via <code>AnActionEvent.getPlace()</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "MissingAccessibleContext",
          "displayName": "Accessible context is missing",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports Swing components that fail to provide accessibility context.\n<p>\n  It will be very hard to use such components for visually impaired users who use screen readers.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  ListCellRenderer&lt;String&gt; renderer = (list, val, index, sel, cell) -> {\n    JPanel panel = new JPanel();\n    return panel;\n  };\n</code></pre>\n<p>\n  To fix the problem, you should either call <code>setAccessibleName()</code> on the returned <code>JPanel</code>\n  or override its <code>getAccessibleContext()</code> method.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "IncorrectParentDisposable",
          "displayName": "Incorrect parentDisposable parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "DevKit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports using <code>Application</code> or <code>Project</code> as a parent <code>Disposable</code> in plugin code.\n<p>\n  Such usages will lead to plugins not being unloaded correctly.\n  Please see <a\n  href=\"https://plugins.jetbrains.com/docs/intellij/disposers.html?from=IncorrectParentDisposable#choosing-a-disposable-parent\">Choosing a\n  Disposable Parent</a> in SDK Docs.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Cloning issues",
      "inspections": [
        {
          "shortName": "CloneDeclaresCloneNotSupported",
          "displayName": "'clone()' does not declare 'CloneNotSupportedException'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>clone()</code> methods that do not declare <code>CloneNotSupportedException</code>.\n<p>If <code>CloneNotSupportedException</code> is not declared, the method's subclasses will not be able to prohibit cloning\nin the standard way. This inspection does not report <code>clone()</code> methods declared <code>final</code>\nand <code>clone()</code> methods on <code>final</code> classes.</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Only warn on 'protected' clone methods</b> option to indicate that this inspection should also warn on <code>public clone()</code> methods.\nThe <i>Effective Java</i> book (second and third edition) recommends omitting the <code>CloneNotSupportedException</code>\ndeclaration on <code>public</code> methods, because the methods that do not throw checked exceptions are easier to use.\n<p>Example:</p>\n<pre><code>\n  <b>public class</b> Example <b>implements</b> Cloneable {\n    // method doesn't declare 'throws CloneNotSupportedException'\n    <b>protected</b> Object clone() {\n        <b>try</b> {\n            <b>return</b> <b>super</b>.clone();\n        } <b>catch</b> (CloneNotSupportedException e) {\n            <b>return</b> null;\n        }\n    }\n  }\n</code></pre>\n\n</body>\n</html>"
        },
        {
          "shortName": "CloneableImplementsClone",
          "displayName": "Cloneable class without 'clone()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes implementing the <code>Cloneable</code> interface that don't override the\n<code>clone()</code> method.\n<p>Such classes use the default implementation of <code>clone()</code>,\n  which isn't <code>public</code> but <code>protected</code>, and which does not copy the mutable state of the class.</p>\n<p>A quick-fix is available to generate a basic <code>clone()</code> method,\nwhich can be used as a basis for a properly functioning <code>clone()</code> method\n  expected from a <code>Cloneable</code> class.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>public class</b> Data <b>implements</b> Cloneable {\n    <b>private</b> String[] names;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>public class</b> Data <b>implements</b> Cloneable {\n    <b>private</b> String[] names;\n\n    @Override\n    <b>public</b> Data clone() {\n      <b>try</b> {\n        Data clone = (Data) <b>super</b>.clone();\n        // TODO: copy mutable state here, so the clone can't change the internals of the original\n        <b>return</b> clone;\n      } <b>catch</b> (CloneNotSupportedException e) {\n        <b>throw new</b> AssertionError();\n      }\n    }\n  }\n</code></pre>\n<!--\nNote for translators: the text of the TODO comment in the example code above comes from\ncommunity/plugins/InspectionGadgets/InspectionGadgetsAnalysis/resources/messages/InspectionGadgetsBundle.properties\nproperty key: cloneable.class.without.clone.todo.message\n-->\n<!-- tooltip end -->\n<p>Use the <b>Ignore classes cloneable due to inheritance</b> option to ignore classes that are\n  <code>Cloneable</code> because they inherit from the <code>Cloneable</code> class.</p>\n<p>Use the <b>Ignore when Cloneable is necessary to call clone() method of super class</b>\n  option to ignore classes that require implementing <code>Cloneable</code> because they call the <code>clone()</code> method from a superclass.</p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneInNonCloneableClass",
          "displayName": "'clone()' method in non-Cloneable class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that override the\n<code>clone()</code> method but don't implement the <code>Cloneable</code> interface.\nThis usually represents a programming error.\n<!-- tooltip end -->\n<p>\n  Use the <b>Only warn on 'public' clone methods</b> option to ignore methods that aren't <code>public</code>.</p>\n<p>For classes designed to be inherited, you may choose to override <code>clone()</code> and declare it as <code>protected</code>\nwithout implementing the <code>Cloneable</code> interface and decide whether to implement the <code>Cloneable</code> interface in subclasses.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CloneCallsConstructors",
          "displayName": "'clone()' instantiates objects with constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to object constructors inside <code>clone()</code> methods.\n<p>It is considered good practice to call <code>clone()</code> to instantiate objects inside of a <code>clone()</code> method\n  instead of creating them directly to support later subclassing.\nThis inspection will not report\n<code>clone()</code> methods declared as <code>final</code>\n  or <code>clone()</code> methods on <code>final</code> classes.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfClone",
          "displayName": "Use of 'clone()' or 'Cloneable'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports implementations of and calls to the <code>clone()</code> method and uses of <code>java.lang.Cloneable</code>.\n<p>Some coding standards prohibit the use of <code>clone()</code> and recommend using a copy constructor or\n  the <code>static</code> factory method instead.</p>\n<p>The inspection ignores calls to <code>clone()</code> on arrays because it's a correct and compact way to copy an array.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CloneReturnsClassType",
          "displayName": "'clone()' should have return type equal to the class it contains",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>clone()</code> methods with return types different from the class they're located in.\n<p>Often a <code>clone()</code> method will have a return type of <code>java.lang.Object</code>, which makes it harder to use by its clients.\n<i>Effective Java</i> (the second and third editions) recommends making the return type of the <code>clone()</code> method the same as the\n  class type of the object it returns.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>class</b> Foo <b>implements</b> Cloneable {\n    <b>public</b> Object clone() {\n      <b>try</b> {\n        super.clone();\n      } <b>catch</b> (CloneNotSupportedException e) {\n        <b>throw new</b> AssertionError();\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NonPublicClone",
          "displayName": "'clone()' method not 'public'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>clone()</code> methods that are <code>protected</code> and not <code>public</code>.\n<p>When overriding the <code>clone()</code> method from <code>java.lang.Object</code>, it is expected to make the method <code>public</code>,\n  so that it is accessible from non-subclasses outside the package.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "JVM languages",
      "inspections": [
        {
          "shortName": "OverrideOnly",
          "displayName": "Method can only be overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to API methods marked with <code>@ApiStatus.OverrideOnly</code>.\n<p>\n  The <code>@ApiStatus.OverrideOnly</code> annotation indicates that the method is part of SPI (Service Provider Interface).\n  Clients of the declaring library should implement or override such methods, not call them directly.\n  Marking a class or interface with this annotation is the same as marking every method with it.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "TestFailedLine",
          "displayName": "Failed line in test",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>Reports failed method calls or assertions in tests. It helps detect the failed line in code faster and start debugging it immediately.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Test\n  fun foo() {\n    assertEquals(1, 0) // highlighted\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UnstableTypeUsedInSignature",
          "displayName": "Unstable type is used in signature",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of classes, methods, and fields that reference an unstable API type in the signature,\nbut are not marked with the same unstable annotation.\n<p>\n  This inspection ensures that the signatures of a public API do not expose any <i>unstable</i> (internal, experimental) types.\n  For example, if a method returns an <i>experimental</i> class, the method itself is considered <i>experimental</i>\n  because incompatible changes of the type (deletion or move to another package) lead to incompatible method signature changes.\n</p>\n<!-- tooltip end -->\n<p>Use the list below to specify which annotations mark an unstable API.</p>\n</body>\n</html>"
        },
        {
          "shortName": "BlockingMethodInNonBlockingContext",
          "displayName": "Inappropriate thread-blocking method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports thread-blocking method calls in code fragments where threads should not be blocked.\n\n<p>Example (Reactor):</p>\n<pre><code>\nFlux.just(\"1\").flatMap(f -&gt; {\n    Flux&lt;String&gt; just = Flux.just(f);\n    just.toIterable(); // Error: blocking operator call in non-blocking scope\n    return just;\n  }\n);\n</code></pre>\n\n<p>Example (Kotlin Coroutines):</p>\n<pre><code>\nsuspend fun exampleFun() {\n    Thread.sleep(100); // Error: inappropriate blocking method call inside suspend function\n}\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>In the <b>Blocking Annotations</b> list, specify annotations that mark thread-blocking methods.</li>\n  <li>In the <b>Non-Blocking Annotations</b> list, specify annotations that mark non-blocking methods.</li>\n</ul>\n<p>Specified annotations can be used as <a href=\"https://www.jetbrains.com/help/idea/external-annotations.html\">External Annotations</a></p>\n</body>\n</html>"
        },
        {
          "shortName": "Dependency",
          "displayName": "Illegal package dependencies",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports illegal dependencies between scopes according to the dependency rules given. Dependency rules can be used to prohibit usage from a\nscope to another scope.\n<!-- tooltip end -->\nUse the \"Configure dependency rules\" button below to customize validation rules.\n</body>\n</html>\n"
        },
        {
          "shortName": "MustAlreadyBeRemovedApi",
          "displayName": "API must already be removed",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations marked with <code>@ApiStatus.ScheduledForRemoval</code>\nthat should have been removed in the current version of the declaring library.\n<!-- tooltip end -->\n<p>It compares the specified scheduled removal version with the version that you can set below.</p>\n<p>\n  Specify the version as a string separated with dots and optionally postfixed with\n  <code>alpha</code>, <code>beta</code>, <code>snapshot</code>, or <code>eap</code>.\n</p>\n<p>Examples of valid versions: <code>1.0</code>, <code>2.3.1</code>, <code>2018.1</code>, <code>7.5-snapshot</code>, <code>3.0-eap</code>.\n</p>\n<p>\n  Version comparison is intuitive: <code>1.0 &lt; 2.0</code>, <code>1.0-eap &lt; 1.0</code>, <code>2.3-snapshot &lt; 2.3</code> and so on.\n  For detailed comparison logic, refer to the implementation of <a\n  href=\"https://github.com/JetBrains/intellij-community/blob/master/platform/util-rt/src/com/intellij/util/text/VersionComparatorUtil.java\">VersionComparatorUtil</a>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "TestOnlyProblems",
          "displayName": "Test-only usage in production code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>@TestOnly</code>- and <code>@VisibleForTesting</code>-annotated methods and classes that are used in production code. Also reports\nusage of applying <code>@TestOnly</code> <code>@VisibleForTesting</code> to the same element.\n\n<p>The problems are not reported if such method or class is referenced from:</p>\n<ul>\n  <li>Code under the <b>Test Sources</b> folder\n  <li>A test class (JUnit/TestNG)\n  <li>Another <code>@TestOnly</code>-annotated method\n</ul>\n<p><b>Example (in production code):</b></p>\n<pre><code>\n  @TestOnly\n  fun foo() { ... }\n\n  fun main () {\n    foo()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "JUnitRule",
          "displayName": "Malformed @Rule/@ClassRule field",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports malformed <code>@Rule</code> or <code>@ClassRule</code> annotation usages.\nTests with malformed <a href=\"https://github.com/junit-team/junit4/wiki/Rules\">rules</a> cannot be run.\n<ul>\n  <li>\n    A <code>@Rule</code> annotated member must be <code>public</code> and a subtype of\n    <code>org.junit.rules.TestRule</code> or <code>org.junit.rules.MethodRule</code>\n  <li>\n    A <code>@ClassRule</code> annotated member must be <code>public</code> and <code>static</code> and a subtype of\n    <code>org.junit.rules.TestRule</code>\n</ul>\n<p>For example:</p>\n<pre><code>\n  <b>public class</b> MomentousTest {\n    @Rule\n    <b>private final</b> TemporaryFolder tempFolder =\n      <b>new</b> TemporaryFolder();\n\n    // ... tests go here\n  }\n</code></pre>\n<p>A quick fix is provided to fix the modifiers:</p>\n<pre><code>\n  <b>public class</b> MomentousTest {\n    @Rule\n    <b>public final</b> TemporaryFolder tempFolder =\n      <b>new</b> TemporaryFolder();\n\n    // ... tests go here\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "NonExtendableApiUsage",
          "displayName": "Class, interface, or method should not be extended",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes, interfaces and methods that extend, implement, or override API elements marked with <code>@ApiStatus.NonExtendable</code>.\n<p>\n  The <code>@ApiStatus.NonExtendable</code> annotation indicates that the class, interface, or method <strong>must not be extended, \n  implemented, or overridden</strong>.\n  Since casting such interfaces and classes to the internal library implementation is rather common,\n  if a client provides a different implementation, you will get <code>ClassCastException</code>.\n  Adding new abstract methods to such classes and interfaces will break the compatibility with the client's implementations.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnstableApiUsage",
          "displayName": "Unstable API Usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of an API marked with one of the annotations as unstable. Such an API may be changed or removed in future versions, breaking\nthe code that uses it.\n<!-- tooltip end -->\n<p>\nThe annotations which are used to mark unstable APIs are shown in the list below. By default, the inspection ignores usages of unstable APIs\nif their declarations are located in sources of the same project because in such cases it'll be possible to update the usages when you change APIs.\nHowever, it may be inconvenient if the project is big, so one can switch off the 'Ignore API declared in this project' option to report\nthe usages of unstable APIs declared in both the project sources and in the libraries.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "MissingDeprecatedAnnotationOnScheduledForRemovalApi",
          "displayName": "Missing '@Deprecated' annotation on scheduled for removal API",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations marked with <code>@ApiStatus.ScheduledForRemoval</code> without <code>@Deprecated</code>.\n<p>Example:</p>\n<pre>\n  @ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n  public void myLegacyMethod() { }\n</pre>\n<p>After the quick-fix is applied the result looks like:</p>\n<pre>\n  @Deprecated\n  @ApiStatus.ScheduledForRemoval(inVersion = \"2017.3\")\n  public void myLegacyMethod() { }\n</pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "PhpMissingBreakStatementInspection",
          "displayName": "Missing 'break' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>case</code> clauses in <code>switch</code> statements that do not end with a <code>break</code> or a <code>return</code> statement.\n  <!-- tooltip end -->\n  <p>\n    If a <code>case</code> clause does not end with <code>break</code> or <code>return</code>, its execution can unintentionally fall through the next case.\n  </p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDivisionByZeroInspection",
          "displayName": "Division by zero",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n      Reports division by zero or modulo by zero.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpSwitchCaseWithoutDefaultBranchInspection",
          "displayName": "Switch statement without default branch",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>switch</code> statements without a default branch.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateArrayKeysInspection",
          "displayName": "Duplicate array keys",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate keys in array declarations.\n  <p>If multiple elements in the array declaration use the same key, only the last one will be used, and all others will be overwritten.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpVoidFunctionResultUsedInspection",
          "displayName": "Void function result used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the usages of a <code>void</code> function's return value.\n<p>\n  Since <code>void</code> functions do not have a return value, such usages are most likely a programming mistake.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringReturnInspection",
          "displayName": "Method '__toString' return type",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>__toString</code> methods that do not return <code>string</code>.\n  <!-- tooltip end -->\n  <p>Prior to PHP 7.4, this would lead to a fatal <code>E_RECOVERABLE_ERROR</code> level error. In PHP 7.4, a fatal non-recoverable <code>ERROR</code> is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.\n  </p>\n  <p>\n    See <a href=\"https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring\">__toString (php.net)</a> for details.\n  </p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpOptionalBeforeRequiredParametersInspection",
          "displayName": "Optional before required parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the optional parameters that appear before the required parameters in a function/method declaration.\n<p>\n  See <a href=\"http://www.php.net/manual/en/functions.arguments.php#functions.arguments.default\">Default argument values (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpForeachNestedOuterKeyValueVariablesConflictInspection",
          "displayName": "Nested vs outer 'foreach' variables conflict",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the variables that are used as a key or value both by the inner and outer <code>foreach</code> loops. In most cases, this is an error or may result in an error in the future.\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParentCallCommonInspection",
          "displayName": "Missing parent call for method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the methods that do not call their parent method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateSwitchCaseBodyInspection",
          "displayName": "Duplicate branch in switch statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>switch</code> statements containing the same code in different branches.\n</body>\n</html>"
        },
        {
          "shortName": "PhpNonCompoundUseInspection",
          "displayName": "Unnecessary statement use",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the <code>use</code> statements that contain non-fully qualified class names and thus have no effect. The inspection only reports classes imports; functions and constants imports are not considered.\n<!-- tooltip end -->\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.namespaces.importing.php#language.namespaces.importing\">Using namespaces: Aliasing/Importing (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUnpackedArgumentTypeMismatchInspection",
          "displayName": "Invalid type of unpacked argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports unpacked function arguments and array elements whose type is neither <code>array</code> nor <code>Traversable</code>.\n<p>\n  Starting with PHP 8.0, such usages will result in <code>Fatal error</code>.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpApplyingEmptyIndexOperatorOnStringInspection",
          "displayName": "Empty index operator not supported for strings",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of empty index operator(<code>[]</code>) with <code>strings</code>.\n<!-- tooltip end -->\n<p>\n  Starting from PHP 7.1, applying the empty index operator on a string throws a fatal error.\n</p>\n<p>See <a href=\"https://www.php.net/manual/en/language.types.array.php#language.types.array.syntax.modifying\">Creating/modifying with square bracket syntax (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpStatementHasEmptyBodyInspection",
          "displayName": "Statement has empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the statements that have empty bodies.\n<p>While occasionally useful, such statements are often the result of typos and may cause confusion.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpGotoIntoLoopInspection",
          "displayName": "Goto into loop statement",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>goto</code> labels that are located inside loops or <code>switch</code> statements.\n<p>\n  See <a href=\"https://www.php.net/manual/en/control-structures.goto.php\">goto (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpForeachArrayIsUsedAsValueInspection",
          "displayName": "Foreach array is used as value",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the variables that are used in a <code>foreach</code> loop as both an array expression and an array's key or value (for example,  <code>foreach ($items as $items) {}</code>).\n<p>\n  Commonly, this is the result of a typing error.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpExpressionResultUnusedInspection",
          "displayName": "Expression result unused",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the expressions that are calculated, but the calculation result is not used anywhere.\n  <p>Such errors can be caused, for example, by misspelling the <code>=</code> operator as <code>==</code>.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedSwitchBranchInspection",
          "displayName": "Unused 'switch' branch",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the branches in <code>switch</code> statements that do not belong to the set of enum cases and as a result are never executed.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/enumerations\">Enumerations (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParentConstructorInspection",
          "displayName": "Missing parent call for constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n Reports the constructors that do not call their parent constructor.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDuplicateMatchConditionInspection",
          "displayName": "Duplicate condition",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate conditions in <code>match</code> expressions.\n<p>\n    See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpCaseWithValueNotFoundInEnumInspection",
          "displayName": "Case with specified value not found in enum",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the arguments of enum's <code>from</code> method calls that are not found in target enum classes.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/enumerations\">Enumerations (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpConcatenationWithArithmeticInspection",
          "displayName": "Concatenation with arithmetic usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the string concatenation expressions that are used together with <code>+</code>, <code>-</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code> operators.\n\nStarting with PHP 8, the concatenation operation has lower precedence and such expressions can thus produce unexpected results.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/concatenation_precedence\">Concatenation precedence (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpToStringImplementationInspection",
          "displayName": "Method '__toString' implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attempts to convert the objects having no <code>__toString</code> method implementation to <code>string</code>.\n<!-- tooltip end -->\n  <p>\n    Prior to PHP 7.4, this would lead to a fatal <code>E_RECOVERABLE_ERROR</code> level error. In PHP 7.4, a fatal non-recoverable <code>ERROR</code> is thrown. In PHP 8.0, the return value follows the standard PHP type semantics and will be coerced into a string if possible and if strict typing is disabled.\n  </p>\n  <p>\n    If the <b>Check __toString exists for each expression type</b> option is enabled, the inspection will check all possible types of the expression and\n    report if at least one of them doesn't contain the <code>__toString</code> method implementation.\n  </p>\n<p>\n  See <a href=\"https://www.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.tostring\">__toString (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpStrictComparisonWithOperandsOfDifferentTypesInspection",
          "displayName": "Strict comparison of operands with incompatible types",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>===</code> or <code>!==</code> strict comparisons used on operands with incompatible types.\n<p>\n  See <a href=\"https://www.php.net/manual/en/types.comparisons.php\">PHP type comparison tables (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpDuplicateCaseInspection",
          "displayName": "Duplicate case in switch statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports duplicate <code>case</code> expressions in <code>switch</code> statements.\n  <p>If a <code>switch</code> statement contains multiple duplicate <code>case</code> expressions, only the first one is executed.</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpSuspiciousNameCombinationInspection",
          "displayName": "Suspicious names combination",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments and function calls where the name of the variable or parameter probably doesn't match the name of the assigned or passed value.\n<!-- tooltip end -->\n<p>\n  The following sets of names are supported:\n</p>\n<ul>\n  <li><code>needle</code>, <code>haystack</code></li>\n  <li><code>x</code>, <code>y</code></li>\n  <li><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code></li>\n  <li><code>year</code>, <code>month</code>, <code>week</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code></li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PhpUncoveredEnumCasesInspection",
          "displayName": "Some enum cases are uncovered",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>match</code> expressions that don't cover all <code>enum</code> cases in <code>match</code> arm conditions.\n</body>\n</html>"
        },
        {
          "shortName": "PhpAssignmentInConditionInspection",
          "displayName": "Assignment in condition",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the assignments that are used in conditional expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpDuplicateMatchArmBodyInspection",
          "displayName": "Duplicate arm in 'match' expression",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate bodies in <code>match</code> arms.\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpNonStrictObjectEqualityInspection",
          "displayName": "Non-strict object equality",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the usages of the comparison operator (<code>==</code>) for comparing object variables.\n<!-- tooltip end -->\n<p>\n  Object variables are compared as follows:\n</p>\n<ul>\n  <li>\n    When using the comparison operator (<code>==</code>), two object instances are considered equal if they have the same attributes and values (values are compared with\n    <code>==</code>), and are instances of the same class.\n  </li>\n  <li>\n    When using the identity operator (<code>===</code>), object variables are considered identical if and only if they refer to the same instance of the same class.\n  </li>\n</ul>\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.oop5.object-comparison.php\">Comparing Objects (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpSillyAssignmentInspection",
          "displayName": "Redundant assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the assignment statements, in which both sides are equal. Such assignments have no effect and can be removed.\n</body>\n</html>"
        },
        {
          "shortName": "PhpFormatFunctionParametersMismatchInspection",
          "displayName": "Format function parameters mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the arguments of a format function (such as <code>printf</code> or <code>sprintf</code>) that are not mapped to any parameters or specification conversions.\n<p>\n  See <a href=\"https://www.php.net/manual/en/function.printf.php\">printf (php.net)</a> and <a href=\"https://www.php.net/manual/en/function.sprintf.php\">sprintf (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpWrongStringConcatenationInspection",
          "displayName": "Wrong string concatenation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the attempts to concatenate strings by using the <code>+</code> operator instead of the dot (<code>.</code>) concatenation operator. Such attempts are most likely a programming mistake.\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpPassByRefInspection",
          "displayName": "Pass parameter by reference",
          "defaultSeverity": "ERROR",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n  Reports the arguments in a function/method call that cannot be passed by reference.\n  <p>\n    Only variables and references returned from functions can be passed by reference. See <a href=\"https://www.php.net/manual/en/language.references.pass.php#language.references.pass\">Passing by Reference (php.net)</a> for details.\n  </p>\n</body>\n</html>\n"
        },
        {
          "shortName": "PhpUnusedMatchConditionInspection",
          "displayName": "Unused 'match' condition",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the conditions in <code>match</code> expressions that will never be matched.\n<p>\n  Similarly to PHP Engine behavior, the inspection uses strict comparison (<code>===</code>) to check the types in <code>match</code> conditions against the <code>match</code> argument type, regardless of the <code>strict_types</code> directive. Since no type coercion occurs, some conditions may be non-matched due to non-matching types.\n</p>\n<p>\n  See <a href=\"https://wiki.php.net/rfc/match_expression_v2\">Match expression (php.net)</a> for details.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "PhpMissingParentCallMagicInspection",
          "displayName": "Missing parent call for magic methods",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Reports the magic methods that do not call their parent magic method.\n</body>\n</html>"
        },
        {
          "shortName": "PhpConstantReassignmentInspection",
          "displayName": "Constant reassignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n   Reports reassignments of constants.\n   <p>\n     Since constants cannot be changed, such assignments will have no effect and will emit an <code>E_NOTICE</code> (in PHP 7.4 and earlier) or <code>E_WARNING</code> (in PHP 8.0 and later).\n  </p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "UI form",
      "inspections": [
        {
          "shortName": "I18nForm",
          "displayName": "Hardcoded string literal in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any instances of hardcoded strings in your UI forms.\n<p>Hardcoded string literals are usually errors in\nan internationalized environment.\n  This inspection does not report empty strings and strings consisting of only whitespace.</p>\n\n<p>The quick-fix transforms a string literal\n  into a reference to a property in a resource bundle.</p>\n</body>\n</html>"
        },
        {
          "shortName": "OneButtonGroup",
          "displayName": "Button group with one button",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports\n<code>ButtonGroup</code> instances that contain only one <code>JRadioButton</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "DuplicateMnemonic",
          "displayName": "Duplicate mnemonics",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports components that have duplicated mnemonic characters.\n<p>The quick-fix assigns a unique mnemonic character to each of the components.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "MissingMnemonic",
          "displayName": "Missing mnemonics",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports focusable components with the\n<code>text</code> property or labels with the assigned\n<code>labelFor</code> property that do not have a mnemonic\ncharacter. The quick-fix assigns a unique mnemonic to such a component.\n</body>\n</html>\n"
        },
        {
          "shortName": "BoundFieldAssignment",
          "displayName": "Assignment to UI-bound field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments to fields which are bound to components\nin UI Designer forms.\n<p>Such assignments will cause the component setup code generated by UI Designer\n  for such fields to be ignored.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "NoLabelFor",
          "displayName": "No label for component",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports components that do not have any static\ntext and do not have any label marked with <code>setLabelFor</code>\nfor this component.\n<p>Components that do not have static text include edit fields and combo boxes.\nSuch components cannot be activated with a keyboard shortcut. The quick-fix for this inspection\n  allows you to automatically associate an adjacent label with the problematic component.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "InvalidPropertyKeyForm",
          "displayName": "Invalid property key in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references to .properties files.\n</body>\n</html>"
        },
        {
          "shortName": "NoButtonGroup",
          "displayName": "Radio button not in a group",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports\n<code>JRadioButton</code> components that are not placed in\n<code>ButtonGroup</code>. A quick-fix is available to group radio\nbuttons placed in adjacent grid cells.\n</body>\n</html>\n"
        },
        {
          "shortName": "FormSpellChecking",
          "displayName": "Typo in a UI form",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports typos and misspelling in your UI forms (for example, in a <code>JLabel</code> text or <code>JPanel</code> title) and fixes them\n  with one click.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "NoScrollPane",
          "displayName": "Scrollable component not in JScrollPane",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.uiDesigner",
          "pluginVersion": "212.4746.2",
          "language": "TEXT",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports\n<code>Scrollable</code> components,\nexcept for <code>JTextField</code>, that are not placed in\n<code>JScrollPane</code>. The quick-fix surrounds the problematic\ncomponent with a scroll pane.\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Resource management",
      "inspections": [
        {
          "shortName": "ChannelResource",
          "displayName": "'Channel' opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>Channel</code> resources that are not safely closed, including any instances created by calling\n<code>getChannel()</code> on a file or socket resource.\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void send(Socket socket) throws IOException {\n    SocketChannel channel = socket.getChannel(); //warning\n    channel.write(ByteBuffer.wrap(\"message\".getBytes()));\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether a <code>Channel</code> resource is allowed to be opened inside a <code>try</code>\n    block. This style is less desirable because it is more verbose than opening a <code>Channel</code>\n    in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "DriverManagerGetConnection",
          "displayName": "Use of DriverManager to get JDBC connection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports any uses of <code>java.sql.DriverManager</code>\nto acquire a JDBC connection. \n<p>\n  <code>java.sql.DriverManager</code>\n  has been superseded by <code>javax.sql.Datasource</code>, which\n  allows for connection pooling and other optimizations.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  Connection conn = DriverManager.getConnection(url, username, password);\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "IOResource",
          "displayName": "I/O resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports I/O resources that are not safely closed. I/O resources checked\nby this inspection include <code>java.io.InputStream</code>,\n<code>java.io.OutputStream</code>, <code>java.io.Reader</code>,\n<code>java.io.Writer</code>, <code>java.util.zip.ZipFile</code>, <code>java.io.Closeable</code> and <code>java.io.RandomAccessFile</code>.\n<p>\n  I/O resources wrapped by other I/O resources are not reported, as the wrapped resource will be closed by the wrapping resource.\n</p>\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void save() throws IOException {\n    FileWriter writer = new FileWriter(\"filename.txt\"); //warning\n    writer.write(\"sample\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>List I/O resource classes that do not need to be closed and should be ignored by this inspection.</li>\n  <li>\n    Whether an I/O resource is allowed to be opened inside a <code>try</code>block.\n    This style is less desirable because it is more verbose than opening a resource in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "JNDIResource",
          "displayName": "JNDI resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JNDI resources that are not safely closed. JNDI resources reported\nby this inspection include <code>javax.naming.InitialContext</code>,\nand <code>javax.naming.NamingEnumeration</code>.\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Object findObject(Properties properties, String name) throws NamingException {\n    Context context = new InitialContext(properties); //context is not closed\n    return context.lookup(name);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether a JNDI Resource is allowed to be opened inside a <code>try</code> block.\n    This style is less desirable because it is more verbose than opening a resource in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "JDBCResource",
          "displayName": "JDBC resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports JDBC resources that are not safely closed. JDBC resources reported\nby this inspection include <code>java.sql.Connection</code>,\n<code>java.sql.Statement</code>, <code>java.sql.PreparedStatement</code>,\n<code>java.sql.CallableStatement</code>, and <code>java.sql.ResultSet</code>.\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  ResultSet findAllElements(Connection connection) throws SQLException {\n    PreparedStatement statement = connection.prepareStatement(\"SELECT * FROM TABLE\");//statement is not closed\n    statement.execute();\n    return statement.getResultSet();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether a JDBC resource is allowed to be opened inside a <code>try</code>\n    block. This style is less desirable because it is more verbose than opening a resource\n    in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "HibernateResource",
          "displayName": "Hibernate resource opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the <code>openSession()</code> method if the returned <code>org.hibernate.Session</code> resource is not safely closed.\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void doHibernateQuery(SessionFactory factory) {\n    Session session = factory.openSession(); //warning\n    session.createQuery(\"...\");\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether a <code>org.hibernate.Session</code> resource is allowed to be opened inside a <code>try</code>\n    block. This style is less desirable because it is more verbose than opening a resource\n    in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AutoCloseableResource",
          "displayName": "AutoCloseable used without 'try'-with-resources",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>AutoCloseable</code> instances which are not used in a try-with-resources statement, also known as\n<i>Automatic Resource Management</i>.\n<p>\n  This means that the \"open resource before/in <code>try</code>, close in <code>finally</code>\" style that had been used before\n  try-with-resources became available, is also reported.\n  This inspection is meant to replace all <i>opened but not safely closed</i> inspections when developing in Java 7 and higher.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  private static void foo() throws IOException {\n    InputStream profile = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"/someFile\");\n    System.out.println(profile.read());\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    List subclasses of <code>AutoCloseable</code> that do not need to be closed and should be ignored by this inspection.\n    <br/>\n    <b>Note</b>: The inspection will still report streams returned from the <code>java.nio.file.Files</code> methods <code>lines()</code>,\n    <code>walk()</code>, <code>list()</code> and <code>find()</code>,\n    even when <code>java.util.stream.Stream</code> is listed to be ignored.\n    These streams contain an associated I/O resource that needs to be closed.\n  </li>\n  <li>\n    List methods returning <code>AutoCloseable</code> that should be ignored when called.\n  </li>\n  <li>\n    Whether to ignore an <code>AutoCloseable</code> if it is the result of a method call.\n    When this option is enabled, the results of factory methods will also be ignored.\n  </li>\n  <li>\n    Whether the inspection should report if an <code>AutoCloseable</code> instance is passed as a method call argument.\n    If this option is enabled, the inspection assumes the resource is closed in the called method.\n    Method calls inside a <code>finally</code> block with 'close' in the name and an\n    <code>AutoCloseable</code> argument will not be ignored.\n  </li>\n  <li>\n    Whether to ignore method references to constructors of resource classes.\n  </li>\n  <li>\n    Whether to ignore methods that return a resource and whose name starts with 'get'.\n    This can reduce false positives because most of the getters do not transfer the ownership of the resource,\n    and their call sites are not responsible for closing the resource.\n  </li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "SocketResource",
          "displayName": "Socket opened but not safely closed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports socket resources that are not safely closed. Socket resources reported\nby this inspection include <code>java.net.Socket</code>,\n<code>java.net.DatagramSocket</code>, and <code>java.net.ServerSocket</code>.\n<p>\n  By default, the inspection assumes that the resources can be closed by any method with\n  'close' or 'cleanup' in its name.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  byte[] getMessage(ServerSocket socket) throws IOException {\n    Socket client = socket.accept(); //socket is not closed\n    return client.getInputStream().readAllBytes();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the following options to configure the inspection:\n</p>\n<ul>\n  <li>\n    Whether a socket is allowed to be opened inside a <code>try</code> block.\n    This style is less desirable because it is more verbose than opening a resource in front of a <code>try</code> block.\n  </li>\n  <li>\n    Whether the resource can be closed by any method call with the resource passed as argument.\n  </li>\n</ul>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Language injection",
      "inspections": [
        {
          "shortName": "UnknownLanguage",
          "displayName": "Unknown Language ID",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports when the ID of the language used in a <code>@Language</code> annotation is unknown.\n<p><b>Example:</b></p>\n<pre><code>\n  @Language(\"HMTL\") String html;\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "InjectionNotApplicable",
          "displayName": "Injection Annotation not applicable",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports when a <code>@Language</code> annotation is applied to an element with a type other than <code>String</code> or <code>String[]</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  @Language(\"HTML\") <b>int</b> i;\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  <b>int</b> i;\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "LanguageMismatch",
          "displayName": "Language mismatch",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports when the language of a reference does not match the expected language of the usage context.\n\n<p>Example:</p>\n<pre><code>\n  @Language(\"JavaScript\")\n  String JS_CODE = \"var x;\";\n\n  @Language(\"XPath\")\n  String XPATH_CODE = JS_CODE; // warning here\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Maven",
      "inspections": [
        {
          "shortName": "MavenCoroutinesDeprecation",
          "displayName": "Incompatible kotlinx.coroutines dependency is used with Kotlin 1.3+ in Maven",
          "defaultSeverity": "ERROR",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "XML",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>kotlinx.coroutines</b> library dependencies in Maven that should be updated in order\nto be compatible with Kotlin 1.3 and later.\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "UnusedLambdaExpressionBody",
          "displayName": "Unused return value of a function with lambda expression body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls with an unused return value when the called function returns a lambda from an expression body.\n<p>\nIf there is <code>=</code> between function header and body block,\ncode from the function will not be evaluated which can lead to incorrect behavior.\n</p>\n<p><b>Remove = token from function declaration</b> can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun printHello() = { println(\"Hello\") }\n\n  fun main() {\n      printHello() // This function doesn't print anything\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun printHello() { println(\"Hello\") }\n\n  fun main() {\n      printHello()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceArrayEqualityOpWithArraysEquals",
          "displayName": "Arrays comparison via '==' and '!='",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of <code>==</code> or <code>!=</code> operator for arrays that should be replaced with <code>contentEquals()</code>.\n<p>\n    The <code>==</code> and <code>!=</code>operators compare array references instead of their content.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>  fun test() {\n      val a = arrayOf(1, 2, 3)\n      val b = arrayOf(1, 2, 3)\n      println(a == b) // references comparison\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun test() {\n      val a = arrayOf(1, 2, 3)\n      val b = arrayOf(1, 2, 3)\n      println(a.contentEquals(b))\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousEqualsCombination",
          "displayName": "Suspicious combination of == and ===",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>==</code> and <code>===</code> comparisons that are both used on the same variable within a single expression.\n<p>Due to similarities <code>==</code> and <code>===</code> could be mixed without notice, and\n    it takes a close look to check that <code>==</code> used instead of <code>===</code></p>\n<p>Example:</p>\n<pre><code>\n  if (type === FIELD || type == METHOD || type == ANNOTATION_METHOD || // Note that \"==\" is used incorrectly\n      type === LAMBDA_EXPRESSION) return\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "WrapUnaryOperator",
          "displayName": "Ambiguous unary operator use with number constant",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an unary operator followed by a dot qualifier such as <code>-1.inc()</code>.\n<p>Code like <code>-1.inc()</code> can be misleading because <code>-</code> has a lower precedence than <code>.inc()</code>.\n    As a result, <code>-1.inc()</code> evaluates to <code>-2</code> and not <code>0</code> as it might be expected.</p>\n<p><b>Wrap unary operator and value with ()</b> quick-fix can be used to amend the code automatically.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedEquals",
          "displayName": "Unused equals expression",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unused <code>equals</code>(<code>==</code>) expressions.\n</body>\n</html>\n"
        },
        {
          "shortName": "IncompleteDestructuring",
          "displayName": "Incomplete destructuring declaration",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports incomplete destructuring declaration.\n</body>\n</html>\n"
        },
        {
          "shortName": "UnsafeCastFromDynamic",
          "displayName": "Implicit (unsafe) cast from dynamic type",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions with a dynamic type in the specified inspection scope that are implicitly cast to another type.\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinCovariantEquals",
          "displayName": "Covariant 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <b>equals()</b> methods taking an argument type other than <b>Any?</b>\nif the containing class does not have another <b>equals()</b> method which does take <b>Any?</b> as its argument type.\n</body>\n</html>"
        },
        {
          "shortName": "ControlFlowWithEmptyBody",
          "displayName": "Control flow with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code>, <code>while</code>, <code>do</code> or <code>for</code> statements with empty bodies.\n<p>While occasionally intended, this construction is confusing, and often the result of a typo.</p>\n<p>A quick-fix is suggested to remove a statement.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  if (a &gt; b) {}\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousCollectionReassignment",
          "displayName": "Augmented assignment creates a new collection under the hood",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports augmented assignment (<code>+=</code>) expressions on read-only <code>Collection</code>.\n<p>Augment assignment (<code>+=</code>) expression on read-only <code>Collection</code> doesn't modify the target collection,\n    it creates a new one under the hood which can be misleading and lead to performance issues.</p>\n<p><b>Change type to mutable</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun test() {\n      var list = listOf(0)\n      list += 42 // new list is created, variable 'list' still contains only '0'\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test() {\n      val list = mutableListOf(0)\n      list += 42\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "DestructuringWrongName",
          "displayName": "Variable in destructuring declaration uses name of a wrong data class property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports entries of destructuring declarations that match the name of a different property of the destructured data class.\n</body>\n</html>\n"
        },
        {
          "shortName": "DelegationToVarProperty",
          "displayName": "Delegating to 'var' property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports interface delegation to a <code>var</code> property.\n<p>Only initial value of a property is used for delegation, any later assignments do not affect it.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Example(var text: CharSequence): CharSequence by text\n</code></pre>\n<p>A quick-fix is suggested to turn the property into an immutable one:</p>\n<pre><code>\n  class Example(val text: CharSequence): CharSequence by text\n</code></pre>\n<p>Alternative way, if you rely on mutability for some reason:</p>\n<pre><code>\n  class Example(text: CharSequence): CharSequence by text {\n      var text = text\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "DeferredResultUnused",
          "displayName": "'@Deferred' result is unused",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls with the <code>Deferred</code> result type in case if the return value is not used.\n<p>If the return value, nothing will wait until the function completes.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun calcEverythingAsync() = CompletableDeferred(42)\n\n  fun usage() {\n      calcEverythingAsync()\n  }\n</code></pre>\n<p>A quick-fix is suggested to introduce a variable with the <code>Deferred</code> initializer:</p>\n<pre><code>\n  fun calcEverythingAsync() = CompletableDeferred(42)\n\n  fun usage() {\n      val answer = calcEverythingAsync()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RecursivePropertyAccessor",
          "displayName": "Recursive property accessor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>\n    Reports recursive property accessor calls which can end up with a <code>StackOverflowError</code>.\n    Such calls are usually confused with backing field access.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  var counter: Int = 0\n      set(value) {\n          <b>counter</b> = if (value < 0) 0 else value\n      }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  var counter: Int = 0\n      set(value) {\n          <b>field</b> = if (value < 0) 0 else value\n      }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ConflictingExtensionProperty",
          "displayName": "Extension property conflicting with synthetic one",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports extension properties that conflict with synthetic ones automatically produced from Java <code>get</code> or <code>set</code> methods.\n<p>Such properties should be either removed or renamed to avoid breaking code by future changes in the compiler.</p>\n<p>A quick-fix is suggested to delete an extention property.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  val File.name: String\n      get() = getName()\n</code></pre>\n<p>A quick-fix is suggested to add the <code>@Deprecated</code> annotation:</p>\n<pre><code>\n  @Deprecated(\"Is replaced with automatic synthetic extension\", ReplaceWith(\"name\"), level = DeprecationLevel.HIDDEN)\n  val File.name: String\n      get() = getName()\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedUnaryOperator",
          "displayName": "Unused unary operator",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unary operators for number types on unused expressions.\n<p>Unary operators break previous expression if they are used without braces.\nAs a result, mathematical expressions spanning multi lines can be misleading.</p>\n<p>Example:</p>\n<pre><code>\n  fun main() {\n      val result = 1 + 2 * 3\n                  + 3              // &lt;== note that '+ 3' doesn't belong to the 'result' variable, it is unused\n      println(\"Result = $result\")  // The result is '7' and not '10' as it might be expected\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "KotlinConstantConditions",
          "displayName": "Constant conditions",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports conditions that are statically known to be constant</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConvertNaNEquality",
          "displayName": "Convert equality check with 'NaN' to 'isNaN' call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports an equality check with <code>Float.NaN</code> or <code>Double.NaN</code> that should be replaced with an <code>isNaN()</code> check.\n<p>\n    According to IEEE 754, equality check against NaN always returns <code>false</code>, even for <code>NaN == NaN</code>.\n    Therefore, such a check is likely to be a mistake.\n</p>\n<p>The provided quick-fix replaces comparison with <code>isNaN()</code> check that uses a different comparison technique and handles <code>NaN</code> values correctly.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun check(value: Double): Boolean {\n      return Double.NaN == value\n  }\n</code></pre>\n<p>After the fix is applied:</p>\n<pre><code>\n  fun check(value: Double): Boolean {\n      return value.isNaN()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "EmptyRange",
          "displayName": "Range with start greater than endInclusive is empty",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports ranges that are empty because the <b>start</b> value is greater than the <b>endInclusive</b> value.\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnNotNull",
          "displayName": "Useless call on not-null type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls on not-null receiver that make sense only for nullable receiver.\n<p>Several functions from the standard library such as <code>orEmpty()</code> or <code>isNullOrEmpty</code>\n    have sense only when they are called on receivers of nullable types. Otherwise, they can be omitted or simplified as the result will be the same.</p>\n<p><b>Remove redundant call</b> and <b>Change call to …</b>  quick-fixes can be used to amend the code automatically.</p>\n<p>Examples:</p>\n<pre><code>\n  fun test(s: String) {\n      val x = s.orEmpty() // quick-fix simplifies to 's'\n      val y = s.isNullOrEmpty() // quick-fix simplifies to 's.isEmpty()'\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ForEachParameterNotUsed",
          "displayName": "Iterated elements are not used in forEach",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports forEach loops with the iterable's values not being used.\n</body>\n</html>"
        },
        {
          "shortName": "SelfReferenceConstructorParameter",
          "displayName": "Constructor can never be complete",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports constructors with a non-null self-reference parameter.\n<p>Such constructors never instantiate a class.</p>\n<p>The quick-fix converts the parameter type to nullable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class SelfRef(val ref: SelfRef)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class SelfRef(val ref: SelfRef?)\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuspendFunctionOnCoroutineScope",
          "displayName": "Ambiguous coroutineContext due to CoroutineScope receiver of suspend function",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls and accesses of <code>CoroutineScope</code> extensions or members inside suspend functions with <code>CoroutineScope</code> receiver.\n<p>When a function is <code>suspend</code> and has <code>CoroutineScope</code> receiver,\n    it has ambiguous access to <code>CoroutineContext</code> via <code>kotlin.coroutines.coroutineContext</code> and via <code>CoroutineScope.coroutineContext</code>,\n    and two these contexts are different in general.</p>\n<p>\nTo improve this situation, one can wrap suspicious call inside <code>coroutineScope { ... }</code> or\nget rid of <code>CoroutineScope</code> function receiver.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CanSealedSubClassBeObject",
          "displayName": "Sealed sub-class without state and overridden equals",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports direct inheritors of <code>sealed</code> classes that have no state and no overridden <code>equals()</code>.\n<p>It's highly recommended to override <code>equals()</code> to provide comparison stability, or convert the <code>class</code> to an <code>object</code> to reach the same effect.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  sealed class Receiver {\n      class Everyone : Receiver()\n      class User(val id: Int) : Receiver()\n  }\n</code></pre>\n<p>A quick-fix is suggested to convert a <code>class</code> into an <code>object</code>:</p>\n<pre><code>\n  sealed class Receiver {\n      object Everyone : Receiver()\n      class User(val id: Int) : Receiver()\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EqualsOrHashCode",
          "displayName": "'equals()' and 'hashCode()' not paired",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports classes that override <b>equals()</b> but do not override <b>hashCode()</b>, or vice versa.\nIt also reports object declarations which override either <b>equals()</b> or <b>hashCode()</b>.\n<p>This can lead to undesired behaviour when a class is added to a <b>Collection</b></p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RecursiveEqualsCall",
          "displayName": "Recursive equals call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n    <p>Reports recursive <code>equals</code>(<code>==</code>) calls.</p>\n<p>\n    <code>==</code> (Kotlin's structural comparison) can be mistakenly interpreted as reference comparison by Java developers.\n    So the inspection reports such cases and suggests to replace <code>==</code> with <code>===</code> (Kotlin's reference comparison).\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class X {\n      override fun equals(other: Any?): Boolean {\n          if (<b>this == other</b>) return true\n          return false\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class X {\n      override fun equals(other: Any?): Boolean {\n          if (<b>this === other</b>) return true\n          return false\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ArrayInDataClass",
          "displayName": "Array property in data class",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties with an <code>Array</code> type in a <code>data</code> class without overridden <code>equals()</code> or <code>hashCode()</code>.\n<p>\n    Array parameters are compared by reference equality, which is likely an unexpected behavior.\n    Thus, it is strongly recommended to override <code>equals()</code> and <code>hashCode()</code> in such cases.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  data class Text(val lines: Array&lt;String&gt;)\n</code></pre>\n<p>A quick-fix is suggested to generate missing <code>equals()</code> and <code>hashCode()</code> implementations:</p>\n<pre><code>\n  data class Text(val lines: Array&lt;String&gt;) {\n      override fun equals(other: Any?): Boolean {\n          if (this === other) return true\n          if (javaClass != other?.javaClass) return false\n\n          other as Text\n\n          if (!lines.contentEquals(other.lines)) return false\n\n          return true\n      }\n\n      override fun hashCode(): Int {\n          return lines.contentHashCode()\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedDataClassCopyResult",
          "displayName": "Unused result of data class copy",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nThis inspection reports unused result of data class copy function call.\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousVarProperty",
          "displayName": "Suspicious 'var' property: its setter does not influence its getter result",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>var</code> properties with default setter and getter that do not reference backing field.\n<p>\nSuch properties do not affect calling its setter; therefore, it will be clearer to change such property to <code>val</code> and delete the initializer.\n</p>\n<p><b>Change to val and delete initializer</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  // This property always returns '1' and it doesn't important that the property is a 'var'\n  var foo: Int = 0\n      get() = 1\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SetterBackingFieldAssignment",
          "displayName": "Existing backing field without assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports property setters that don't update the backing field.\n<p>The quick-fix adds an assignment to the backing field.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Test {\n      var foo: Int = 1\n          set(value) {\n          }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Test {\n      var foo: Int = 1\n          set(value) {\n              field = value\n          }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousCallableReferenceInLambda",
          "displayName": "Suspicious callable reference used as lambda result",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a lambda expression with one callable reference because it is a common error to replace a lambda with a callable reference without changing curly braces to parentheses.\n<br /><br />\nExample:\n<pre><code>\n  listOf(1,2,3).map { it::toString }\n</code></pre>\nShould be turned into\n<pre><code>\n  listOf(1,2,3).map(Int::toString)\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "DataClassPrivateConstructor",
          "displayName": "Private data class constructor is exposed via the 'copy' method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a private primary constructor in data classes.\n<p>\n    <code>data</code> classes have a <code>copy()</code> factory method that can be used similarly to a constructor, so making\n    a constructor <code>private</code> does not provide enough safety.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  data class User private constructor(val name: String)\n</code></pre>\n<p>A quick-fix is suggested to make the constructor <code>public</code>:</p>\n<pre><code>\n  data class User(val name: String)\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "KotlinThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports instantiations of <code>Throwable</code> or its subclasses, when the created <code>Throwable</code>\nis never actually thrown.\n<p>The reported code indicates mistakes that are hard to catch in tests.</p>\n<p>\n    Also, this inspection reports method calls that return instances of <code>Throwable</code> or its subclasses,\n    when the resulting <code>Throwable</code> instance is not thrown.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun check(condition: Boolean) {\n      if (!condition) /* throw is missing here */ IllegalArgumentException(\"condition is not met\");\n  }\n\n  fun createError() = RuntimeException()\n\n  fun foo() {\n      /* throw is missing here */ createError()\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "LeakingThis",
          "displayName": "Leaking 'this' in constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unsafe operations with <code>this</code> during object construction including:\n\n<ul>\n  <li>Accessing a non-final property during class initialization: from a constructor or property initialization</li>\n  <li>Calling a non-final function during class initialization</li>\n  <li>Using <code>this</code> as a function argument in a constructor of a non-final class</li>\n</ul>\n\n<p>\n    If other classes inherit from the given class,\n    they may not be fully initialized at the moment when an unsafe operation is carried out.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>abstract class</b> Base {\n      <b>val</b> code = calculate()\n      <b>abstract fun</b> calculate(): Int\n  }\n\n  <b>class</b> Derived(<b>private val</b> x: Int) : Base() {\n      <b>override fun</b> calculate() = x\n  }\n\n  <b>fun</b> testIt() {\n      println(Derived(42).code) <i>// Expected: 42, actual: 0</i>\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinEqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>equals()</code> where the receiver and the argument are\nof incompatible primitive, enum, or string types.\n\n<p>While such a call might theoretically be useful, most likely it represents a bug.</p>\n<p><b>Example:</b></p>\n<pre><code>  5.equals(\"\");\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LateinitVarOverridesLateinitVar",
          "displayName": "lateinit var property overrides lateinit var property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>lateinit var</code> properties that override another <code>lateinit var</code> property.\n<p>\n    A subclass instance will have two fields for the single property, and the one from the superclass will remain effectively unused.</p>\n</body>\n</html>"
        },
        {
          "shortName": "KDocUnresolvedReference",
          "displayName": "Unresolved reference in KDoc",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references in KDoc comments.\n</body>\n</html>"
        },
        {
          "shortName": "ImplicitNullableNothingType",
          "displayName": "Implicit `Nothing?` type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports variables / functions with implicit <b>Nothing?</b> type.\n</body>\n</html>\n"
        },
        {
          "shortName": "SelfAssignment",
          "displayName": "Redundant assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments of a variable to itself.\n<p>The quick-fix removes the redundant assignment.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test() {\n      var bar = 1\n      bar = bar\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test() {\n      var bar = 1\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MainFunctionReturnUnit",
          "displayName": "Entry point function should return Unit",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports entry point functions with an incorrect return type (should be <code>Unit</code>).\n<p><b>Example:</b></p>\n<code>fun main() = \"Hello world!\"</code>\n</body>\n</html>\n"
        },
        {
          "shortName": "UselessCallOnCollection",
          "displayName": "Useless call on collection type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>filter…</code> calls from the standard library on already filtered collections.\n<p>Several functions from the standard library such as <code>filterNotNull()</code> or <code>filterIsInstance</code>\n    have sense only when they are called on receivers that have types distinct from the resulting one. Otherwise,\n    such calls can be omitted as the result will be the same.</p>\n<p><b>Remove redundant call</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun test(list: List&lt;String&gt;) {\n      val x = list.filterNotNull() // quick-fix simplifies to 'list'\n      val y = list.filterIsInstance&lt;String&gt;() // quick-fix simplifies to 'list'\n  }\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "MySQL",
      "inspections": [
        {
          "shortName": "MysqlLoadDataPathInspection",
          "displayName": "LOAD statement path",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "MySQL based",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports paths that start with the tilde character in LOAD statements.\n<p>Example (MySQL):</p>\n<pre><code>CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;</code></pre>\n<p>Instead of the tilde character, use a full path to the file.</p>\n</body>\n</html>"
        },
        {
          "shortName": "MysqlParsingInspection",
          "displayName": "Unsupported syntax in pre-8.0 versions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.database",
          "pluginVersion": "212.4746.2",
          "language": "MySQL based",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports invalid usages of UNION in queries.\n<p>The inspection works in MySQL versions that are earlier than 8.0.</p>\n<p>Example (MySQL):</p>\n<pre><code>\nSELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n</code></pre>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "RegExp",
      "inspections": [
        {
          "shortName": "RegExpRedundantEscape",
          "displayName": "Redundant character escape",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports character escapes that are replaceable with the unescaped character without a change in meaning.\nNote that inside the square brackets of a character class, many escapes are unnecessary that would be necessary outside of a character class.\n<p><b>Example:</b></p>\n<pre><code>\n  \\-\\;[\\.]\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  -;[.]\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRedundantNestedCharacterClass",
          "displayName": "Redundant nested character class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary nested character classes.\n<p><b>Example:</b></p>\n<pre><code>\n  [a-c[x-z]]\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  [a-cx-z]\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2020.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpSingleCharAlternation",
          "displayName": "Single character alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports single char alternation in a RegExp.\nIt is simpler to use a character class instead.\nThis may also provide better matching performance.\n<p><b>Example:</b></p>\n<pre><code>\n  a|b|c|d\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  [abcd]\n</code></pre>\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEmptyAlternationBranch",
          "displayName": "Empty branch in alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty branches in a RegExp alternation.\nAn empty branch will only match the empty string, and in most cases that is not what is desired.\nThis inspection will not report a single empty branch at the start or the end of an alternation.\n<p><b>Example:</b></p>\n<pre><code>\n  (alpha||bravo)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  (alpha|bravo)\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpDuplicateAlternationBranch",
          "displayName": "Duplicate branch in alternation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate branches in a RegExp alternation.\nDuplicate branches slow down matching and obscure the intent of the expression.\n<p><b>Example:</b></p>\n<pre><code>\n  (alpha|bravo|charlie|alpha)\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  (alpha|bravo|charlie)\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpDuplicateCharacterInClass",
          "displayName": "Duplicate character in character class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports duplicate characters inside a RegExp character class.\nDuplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n<p><b>Example:</b></p>\n<pre><code>\n  [aabc]\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  [abc]\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RegExpUnexpectedAnchor",
          "displayName": "Begin or end anchor in unexpected position",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>^</code> or <code>\\A</code> anchors not at the beginning of the pattern and\n<code>$</code>, <code>\\Z</code> or <code>\\z</code> anchors not at the end of the pattern.\nIn the wrong position these RegExp anchors prevent the pattern from matching anything.\nIn case of the <code>^</code> and <code>$</code> anchors, most likely the literal character was meant and the escape forgotten.\n<p><b>Example:</b></p>\n<pre><code>\n  (Price $10)\n</code></pre>\n<!-- tooltip end -->\n<p>\n<small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpEscapedMetaCharacter",
          "displayName": "Escaped meta character",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the escaped meta characters.\nSome RegExp coding styles specify that meta characters should be placed inside a character class,\nto make the regular expression easier to understand.\nThis inspection does not warn about the meta character <code>[</code>, <code>]</code> and <code>^</code>,\nbecause those would need additional escaping inside a character class.\n<p><b>Example:</b></p>\n<pre><code>\n  \\d+\\.\\d+\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  \\d+[.]\\d+\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpOctalEscape",
          "displayName": "Octal escape",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports octal escapes, which are easily confused with back references.\nUse hexadecimal escapes to avoid confusion.\n<p><b>Example:</b></p>\n<pre><code>\n  \\07\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  \\x07\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpUnnecessaryNonCapturingGroup",
          "displayName": "Unnecessary non-capturing group",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unnecessary non-capturing groups, which have no influence on the match result.\n<p><b>Example:</b></p>\n<pre><code>\n  Everybody be cool, (?:this) is a robbery!\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Everybody be cool, this is a robbery!\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2021.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpRepeatedSpace",
          "displayName": "Consecutive spaces",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports multiple consecutive spaces in a RegExp.\nBecause spaces are not visible by default, it can be hard to see how many spaces are required.\nThe RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n<p><b>Example:</b></p>\n<pre><code>\n  (     )\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  ( {5})\n</code></pre>\n<!-- tooltip end -->\n<p>\n<small>New in 2017.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "RegExpAnonymousGroup",
          "displayName": "Anonymous capturing group or numeric back reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "language": "RegExp",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports anonymous capturing groups and numeric back references in a RegExp.\nThese are only reported when the RegExp dialect supports named group and named group references.\nNamed groups and named back references improve code readability and are recommended to use instead.\nWhen a capture is not needed, matching can be more performant and use less memory by using a non-capturing group,\ni.e. <code>(?:xxx)</code> instead of <code>(xxx)</code>.\n<p><b>Example:</b></p>\n<pre><code>\n  (\\d\\d\\d\\d)\\1\n</code></pre>\n<p>A better regex pattern could look like this:</p>\n<pre><code>\n  (?&lt;quad>\\d\\d\\d\\d)\\k&lt;quad>\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Visibility",
      "inspections": [
        {
          "shortName": "MethodOverloadsParentMethod",
          "displayName": "Method overloads method of superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports instance methods having the same name and the same number of parameters as a method in a superclass,\nand where at least one of the parameters is not of the same type but of a compatible type.\n<p>\n  In this case, the method in a subclass will be overloading the method from the superclass\n  instead of overriding it. If it is unintended, it may result in latent bugs.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Foo {\n    void foo(int x) {}\n  }\n\n  public class Bar extends Foo {\n    void foo(Number x) {} // Method 'foo()' overloads a compatible method of a superclass,\n                          // when overriding might have been intended\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to choose whether the inspection should also report cases where parameter types are not compatible.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AnonymousClassVariableHidesContainingMethodVariable",
          "displayName": "Anonymous class variable hides variable in containing method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields in an anonymous class that are named identically to local variables or parameters of\nthe containing method or lambda expression.\n<p>\n  As a result of such naming, you may accidentally use the anonymous class field where\n  the identically named variable or parameter from the containing method is intended.\n</p>\n<p>A quick-fix is suggested to rename the field.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Test {\n    public Test(String value) {\n      Object foo = new Object() {\n        private String value = \"TEST\";\n        public void foo() {\n          System.out.println(value); //the field is accessed, not the parameter\n        }\n      };\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "LocalVariableHidingMemberVariable",
          "displayName": "Local variable hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports local variables named identically to visible fields of the containing classes.\nAs a result of such naming, you may accidentally use the variable where the identically named field is intended.\n<p>A quick-fix is suggested to rename the variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Foo {\n    public Object foo;\n\n    void bar() {\n      Object o = new Object() {\n        void baz() {\n          Object foo; // Local variable 'foo' hides field in class 'Foo'\n        }\n      };\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  You can configure the following options for this inspection:\n</p>\n<ol>\n  <li><strong>Ignore non-accessible fields</strong> - ignore local variables named identically to superclass fields\n    that are not visible (for example, because they are private).</li>\n  <li><strong>Ignore local variables in a static context hiding non-static fields</strong> -\n    for example when the local variable is inside a static method or inside a method which is inside a static inner class.\n  </li>\n</ol>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesInaccessibleMethodOfSuper",
          "displayName": "Method overrides inaccessible method of superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods with the same signature as an inaccessible method of a superclass,\nfor example, a private method, or a package-private method of a superclass in another package.\n<p>\n  Such method names may be confusing because the method in the subclass may look like an override when in fact\n  it hides the inaccessible method of the superclass.\n  Moreover, if the visibility of the method in the superclass changes later,\n  it may either silently change the semantics of the subclass or cause a compilation error.\n</p>\n<p>A quick-fix is suggested to rename the method.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class Super {\n    private void test() {\n    }\n  }\n\n  public class Sub extends Super {\n    void test() { // making 'Super.test()' public causes a compilation error\n                  // making 'Super.test()' package-private makes 'Sub.test()' an override\n    }\n  }</code></pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousMethodCall",
          "displayName": "Call to inherited method looks like call to local method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to any super method from an inner or anonymous class\nif a method with the same signature exists in the containing class.\n<p>\n  In this case it's easy to miss the super method and suggest that the call\n  is referenced to the method in the containing class.\n  To clarify the intent it is recommended to add an explicit\n  <code>super</code> qualifier to the method call.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        ambiguous(); //warning\n      }\n    }\n  }\n  </code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Parent {\n    void ambiguous(){}\n  }\n\n  class Example {\n    void ambiguous(){}\n\n    class Inner extends Parent {\n      void example(){\n        super.ambiguous();\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PublicConstructorInNonPublicClass",
          "displayName": "'public' constructor in non-public class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports all <code>public</code> constructors in non-<code>public</code> classes.\n<p>Usually, there is no reason for creating a <code>public</code> constructor in a class with a lower access level.</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Java9ModuleExportsPackageToItself",
          "displayName": "Module exports/opens package to itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a package that is exported to or opened in the same Java 9 module in which it is already defined.\nThe quick-fix removes such directives from <code>module-info.java</code>.\n<p>Example:</p>\n<pre><code>\n  module com.mycomp {\n    exports com.mycomp.main to com.mycomp;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  module main {\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 9 or higher.</p>\n</body>\n</html>"
        },
        {
          "shortName": "LambdaParameterHidingMemberVariable",
          "displayName": "Lambda parameter hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports lambda parameters named identically to visible fields of the containing classes.\nAs a result of such naming, you may accidentally use the lambda parameter where the identically named field is intended.\n<p>A quick-fix is suggested to rename the lambda parameter.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class MyClass {\n    public Object foo;\n\n    void sort(List&lt;Integer&gt; list) {\n      list.sort((foo, bar) -> foo - bar);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to choose whether to ignore fields that are not visible from the lambda expression.\n  For example, private fields of a superclass.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "TypeParameterHidesVisibleType",
          "displayName": "Type parameter hides visible type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports type parameters that have the same names as the visible types in the current scope. Such parameter names may be confusing.\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n  abstract class MyList&lt;T&gt; extends AbstractList&lt;T&gt; {\n    private List&lt;T&gt; elements;\n    // type parameter 'T' hides type parameter 'T'\n    public &lt;T&gt; T[] toArray(T[] array) {\n        return elements.toArray(array);\n    }\n}\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassVariableHidesOuterClassVariable",
          "displayName": "Inner class field hides outer class field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports inner class fields named identically to visible fields of the containing classes.\nAs a result of such naming, you may accidentally use the field from the inner class\nwhere the identically named field of a containing class is intended.\n<p>A quick-fix is suggested to rename the inner class field.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Outer {\n    private String name;\n\n    class Inner {\n      private String name;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the option to choose whether this inspection should report all name clashes,\n  or only clashes with fields that are visible from the inner class.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ParameterHidingMemberVariable",
          "displayName": "Parameter hides field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports method parameters named identically to visible fields of the containing classes.\nAs a result of such naming, you may accidentally use the parameter where the identically named field is intended.\n<p>A quick-fix is suggested to rename the parameter.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Main {\n    private String value;\n\n    public Main(String value) {\n      value = value.toUpperCase();\n    }\n  }\n  </code></pre>\n<!-- tooltip end -->\n<p>\n  You can configure the following options for this inspection:\n</p>\n<ol>\n  <li>\n    <strong>Ignore for property setters</strong> - ignore parameters of simple setters.\n  </li>\n  <li>\n    <strong>Ignore superclass fields not visible from subclass</strong> - ignore <code>private</code>\n    fields in a superclass, which are not visible from the method.\n  </li>\n  <li>\n    <strong>Ignore for constructors</strong> - ignore parameters of constructors.\n  </li>\n  <li>\n    <strong>Ignore for abstract methods</strong> - ignore parameters of abstract methods.\n  </li>\n  <li>\n    <strong>Ignore for static method parameters hiding instance fields</strong> - ignore parameters\n    of <code>static</code> methods hiding an instance field and to ignore parameters of instance methods in static inner\n    classes hiding an instance field of an outer class. While not strictly hiding, such parameters can still be confusing.\n  </li>\n</ol>\n\n</body>\n</html>"
        },
        {
          "shortName": "Java9UndeclaredServiceUsage",
          "displayName": "Usage of service not declared in 'module-info'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports situations in which a service is loaded with <code>java.util.ServiceLoader</code> but it isn't declared with the\n<code>uses</code> clause in the <code>module-info.java</code> file and suggests inserting it.\n<!-- tooltip end -->\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "FieldHidesSuperclassField",
          "displayName": "Field name hides field in superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports fields in a derived class that are named identically to visible fields of base classes.\nJava fields cannot be overridden in derived classes,\nso the field in the derived class will hide the field from the base class.\n<p>\n  As a result of such naming, you may accidentally use the field of the derived class\n  where the identically named field of a base class is intended.\n</p>\n<p>A quick-fix is suggested to rename the field in the derived class.</p>\n<p><b>Example:</b></p>\n<pre><code>class Parent {\n  Parent parent;\n}\nclass Child extends Parent {\n  Child parent;\n}\n</code></pre>\n<!-- tooltip end -->\n<p>\n  You can configure the following options for this inspection:\n</p>\n<ol>\n  <li>\n    <strong>Ignore non-accessible fields</strong> - indicates whether this inspection should report all name clashes,\n    or only clashes with fields which are visible from the subclass.\n  </li>\n  <li>\n    <strong>Ignore static fields hiding static fields</strong> - ignore <code>static</code> fields\n    which hide <code>static</code> fields in base classes.\n  </li>\n</ol>\n\n</body>\n</html>"
        },
        {
          "shortName": "AmbiguousFieldAccess",
          "displayName": "Access of inherited field looks like access of element in surrounding code",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports ambiguous access to a superclass field in an anonymous class,\nwhere a local variable, parameter, or field with the same name is available in the surrounding code.\n<p>\n  In this case it may seem that an element from the surrounding code is accessed,\n  when in fact it is an access to a field from the superclass that the anonymous class extends.\n</p>\n<p>\n  To clarify the intent of the code, it is recommended to add an explicit\n  <code>super</code> qualifier to the field access.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n    class First {\n      protected String test;\n    }\n    class Second {\n      void foo(String test) {\n        new First() {\n          {\n            System.out.println(test); // the field is accessed, not the parameter\n          }\n        };\n      }\n    }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n    class First {\n      protected String test;\n    }\n    class Second {\n      void foo(String test) {\n        new First() {\n          {\n            System.out.println(super.test);\n          }\n        };\n      }\n    }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ClassEscapesItsScope",
          "displayName": "Non-accessible 'class' is exposed",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of classes in a field or method signature when a class in a signature is less visible than the member itself.\nWhile legal Java, such members are useless outside of the visibility scope.\n<p>Example:</p>\n<ul>\n  <li><code>public</code> method which returns a <code>private</code> inner <code>class</code>.</li>\n  <li><code>protected</code> field whose type is a package-local <code>class</code>.</li>\n</ul>\n<p>\nIn Java 9, a module may hide some of its classes by excluding their packages from export.\nSo, if the signature of exported API contains a non-exported class, such an API is useless outside of the module.\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Module's API exposes not exported classes (Java 9+)</b> option to report about the module API\n    that exposes unexported classes.<br>Note that the option works if the language level of the project or module is 9 or higher.</li>\n  <li>Use the <b>Public API exposes non-accessible classes</b> option to report about a public API\n    that exposes non-accessible classes.</li>\n  <li>Use the <b>Package-local API exposes private classes</b> option to report about package-local API\n    that exposes <code>private</code> classes.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "MethodOverridesStaticMethod",
          "displayName": "Method tries to override static method of superclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>static</code> methods with a signature identical to a <code>static</code> method of a superclass.\nSuch a method may look like an override when in fact it hides the method from the superclass because\n<code>static</code> methods in Java cannot be overridden.\n<p><b>Example:</b></p>\n<pre>\n  class Parent {\n    static void method(){}\n  }\n\n  class Example extends Parent {\n    static void method(){} //warning\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Java 15",
      "inspections": [
        {
          "shortName": "TextBlockMigration",
          "displayName": "Text block can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>String</code> literals and suggests replacing them with text blocks.\n<p>Requirements:</p>\n<ul>\n  <li><code>\\n</code> occurs two or more times.</li>\n  <li>Text blocks are not concatenated.</li>\n</ul>\n<p>\nUse the <b>Apply to single string literals</b> option to suggest the fix for single literals containing line breaks.\n<p>\n<p><b>Example:</b></p>\n<pre><code>\n  String html = \"&lt;html&gt;\\n\" +\n                \"    &lt;body&gt;\\n\" +\n                \"        &lt;p&gt;Hello, world&lt;/p&gt;\\n\" +\n                \"    &lt;/body&gt;\\n\" +\n                \"&lt;/html&gt;\\n\";\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  String html = \"\"\"\n                &lt;html&gt;\n                    &lt;body&gt;\n                        &lt;p&gt;Hello, world&lt;/p&gt;\n                    &lt;/body&gt;\n                &lt;/html&gt;\n                \"\"\";\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 15 or higher.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassCanBeRecord",
          "displayName": "Class can be a record",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nSuggests replacing classes with records.\n<p>The inspection can be useful if you need to focus on modeling immutable data rather than extensible behavior.\n  Automatic implementation of data-driven methods, such as equals and accessors, helps to get rid of boilerplate.</p>\n<p>\n  Note that not every class can be a record. Here are some of the restrictions:\n</p>\n<ul>\n  <li>A class must contain no inheritors and must be a top-level class.</li>\n  <li>All the non-static fields in class must be final.</li>\n  <li>Class must contain no instance initializers, generic constructors, nor native methods.</li>\n</ul>\n<p>To get a full list of the restrictions, refer to the\n  <a href=\"https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html\">Oracle documentation</a>.</p>\n<!-- tooltip end -->\n<p>Example:</p>\n<pre><code>\n  class Point {\n    private final double x;\n    private final double y;\n\n    Point(double x, double y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    double getX() {\n      return x;\n    }\n\n    double getY() {\n      return y;\n    }\n  }\n</code></pre>\n<p>This record will be converted to:</p>\n<pre><code>\n  record Point(int x, int y) {\n  }\n</code></pre>\n<p>This inspection only reports if the language level of the project or module is 14 preview or higher.</p>\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentTextBlockIndent",
          "displayName": "Inconsistent whitespace indentation in text block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports text blocks that are indented using both spaces and tabs.\n<p>Such cases produce unexpected results since spaces and tabs are treated equally during text block processing.</p>\n<p>In the following example, spaces and tabs are visualized as <code>·</code> and <code>␉</code> respectively, and a tab is equal to 4 spaces in the editor.</p>\n<p><b>Example:</b></p>\n<pre><code>\nString colors = \"\"\"\n········red\n␉   ␉   green\n········blue\"\"\";\n</code></pre>\n\n<p>After printing such string, the result will be:</p>\n<pre><code>\nred\n······green\nblue\n</code></pre>\n<p>After the compiler removes 2 spaces or tabs from the beginning of each line, the lines end up with extra whitespaces at the beginning.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 15 or higher.</p>\n<p><small>New in 2021.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TrailingWhitespacesInTextBlock",
          "displayName": "Trailing whitespaces in text block",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports text blocks with trailing whitespaces.\n<p>Trailing whitespaces are considered incidental and stripped away by the Java compiler.</p>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 15 or higher.</p>\n<p><small>New in 2021.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "PatternVariableCanBeUsed",
          "displayName": "Pattern variable can be used",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variable declarations that can be replaced with pattern variables, which are usually more compact.\n<p><b>Example:</b></p>\n<pre><code>\n  if (obj instanceof String) {\n    String str = (String) obj;\n    System.out.println(str);\n  }\n</code></pre>\n<p>Can be replaced with:</p>\n<pre><code>\n  if (obj instanceof String str) {\n    System.out.println(str);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the language level of the project or module is 15 (Preview) or higher</p>\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TextBlockBackwardMigration",
          "displayName": "Text block can be replaced with regular string literal",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports text blocks that can be replaced with regular string literals.\n<p>Occurrences of such text blocks may appear as results of migrating the code back to a Java version earlier than Java 15.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  Object obj = engine.eval(\"\"\"\n                           function hello() {\n                             print('\"Hello, world\"');\n                           }\n\n                           hello();\n                           \"\"\");\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  Object obj = engine.eval(\"function hello() {\\n\" +\n                           \"  print('\\\"Hello, world\\\"');\\n\" +\n                           \"}\\n\" +\n                           \"\\n\" +\n                           \"hello();\\n\");\n</code></pre>\n<!-- tooltip end -->\n<p>This inspection only reports if the configured language level is 15 or higher.</p>\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Error handling",
      "inspections": [
        {
          "shortName": "PhpUnhandledExceptionInspection",
          "displayName": "Unhandled exception",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the exceptions that are neither enclosed in a <code>try-catch</code> block nor documented via the <code>@throws</code> tag.\n</body>\n</html>"
        },
        {
          "shortName": "PhpRedundantCatchClauseInspection",
          "displayName": "Redundant catch clause",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the <code>catch</code> clauses with exceptions that are never thrown from the corresponding <code>try</code> block.\n</body>\n</html>"
        },
        {
          "shortName": "PhpWrongCatchClausesOrderInspection",
          "displayName": "Wrong catch clauses order",
          "defaultSeverity": "WARNING",
          "pluginId": "com.jetbrains.php",
          "pluginVersion": "212.4746.2",
          "language": "PHP",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the exceptions that are already caught by a preceding exception and the exceptions that are caught twice.\n<p>\n  The <code>catch</code> clauses must be ordered from more specific to more generic ones. Otherwise, some exceptions may not be caught by the most specific handler.\n</p>\n<p>\n  See <a href=\"http://www.php.net/manual/en/language.exceptions.php\">Exceptions (php.net)</a> for details.\n</p>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "JUnit",
      "inspections": [
        {
          "shortName": "Junit5MalformedParameterized",
          "displayName": "Malformed Parameterized inspection",
          "defaultSeverity": "WARNING",
          "pluginId": "JUnit",
          "pluginVersion": "212.4746.2",
          "language": "UAST",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports parameterized tests that have malformed sources:</p>\n<ul>\n  <li><code>MethodSource</code> has an unknown target or the method is not static, <code>no-arg</code>.</li>\n  <li><code>ValueSource</code> and <code>EnumSource</code> types cannot be converted to method parameters.</li>\n  <li>No sources are defined.</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n  class Test {\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    void foo(String param) {}\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Test {\n    private static Stream&lt;Arguments&gt; parameters() {\n        return Stream.empty();\n    }\n\n    @MethodSource(\"parameters\")\n    @ParameterizedTest\n    void foo(String param) {}\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "General",
      "inspections": [
        {
          "shortName": "DuplicatedCode",
          "displayName": "Duplicated code fragment",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "Reports duplicated blocks of code from the selected scope: the same file, same module, dependent modules, or the entire project.<!-- tooltip end --> The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. When possible, the inspection provides a quick-fix to extract a method from the duplicated code.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in <a href=\"settings://duplicates.index\"> File | Settings | Editor | Duplicates</a>."
        },
        {
          "shortName": "LongLine",
          "displayName": "The line is longer than allowed by code style",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports lines that are longer than the <b>right margin</b> parameter specified in the <b>Code Style</b> settings.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSuppression",
          "displayName": "Redundant suppression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n<ul>\n  <li><code>@SuppressWarning</code> annotation, or</li>\n  <li><code>// noinspection</code> line comment, or</li>\n  <li><code>/** noinspection */</code> JavaDoc comment</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n<b><font color=\"#000080\">public class</font></b> C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n <b><font color=\"#000080\">private boolean</font></b> CONST = <b><font color=\"#000080\">true</font></b>;\n <b><font color=\"#000080\">void</font></b> f() {\n    CONST = <b><font color=\"#000080\">false</font></b>;\n  }\n}\n</code></pre>\n\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SyntaxError",
          "displayName": "Syntax error",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports syntax errors that have been found in the result of a batch code inspection run.\n</body>\n</html>"
        },
        {
          "shortName": "InjectedReferences",
          "displayName": "Injected references",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.intelliLang",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports unresolved references injected by\n<a href=\"https://www.jetbrains.com/help/idea/using-language-injections.html\">Language Injections</a>.\n<p>Example:</p>\n<pre>\n    @Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "JavaAnnotator",
          "displayName": "Java annotator",
          "defaultSeverity": "ERROR",
          "pluginId": "org.intellij.plugins.staticAnalysis",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nAllows viewing the problems reported by the Java annotator: compilation problems, unresolved by IDEA references, and so on.\n</body>\n</html>"
        },
        {
          "shortName": "DefaultFileTemplate",
          "displayName": "Default File Template Usage",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of the default file template for File Header and suggests changing it.\n</body>\n</html>"
        },
        {
          "shortName": "TodoComment",
          "displayName": "TODO comment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <b>TODO</b> comments in your code.\n<p>You can configure the format for <b>TODO</b> comments in <a href=\"settings://preferences.toDoOptions\">Settings | Editor | TODO</a>. Since\nsyntax highlighting for <b>TODO</b> comments is already provided, this inspection is efficient if you run it in the batch mode.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ProblematicWhitespace",
          "displayName": "Problematic whitespace",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the following problems:\n<ul>\n  <li>Tabs used for indentation when the code style is configured to use only spaces.</li>\n  <li>Spaces used for indentation when the code style is configured to use only tabs.</li>\n  <li>Spaces used for indentation and tabs used for alignment when the code\n    style is configured to use smart tabs.</li>\n</ul>\n\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "Annotator",
          "displayName": "Annotator",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": true,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems that are found by language annotators in the result of a batch code inspection run.\n</body>\n</html>"
        },
        {
          "shortName": "InconsistentLineSeparators",
          "displayName": "Inconsistent line separators",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij",
          "pluginVersion": "212.4746.2",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n  Reports files with line separators different from the ones that are specified in the project's settings.\n  <p>For example, the inspection will be triggered if you set the line separator to <code>\\n</code> in <b>Settings | Editor | Code Style | Line separator</b>,\n    while the file you are editing uses <code>\\r\\n</code> as a line separator.</p>\n\n  <p>The inspection also warns you about mixed line separators within a file.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Encapsulation",
      "inspections": [
        {
          "shortName": "PublicField",
          "displayName": "'public' field",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>public</code> fields.\nConstants (fields marked with <code>static</code> and <code>final</code>) are not reported.\n<p><b>Example:</b></p>\n<pre><code>\n  class Main {\n    public String name;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Main {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore If Annotated By</b> list to specify annotations to ignore. The inspection will ignore fields with\n    any of these annotations.</li>\n  <li>Use the <b>Ignore 'public final' fields of an enum</b> option to ignore <code>public final</code> fields\n    of the <code>enum</code> type.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PackageVisibleInnerClass",
          "displayName": "Package-visible nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a nested class that is declared without any access modifier (also known as package-private).\n<p><b>Example:</b></p>\n<pre><code>\n public class Outer {\n    static class Nested {}  // warning\n    class Inner {}          // warning\n    enum Mode {}            // warning depends on the setting\n    interface I {}          // warning depends on the setting\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore package-visible inner enums</b> option to ignore package-private inner enums.</li>\n  <li>Use the <b>Ignore package-visible inner interfaces</b> option to ignore package-private inner interfaces.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PublicInnerClass",
          "displayName": "'public' nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>public</code> nested class.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Outer {\n    public static class Nested {} // warning\n    public class Inner {}         // warning\n    public enum Mode {}           // warning depends on the setting\n    public interface I {}         // warning depends on the setting\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore 'public' inner enums</b> option to ignore <code>public</code> inner enums.</li>\n  <li>Use the <b>Ignore 'public' inner interfaces</b> option to ignore <code>public</code> inner interfaces.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "PackageVisibleField",
          "displayName": "Package-visible field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an instance variable that is declared without any access modifier (also known as package-private).\n<p>Constants (that is, variables marked <code>static</code> or <code>final</code>) are not reported.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class A {\n    Object object;             // warning\n    final static int MODE = 0; // constant, no warning\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedInnerClass",
          "displayName": "Protected nested class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>protected</code> nested class.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Outer {\n    protected static class Nested {} // warning\n    protected class Inner {}         // warning\n    protected enum Mode {}           // warning depends on the setting\n    protected interface I {}         // warning depends on the setting\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore 'protected' inner enums</b> option to ignore <code>protected</code> inner enums.</li>\n  <li>Use the <b>Ignore 'protected' inner interfaces</b> option to ignore <code>protected</code> inner interfaces.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "ProtectedField",
          "displayName": "Protected field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports a <code>protected</code> instance variable.\n<p>Constants (that is, variables marked <code>static</code> or <code>final</code>) are not reported.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  public class A {\n    protected Object object;              // warning\n    protected final static int MODE = 0;  // constant, no warning\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfAnotherObjectsPrivateField",
          "displayName": "Accessing a non-public field of another object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an object that uses a <code>private</code> or <code>protected</code> field of another object.\n<p>Java allows using such fields for objects of the same class as the current object but\n  some coding styles discourage this use. Additionally, such direct access to <code>private</code> fields\n  may fail in component-oriented architectures, such as Spring or Hibernate, that expect all access\n  to other objects to be through method calls so the framework can mediate access\n  using proxies.</p>\n<p><b>Example:</b></p>\n<pre><code>\npublic class Base {\n    protected int bar;\n\n    class Inside {\n        int f(Base base) {\n            return base.bar;  // warning: direct access to non-public field\n        }\n    }\n}\n\nclass SomewhereElse {\n    void m(Base base) {\n        base.bar = 1; // warning: direct access to non-public field\n    }\n}\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Ignore accesses from the same class</b> option to ignore access from the same class and only report access\n    from inner or outer classes.\n    <p>To ignore access from inner classes as well, use the nested <b>Ignore accesses from inner classes</b>.</p>\n  </li>\n  <li>Use the <b>Ignore accesses from 'equals()' method</b> to ignore access from an <code>equals()</code> method.</li>\n</ul>\n</body>\n</html>"
        },
        {
          "shortName": "AssignmentOrReturnOfFieldWithMutableType",
          "displayName": "Assignment or return of field with mutable type",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports an attempt to return or assign an array or a <code>Collection</code>, <code>Date</code>, <code>Map</code>,\n<code>Calendar</code>, etc. field from a method parameter.\n<p>Because such types are mutable, this construct may\n  result in unexpected modifications of an object's state from outside the owning class. Although this construct may be useful for\n  performance reasons, it is inherently prone to bugs.</p>\n<p>The following mutable types are reported:</p>\n<ul>\n  <li><code>java.util.Date</code></li>\n  <li><code>java.util.Calendar</code></li>\n  <li><code>java.util.Collection</code></li>\n  <li><code>java.util.Map</code></li>\n  <li><code>com.google.common.collect.Multimap</code></li>\n  <li><code>com.google.common.collect.Table</code></li>\n</ul>\n<p>The quick-fix adds a call to the field's <code>.clone()</code> method.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Log {\n    String[] messages;\n    ...\n\n    String[] getMessages() {\n      return messages; // warning: Return of String[] field 'messages'\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Log {\n    String[] messages;\n    ...\n\n    String[] getMessages() {\n      return messages.clone();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>Use the <b>Ignore assignments in and returns from private methods</b> option to ignore assignments and returns in <code>private</code> methods.\n\n  <!--<p><small>New in 2017.3</small>-->\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Other problems",
      "inspections": [
        {
          "shortName": "KDocMissingDocumentation",
          "displayName": "Missing KDoc comments for public declarations",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports public declarations that do not have KDoc comments.\n</body>\n</html>"
        },
        {
          "shortName": "DeprecatedCallableAddReplaceWith",
          "displayName": "@Deprecated annotation without 'replaceWith' argument",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports deprecated functions and properties that do not have a <code>kotlin.ReplaceWith</code> argument in its\n<code>kotlin.deprecated</code> annotation and there is a suggestion to add one based on their body.\n<p>\n    Kotlin allows to provide a automatized replacement for deprecated declarations by providing a <code>replaceWith</code> argument.\n    It is recommended to provide it so users will be able to fix deprecation issues in their code easier.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  @Deprecated(\"Use refined() instead.\")\n  fun deprecated() = refined()\n\n  fun refined() = 42\n</code></pre>\n<p>A quick-fix is suggested to add a missing <code>ReplaceWith()</code> argument:</p>\n<pre><code>\n  @Deprecated(\"Use refined() instead.\", ReplaceWith(\"refined()\"))\n  fun deprecated() = refined()\n\n  fun refined() = 42\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "OverridingDeprecatedMember",
          "displayName": "Overriding deprecated member",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations that inherit from deprecated members.\n</body>\n</html>\n"
        },
        {
          "shortName": "MigrateDiagnosticSuppression",
          "displayName": "Diagnostic name should be replaced",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports suppressions with old diagnostic names, for example <code>@Suppress(\"HEADER_WITHOUT_IMPLEMENTATION\")</code>.\n<p>\n    Some of diagnostics from Kotlin 1.2 and earlier are now obsolete, making such suppressions redundant.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceWithEnumMap",
          "displayName": "'HashMap' can be replaced with 'EnumMap'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>hashMapOf</code> function or <code>HashMap</code> constructor calls that can be replaced with an <code>EnumMap</code> constructor call.\n<p>Using <code>EnumMap</code> constructor makes your code simpler.</p>\n<p>The quick-fix replaces the function call with the <code>EnumMap</code> constructor call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  enum class E {\n      A, B\n  }\n\n  fun getMap(): Map&lt;E, String&gt; = hashMapOf()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  enum class E {\n      A, B\n  }\n\n  fun getMap(): Map&lt;E, String&gt; = EnumMap(E::class.java)\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "PublicApiImplicitType",
          "displayName": "Public API declaration with implicit return type",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\n<p>\n    Reports <code>public</code> and <code>protected</code> functions and properties that have an implicit return type.\n    For API stability reasons, it's recommended to specify such types explicitly.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun publicFunctionWhichAbusesTypeInference() =\n      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun publicFunctionWhichAbusesTypeInference(): <b>Api</b> =\n      otherFunctionWithNotObviousReturnType() ?: yetAnotherFunctionWithNotObviousReturnType()\n</code></pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Jupyter",
      "inspections": [
        {
          "shortName": "JupyterPackageInspection",
          "displayName": "The 'jupyter' package is not installed",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Jupyter",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when the <code>jupyter</code> package is not installed for the selected\n  Python interpreter. Without a properly installed <code>jupyter</code> package, you cannot\n  execute Jupyter notebooks.</p>\n<p>Click the corresponding link on the warning banner to install the missing\n  package. You can also install the package in the Project <b>Settings/Preferences</b> or in the\n  <b>Python Packages</b> tool window.</p>\n<p>See <a href=\"https://www.jetbrains.com/help/pycharm/installing-uninstalling-and-upgrading-packages.html\">Installing Python package</a> for more details.</p>\n</body>\n</html>"
        },
        {
          "shortName": "JupyterKernelInspection",
          "displayName": "Notebook kernel doesn't match the Python interpreter",
          "defaultSeverity": "WARNING",
          "pluginId": "Pythonid",
          "pluginVersion": "212.4746.2",
          "language": "Jupyter",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports cases when the Python interpreter is not configured as a notebook kernel.\n  This inspection prevents discrepancies between Code Insight and runtime behavior of the\n  Jupyter notebook code cells.</p>\n<p>If you see the following warning, the kernel of the newly configured server doesn't match your current Python interpreter.\n  For example, it might have a different set of the installed packages.</p>\n<p>You can register your Python interpreter by clicking the corresponding\n  link on the warning banner. After that, you can see the interpreter in the list of the configured server kernels.</p>\n<p>See <a href=\"https://www.jetbrains.com/help/pycharm/configuring-jupyter-notebook.html\">Manage Jupyter notebook servers</a> for more details.</p>\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "GPath",
      "inspections": [
        {
          "shortName": "GroovyMapPutCanBeKeyedAccess",
          "displayName": "Call to Map.put can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.util.Map.put()</code> methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef map = [\"foo\": \"bar\"]\nmap.put(\"foo\", \"baz\") // map.put(\"foo\", \"baz\") could be replaced with map[\"foo\"] = \"baz\"\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\ndef map = [\"foo\": \"bar\"]\nmap[\"foo\"] = \"baz\"\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyMapGetCanBeKeyedAccess",
          "displayName": "Call to Map.get can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.util.Map.get()</code> methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef map = [\"foo\": \"bar\"]\ndef str = map.get(\"foo\") // map.get(\"foo\") could be replaced with map[\"foo\"]\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\ndef map = [\"foo\": \"bar\"]\ndef str = map[\"foo\"]\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyListGetCanBeKeyedAccess",
          "displayName": "Call to List.get can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.util.List.get()</code> methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef list = [\"foo\"]\ndef str = list.get(0) // list.get(0) could be replaced with list[0]\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\ndef list = [\"foo\"]\ndef str = list[0]\n</code>\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "GroovyListSetCanBeKeyedAccess",
          "displayName": "Call to List.set can be keyed access",
          "defaultSeverity": "WARNING",
          "pluginId": "org.intellij.groovy",
          "pluginVersion": "212.4746.2",
          "language": "Groovy",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.util.List.set()</code> methods. Such calls could be replaced\nby the shorter and clearer keyed access form.\n<p><b>Example:</b></p>\n<pre>\n<code>\ndef list = [\"foo\"]\nlist.set(0, \"bar\") // list.set(0, \"bar\") could be replaced with list[0] = \"bar\"\n</code>\n</pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre>\n<code>\ndef list = [\"foo\"]\nlist[0] = \"bar\"\n</code>\n</pre>\n</body>\n</html>\n"
        }
      ]
    },
    {
      "name": "Probable bugs",
      "inspections": [
        {
          "shortName": "ImplicitArrayToString",
          "displayName": "Call to 'toString()' on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports arrays used in <code>String</code> concatenations or passed as parameters to <code>java.io.PrintStream</code>\nmethods, such as <code>System.out.println()</code>.\n<p>\n  Usually, the content of the array is meant to be used and not the array object itself.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  void print(Object[] objects) {\n    System.out.println(objects);\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  void print(Object[] objects) {\n    System.out.println(Arrays.toString(objects));\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "WriteOnlyObject",
          "displayName": "Write-only object",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports objects that are modified but never queried. </p>\n<p>The inspection relies on the method mutation contract, which could be inferred\n  or pre-annotated for some library methods. This inspection does not report collections, maps, and string builders, as these types\n  are reported by other more precise inspections.\n</p>\n<p>Example:</p>\n<pre><code>\n  AtomicReference&lt;String&gt; ref = new AtomicReference&lt;&gt;();\n  ref.set(\"hello\"); // ref is never used again\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore impure constructors</b> option to control whether to process objects created by constructor or method whose purity is not known.\n  Unchecking the option may introduce some false-positives if the object reference is intentionally leaked during the construction.\n</p>\n<b><small>New in 2021.2</small></b>\n</body>\n</html>"
        },
        {
          "shortName": "MagicConstant",
          "displayName": "Magic Constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions that can be replaced with \"magic\" constants.\n<p>Example 1:</p>\n<pre>\n  // Bare literal \"2\" is used, warning:\n  Font font = new Font(\"Arial\", 2)\n</pre>\n<p>Example 2:</p>\n<pre>\n  // Predefined constant is used, good:\n  Font font = new Font(\"Arial\", Font.ITALIC)\n</pre>\n<p>\n  When possible, the quick-fix inserts an appropriate predefined constant.\n</p>\n<!-- tooltip end -->\n<p>\n  The behavior of this inspection is controlled by <code>org.intellij.lang.annotations.MagicConstant</code> annotation.\n  Some standard Java library methods are pre-annotated, but you can use this annotation in your code as well.\n</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ScheduledThreadPoolExecutorWithZeroCoreThreads",
          "displayName": "'ScheduledThreadPoolExecutor' with zero core threads",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any <code>java.util.concurrent.ScheduledThreadPoolExecutor</code> instances in which\n<code>corePoolSize</code> is set to zero via the <code>setCorePoolSize</code> method or\nthe object constructor.\n<p>\n  A <code>ScheduledThreadPoolExecutor</code> with zero core threads will run nothing.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(int corePoolSize) {\n      if (corePoolSize != 0) return;\n      ThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(corePoolSize); // warning\n      executor.setCorePoolSize(corePoolSize); // warning\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "IterableUsedAsVararg",
          "displayName": "Iterable is used as vararg",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports suspicious usages of <code>Collection</code> or <code>Iterable</code> in vararg method calls.\n<p>For example, in the following method:</p>\n  <pre>&lt;T&gt; boolean contains(T needle, T... haystack) {...}</pre> \n<p>a call like</p>\n  <pre>if(contains(\"item\", listOfStrings)) {...}</pre> \n<p>looks suspicious as the list will be wrapped into a single element array.\n  Such code can be successfully compiled and will likely run without\n  exceptions, but it's probably used by mistake.</p>\n<!-- tooltip end -->\n<p><small>New in 2019.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "HashCodeUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'hashCode()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports implementations of <code>hashCode()</code> that access\nnon-<code>final</code> variables.\n<p>\n  Such access may result in <code>hashCode()</code>\n  returning different values at different points in the object's lifecycle, which may in turn cause problems when\n  using the standard collections classes.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Drink {\n    String name;\n    Drink(String name) { this.name = name; }\n    @Override public int hashCode() {\n      return Objects.hash(name); //warning\n    }\n  }\n  ...\n    Drink coffee = new Drink(\"Coffee\");\n    priceMap.put(coffee, 10.0);\n    coffee.name = \"Tea\";\n    double coffeePrice = priceMap.get(coffee); //not found\n</code></pre>\n<p>A quick-fix is suggested to make the field final:</p>\n<pre><code>\n  class Drink {\n    final String name;\n    ...\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "OptionalGetWithoutIsPresent",
          "displayName": "Optional.get() is called without isPresent() check",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>get()</code> on an <code>Optional</code> without checking that it has a value.\n<p>Calling <code>Optional.get()</code> on an empty <code>Optional</code> instance will throw an exception.</p>\n<p><b>Example:</b></p>\n<pre>\n  <b>void</b> x(List&lt;Integer> list) {\n    <b>final</b> Optional&lt;Integer> optional =\n      list.stream().filter(x -> x > 10).findFirst();\n    <b>final</b> Integer result = optional.get(); // problem here\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ThrowableNotThrown",
          "displayName": "Throwable not thrown",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports instantiations of <code>Throwable</code> or its subclasses, when the created <code>Throwable</code>\n  is never actually thrown.</p>\n<p>These reports indicate mistakes that are hard to catch in tests.</p>\n<p>Also, this inspection reports method calls that return instances of <code>Throwable</code> or its subclasses,\n  when the result of the method call is not thrown.</p>\n<p>Calls to methods annotated with the Error Prone's or AssertJ's <code>@CanIgnoreReturnValue</code> annotation will not be reported.</p>\n<p><b>Example:</b></p>\n<pre>\n<code>\n    void leftBehind() throws Throwable {\n        RuntimeException e = new RuntimeException(\"\"throw me\"\");\n        // ...\n    }\n</code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInMessageFormatCall",
          "displayName": "String concatenation as argument to 'MessageFormat.format()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as an argument to a call to\n<code>MessageFormat.format()</code>.\n<p>\n  While occasionally intended, this is usually a misuse of the formatting method\n  and may even cause unexpected exceptions if the variables used in the concatenated string contain\n  special characters like <code>{</code>.\n</p>\n<p>\n  Also, sometimes this could be the result\n  of mistakenly concatenating a string format argument by typing a <code>+</code> when a <code>,</code> was meant.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  String formatGreeting(String userName, int balance) {\n    return MessageFormat.format(\"Hello, \" + userName + \"! Your balance is {0}.\", balance);\n  }\n</code></pre>\n<p>\n  Here, the <code>userName</code> will be interpreted as a part of the format string, which may result\n  in <code>IllegalArgumentException</code> (for example, if <code>userName</code> is <code>\"{\"</code>).\n  This call should be probably replaced with <code>MessageFormat.format(\"Hello, {0}! Your balance is {1}.\", userName, balance)</code>.\n</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "VariableNotUsedInsideIf",
          "displayName": "Reference checked for 'null' is not used inside 'if'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports references to variables that are checked for nullability\nin the condition of an <code>if</code> statement or\nconditional expression but not used inside that\n<code>if</code> statement.\n<p>\n  Usually this either means that\n  the check is unnecessary or that the variable is not referenced inside the\n  <code>if</code> statement by mistake.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void test(Integer i) {\n    if (i != null) { // here 'i' is not used inside 'if' statement\n      System.out.println();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedCollectionQueryUpdate",
          "displayName": "Mismatched query and update of collection",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports collections whose contents are either queried and\nnot updated, or updated and not queried.\n<!-- tooltip end -->\n<p>\n  Such inconsistent queries and updates are pointless and may indicate\n  either dead code or a typo.\n</p>\n<p>\n  Use the inspection settings to specify name patterns that correspond to update/query methods.\n  Query methods that return an element are automatically detected, and only\n  those that write data to an output parameter (for example, an <code>OutputStream</code>) need to be specified.\n<p>\n<p><b>Example:</b></p>\n<p>Suppose you have your custom <code>FixedStack</code> class with method <code>store()</code>:\n<pre>\n  public class FixedStack&lt;T&gt; extends Collection&lt;T&gt; {\n    public T store(T t) {\n      // implementation\n    }\n  }\n</pre>\n<p>You can add <code>store</code> to the update methods table in order to report mismatched queries like:\n<pre>\n  void test(int i) {\n    FixedStack&lt;Integer&gt; stack = new FixedStack&lt;&gt;();\n    stack.store(i);\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedArrayReadWrite",
          "displayName": "Mismatched read and write of array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports arrays whose contents are read but not updated,\nor updated but not read. Such inconsistent reads and writes are pointless and probably indicate\ndead, incomplete or erroneous code.\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre>\n  final int[] bar = new int[3];\n  bar[2] = 3;\n</pre>\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsWithItself",
          "displayName": "'equals()' called on itself",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>equals()</code> or <code>compareTo()</code> where an object is compared for equality\nwith itself.\n<p>According to the method contracts, these operations will always return\n  <code>true</code> for <code>equals()</code> or <code>0</code> for <code>compareTo()</code>. The inspection also checks\n  the calls to <code>Objects.equals()</code>, <code>Objects.deepEquals()</code>,\n  <code>Arrays.equals()</code>, <code>Comparator.compare</code>, and the like.</p>\n<p><b>Example:</b></p>\n<pre>\n  class Foo {\n    boolean foo(Object o) {\n        return o.equals(o); // warning\n    }\n\n    boolean bar(String[] ss) {\n        return Arrays.equals(ss, ss); // warning\n    }\n}\n</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayCast",
          "displayName": "Suspicious array cast",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious array casts.\nAn array cast is considered suspicious when it casts to a more specific array type. Such a cast is legal at compile\ntime but may fail with a <code>ClassCastException</code> at runtime.\n<p><b>Example:</b></p>\n<pre><code>\n  Number[] numbers = new Number[]{1L, 2L, 4L};\n  Long[] longs = (Long[])numbers;\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CovariantEquals",
          "displayName": "Covariant 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>equals()</code> methods taking an argument type other than\n<code>java.lang.Object</code> if the containing class does not have other overloads of\n<code>equals()</code> that take <code>java.lang.Object</code> as\nits argument type.\n<p>\n  A covariant version of <code>equals()</code> does not override the\n  <code>Object.equals(Object)</code> method. It may cause unexpected\n  behavior at runtime. For example, if the class is used to construct\n  one of the standard collection classes, which expect that the\n  <code>Object.equals(Object)</code> method is overridden.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n      public boolean equals(Foo foo) {  // warning\n          return false;\n      }\n  }\n  class Bar {\n      public boolean equals(Bar bar) {  // no warning here\n          return false;\n      }\n      @Override\n      public boolean equals(Object obj) {\n          return false;\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "InnerClassReferencedViaSubclass",
          "displayName": "Inner class referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses of inner and nested classes where the call is qualified\nby a subclass of the declaring class, rather than the declaring class itself.\n<p>\n  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Sub.Inner s = new Sub.Inner(); // 'Inner' class is declared in 'Super' class, but referenced via 'Sub' class\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Super {\n    static class Inner {}\n  }\n\n  class Sub extends Super {\n    void test() {\n      Super.Inner s = new Super.Inner();\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousDateFormat",
          "displayName": "Suspicious date format pattern",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports date format patterns that are likely used by mistake.\n<p>The following patterns are reported:</p>\n<ul>\n  <li>Uppercase \"Y\", unless \"w\" appears nearby. It stands for \"Week year\" that is almost always\n    the same as normal \"Year\" (lowercase \"y\" pattern), but may point to the next year\n    at the end of December.</li>\n  <li>Uppercase \"M\" (month) close to \"H\", \"K\", \"h\", or \"k\" (hour). It's likely that a lowercase \"m\" (minute) was intended.</li>\n  <li>Lowercase \"m\" (minute) close to \"y\" (year) or \"d\" (day in month). It's likely that an uppercase \"M\" (month) was intended.</li>\n  <li>Uppercase \"D\" (day in year) close to \"M\", or \"L\" (month). It's likely that a lowercase \"d\" (day in month) was intended.</li>\n  <li>Uppercase \"S\" (milliseconds) close to \"m\" (minutes). It's likely that a lowercase \"s\" (seconds) was intended.</li>\n</ul>\n<p>\n  Examples:<br>\n  <code>new SimpleDateFormat(\"YYYY-MM-dd\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"yyyy-MM-DD\")</code>: likely <code>\"yyyy-MM-dd\"</code> was intended.<br>\n  <code>new SimpleDateFormat(\"HH:MM\")</code>: likely <code>\"HH:mm\"</code> was intended.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2020.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NonShortCircuitBoolean",
          "displayName": "Non-short-circuit boolean expression",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports usages of the non-short-circuit forms of boolean 'and' and 'or' (<code>&amp;</code>\nand <code>|</code>).\nAlthough the non-short-circuit versions are occasionally useful, in most cases the short-circuit forms (<code>&amp;&amp;</code>\nand <code>||</code>) are intended and such unintentional usages may lead to subtle bugs.\n<p>\n  A quick-fix is suggested to use the short-circuit versions.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(boolean x, boolean y) {\n    if (x | y) { /**/ }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void foo(boolean x, boolean y) {\n    if (x || y) { /**/ }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "StringEqualsCharSequence",
          "displayName": "'String.equals()' called with 'CharSequence' argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>String.equals()</code> with a <code>CharSequence</code> as the argument.\n<p>\n  <code>String.equals()</code> can only return <code>true</code> for <code>String</code> arguments.\n  To compare the contents of a <code>String</code> with a non-<code>String</code> <code>CharSequence</code> argument,\n  use the <code>contentEquals()</code> method.</p>\n<p><b>Example:</b></p>\n<pre>\n  boolean equals(String s, CharSequence ch) {\n    return s.equals(ch);\n  }\n</pre>\n<p>After quick-fix is applied:</p>\n<pre>\n  boolean equals(String s, CharSequence ch) {\n    return s.contentEquals(ch);\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n<small>New in 2017.3</small>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsWhichDoesntCheckParameterClass",
          "displayName": "'equals()' method which does not check class of parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>equals()</code> methods that do not check the type of their parameter.\n<p>Failure to check the type of the parameter\n  in the <code>equals()</code> method may result in latent errors if the object is used in an untyped collection.</p>\n<p><b>Example:</b></p>\n<pre>\n  class MyClass {\n    int x;\n    \n    @Override\n    public boolean equals(Object obj) {\n      // equals method should return false if obj is not MyClass\n      return ((MyClass)obj).x == x;\n    }\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EmptyStatementBody",
          "displayName": "Statement with empty body",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, and <code>switch</code> statements\nwith empty bodies.\n<p>While occasionally intended, such code is confusing and is often the result of a typo.</p>\n<!-- tooltip end -->\n<p>This inspection is disabled in JSP files.</p>\n</body>\n</html>"
        },
        {
          "shortName": "OverwrittenKey",
          "displayName": "Overwritten Map, Set, or array element",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that overwrites a <code>Map</code> key, a <code>Set</code> element, or an array element in a sequence of\n<code>add</code>/<code>put</code> calls or using a Java 9 factory method like <code>Set.of</code> (which will result in runtime exception).\n<p>This usually occurs due to a copy-paste error.</p>\n<p><b>Example:</b></p>\n<pre>  map.put(\"A\", 1);\n  map.put(\"B\", 2);\n  map.put(\"C\", 3);\n  map.put(\"D\", 4);\n  map.put(\"A\", 5); // duplicating key \"A\", overwrites the previously written entry\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SortedCollectionWithNonComparableKeys",
          "displayName": "Sorted collection with non-comparable elements",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports construction of sorted collections, for example <code>TreeSet</code>, that rely on natural ordering,\nwhose element type doesn't implement the <code>Comparable</code> interface.\n<p>It's unlikely that such a collection will work properly.</p>\n<p>\n  A false positive is possible if the collection element type is a non-comparable super-type,\n  but the collection is intended to only hold comparable sub-types. Even if this is the case,\n  it's better to narrow the collection element type or declare the super-type as <code>Comparable</code> because the mentioned approach is error-prone.\n</p>\n<!-- tooltip end -->\n<p>\n  The inspection also reports cases when the collection element is a type parameter which is not declared as <code>extends Comparable</code>.\n  You can suppress the warnings on type parameters using the provided option (for example, to keep the API compatibility).\n</p>\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "WrongPackageStatement",
          "displayName": "Wrong package statement",
          "defaultSeverity": "ERROR",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nDetects <code>package</code> statements that do not correspond to the project directory structure.\nAlso, reports classes without <code>package</code> statements if the class is not located directly in\nsource root directory.\n<p>While it's not strictly mandated by Java language, it's good to keep classes \nfrom package <code>com.example.myapp</code> inside the <code>com/example/myapp</code> directory under \n  the source root. Failure to do this may confuse code readers and make some tools working incorrectly.</p>\n</body>\n</html>"
        },
        {
          "shortName": "NumberEquality",
          "displayName": "Number comparison using '==', instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that uses <b>==</b> or <b>!=</b> instead of <code>equals()</code> to test for <code>Number</code> equality.\n<p>\n  With auto-boxing, it is easy\n  to make the mistake of comparing two instances of a wrapper type instead of two primitives, for example <code>Integer</code> instead of\n  <code>int</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  void foo(Integer a, Integer b) {\n    final boolean bool = a == b;\n  }\n</code></pre>\n<p>If <code>a</code> is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following:</p>\n<pre><code>  void foo(Integer a, Integer b) {\n    final boolean bool = a.equals(b);\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "InstantiationOfUtilityClass",
          "displayName": "Instantiation of utility class",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports instantiation of utility classes using the <code>new</code> keyword.\n<p>\n  In utility classes, all fields and methods are <code>static</code>.\n  Instantiation of such classes is most likely unnecessary and indicates a mistake.</p>\n<p><b>Example:</b></p>\n<pre>\n  class MyUtils {\n    public static double cube(double x) {\n      return x * x * x;\n    }\n  }\n  class Main {\n    public static void main(String[] args) {\n      // Instantiation of utility class\n      MyUtils utils = new MyUtils();\n    }\n  }\n</pre>\n<p>\n  To prevent utility classes from being instantiated,\n  it's recommended to use a <code>private</code> constructor.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "MisspelledEquals",
          "displayName": "'equal()' instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports declarations of <code>equal()</code> with a single parameter.\nNormally, this is a typo and <code>equals()</code> is actually intended.\n<p>A quick-fix is suggested to rename the method to <code>'equals'</code>.</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class Main {\n      public boolean equal(Object obj) {\n        return true;\n      }\n    }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n    class Main {\n      public boolean equals(Object obj) {\n        return true;\n      }\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ComparableImplementedButEqualsNotOverridden",
          "displayName": "Comparable implemented but 'equals()' not overridden",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that implement <code>java.lang.Comparable</code>\nbut do not override <code>equals()</code>.\n<p>\n  If <code>equals()</code>\n  is not overridden, the <code>equals()</code> implementation is not consistent with\n  the <code>compareTo()</code> implementation. If an object of such a class is added\n  to a collection such as <code>java.util.SortedSet</code>, this collection will violate\n  the contract of <code>java.util.Set</code>, which is defined in terms of\n  <code>equals()</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Length implements Comparable&lt;Length> {\n    private int cm = 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm == o.cm) return 0;\n      return cm < o.cm ? -1 : 1;\n    }\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  class Length implements Comparable&lt;Length> {\n    private int cm = 0;\n\n    @Override\n    public int compareTo(@NotNull Length o) {\n      if (cm == o.cm) return 0;\n      return cm < o.cm ? -1 : 1;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n      return o instanceof Length && compareTo((Length) o) == 0;\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "UseOfPropertiesAsHashtable",
          "displayName": "Use of Properties object as a Hashtable",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to the following methods on objects of the <code>java.util.Properties</code> class:\n<ul>\n  <li><code>java.util.Hashtable#put</code></li>\n  <li><code>java.util.Hashtable#putIfAbsent</code></li>\n  <li><code>java.util.Hashtable#putAll</code></li>\n  <li><code>java.util.Hashtable#get</code></li>\n</ul>\n<p>\n  For historical reasons, <code>java.util.Properties</code> inherits <code>java.util.Hashtable</code>,\n  but using those methods is discouraged to prevent corruption of properties values of types other than <code>String</code>.\n</p>\n<p>\n  Although <code>java.util.Properties#putAll</code> overrides <code>java.util.Hashtable#putAll</code> it doesn't get reported when\n  both the key and the value parameters in the map are of the <code>String</code> type.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    Object f(Properties props) {\n      props.put(\"hello\", \"world\");\n      props.putIfAbsent(\"hello\", \"world\");\n      props.putAll(new HashMap&lt;&gt;());\n      return props.get(\"Hello\");\n    }\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n    Object f(Properties props) {\n      props.setProperty(\"hello\", \"world\");\n      props.putIfAbsent(\"hello\", \"world\");\n      props.putAll(new HashMap&lt;&gt;());\n      return props.getProperty(\"hello\");\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "InfiniteRecursion",
          "displayName": "Infinite recursion",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports methods that call themselves infinitely unless an exception is thrown.\n<p>\n  Methods reported by this inspection cannot return normally.\n  While such behavior may be intended, in many cases this is just an oversight.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  int baz() {\n      return baz();\n  }</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ClassGetClass",
          "displayName": "Suspicious 'Class.getClass()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>getClass()</code> methods that are called on a <code>java.lang.Class</code> instance.\n<p>This is usually a mistake as the result is always equivalent to <code>Class.class</code>.\nIf it's a mistake, then it's better to remove the <code>getClass()</code> call and use the qualifier directly.\n  If the behavior is intended, then it's better to write <code>Class.class</code> explicitly to avoid confusion.</p>\n<p>Example:</p>\n<pre><code>\n  void test(Class&lt;?&gt; clazz) {\n    String name = clazz.getClass().getName();\n  }\n</code></pre>\n<p>After one of the possible quick-fixes is applied:</p>\n<pre><code>\n  void test(Class&lt;?&gt; clazz) {\n    String name = clazz.getName();\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "TextLabelInSwitchStatement",
          "displayName": "Text label in 'switch' statement",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports labeled statements inside of <code>switch</code> statements.\n  While occasionally intended, this construction is often the result of a typo.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  switch (x) {\n      case 1:\n      case2:   //warning: Text label 'case2:' in 'switch' statement\n      case 3:\n          break;\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CollectionAddedToSelf",
          "displayName": "Collection added to self",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases where the argument of a method call on a <code>java.util.Collection</code>\nor <code>java.util.Map</code> is a collection or map itself.\nThis includes adding a collection to itself, for example, calling <code>hashCode()</code> on the self-containing collection, which can lead to a <code>java.lang.StackOverflowError</code>.\nSuch situations may occur in the code with raw types as a result of copy-paste.\n\n<p><b>Example:</b></p>\n<pre><code>\n  ArrayList list = new ArrayList&lt;&gt;();\n  list.add(list);\n  return list.hashCode(); // throws StackOverflowException\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "Contract",
          "displayName": "Contract issues",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports issues in method <code>@Contract</code> annotations. The types of issues that can be reported are:\n<ul>\n<li>Errors in contract syntax</li>\n<li>Contracts that do not conform to the method signature (wrong parameter count)</li>\n<li>Method implementations that contradict the contract (e.g. return <code>true</code> when the contract says <code>false</code>)</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n  // method has no parameters, but contract expects 1\n  @Contract(\"_ -> fail\")\n  <b>void</b> x() {\n    <b>throw</b> new AssertionError();\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "ResultSetIndexZero",
          "displayName": "Use of index 0 in JDBC ResultSet",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports attempts to access column 0 of <code>java.sql.ResultSet</code> or <code>java.sql.PreparedStatement</code>.\nFor historical reasons, columns of <code>java.sql.ResultSet</code> and <code>java.sql.PreparedStatement</code>\nare numbered starting with <b>1</b>, rather than with <b>0</b>, and accessing column 0 is a common error in JDBC programming.\n<p><b>Example:</b></p>\n<pre><code>\n  String getName(ResultSet rs) {\n    <b>return</b> rs.getString(0);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CompareToUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'compareTo()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports access to a non-<code>final</code> field inside a <code>compareTo()</code> implementation.\n<p>\n  Such access may result in <code>compareTo()</code>\n  returning different results at different points in the object's lifecycle, which may in turn cause problems when\n  using the standard collections classes, for example <code>java.util.TreeSet</code>.\n</p>\n<p>\n  A quick-fix to make the field <code>final</code> is available\n  only when there is no write access to the field, otherwise no fixes are suggested.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo implements Comparable&lt;Foo&gt;{\n    private int index;\n    Foo(int idx) {\n      index = idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n     return Integer.compare(this.index, foo.index);\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo implements Comparable&lt;Foo&gt;{\n    private final int index;\n    Foo(int idx) {\n      index = idx;\n    }\n    @Override\n    public int compareTo(Foo foo) {\n      return Integer.compare(this.index, foo.index);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousNameCombination",
          "displayName": "Suspicious variable/parameter name combination",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments and function calls in which the name of the target variable or the function parameter does not match the name of the value assigned to it.\n<p>Example 1:</p>\n<pre><code>\n  <b>int</b> x = 0;\n  <b>int</b> y = x; // x is used as a y-coordinate\n  </code></pre>\n<p>Example 2:</p>\n<pre><code>\n  <b>int</b> x = 0, y = 0;\n  // x is used as a y-coordinate and y as an x-coordinate\n  Rectangle rc = <b>new</b> Rectangle(y, x, 20, 20);\n</code></pre>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>Use the <b>Group of names</b> area to specify the names which should not be used together: an error is reported\nif the parameter name or assignment target name contains words from one group and the name of the assigned or passed\nvariable contains words from a different group.\n<p>Use the <b>Ignore methods</b> area to specify the methods that should not be checked but have a potentially suspicious name.\nFor example, the <code>Integer.compare()</code> parameters are named <code>x</code> and <code>y</code> but are unrelated to coordinates.\n</body>\n</html>"
        },
        {
          "shortName": "ReflectionForUnavailableAnnotation",
          "displayName": "Reflective access to a source-only annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports attempts to reflectively check for the presence of a non-runtime annotation.\n<p>Using <code>Class.isAnnotationPresent()</code> to test for an annotation\n  whose retention policy is set to <code>SOURCE</code> or <code>CLASS</code>\n  (the default) will always have a negative result. This mistake is easy to overlook.</p>\n<p><b>Example:</b></p>\n<pre>\n  { \n    getClass().isAnnotationPresent(SourceAnnotation.class); //always false\n  }\n  \n  @Retention(RetentionPolicy.SOURCE)\n  @interface SourceAnnotation {}\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "MalformedFormatString",
          "displayName": "Malformed format string",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports format strings that don't comply with the standard Java syntax.\n<p>By default, the inspection considers a compile-time constant as a format string if it's used as an argument to the corresponding methods on\n<code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintWriter</code> or <code>java.io.PrintStream</code>.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  String.format(\"x = %d, y = %d\", 42);\n</pre>\n<!-- tooltip end -->\n<p>Use the inspection settings to mark additional classes and methods as related to string formatting.</p>\n</body>\n</html>"
        },
        {
          "shortName": "InvalidComparatorMethodReference",
          "displayName": "Invalid method reference used for 'Comparator'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method references mapped to the <code>Comparator</code> interface that don't fulfill its contract.\n<p>\nSome method references, like <code>Integer::max</code>, can be mapped to the <code>Comparator</code> interface.\nHowever, using them as <code>Comparator</code> is meaningless and the result might be unpredictable.\n</p>\n<p>Example:</p>\n<pre><code>\n  ArrayList&lt;Integer&gt; ints = foo();\n  ints.sort(Math::min);\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  ArrayList&lt;Integer&gt; ints = foo();\n  ints.sort(Comparator.reverseOrder());\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2016.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationInFormatCall",
          "displayName": "String concatenation as argument to 'format()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports non-constant string concatenations used as a format string argument.\n<p>\n  While occasionally intended, this is usually a misuse of a formatting method\n  and may even cause security issues if the variables used in the concatenated string\n  contain special characters like <code>%</code>.\n</p>\n<p>\n  Also, sometimes this could be the result\n  of mistakenly concatenating a string format argument by typing a <code>+</code> when a <code>,</code> was meant.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  static String formatGreeting(String userName) {\n    return String.format(\"Hello, \" + userName);\n  }\n</code></pre>\n<p>\n  Here, the <code>userName</code> will be interpreted as a part of format string, which may result\n  in <code>IllegalFormatException</code> (for example, if <code>userName</code> is <code>\"%\"</code>) or\n  in using an enormous amount of memory (for example, if <code>userName</code> is <code>\"%2000000000%\"</code>).\n  The call should be probably replaced with <code>String.format(\"Hello, %s\", userName);</code>.\n</p>\n<p>\n  This inspection checks calls to formatting methods on\n  <code>java.util.Formatter</code>,\n  <code>java.lang.String</code>,\n  <code>java.io.PrintWriter</code>,\n  or <code>java.io.PrintStream</code>.\n</p>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorMethodParameterNotUsed",
          "displayName": "Suspicious 'Comparator.compare()' implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports problems in <code>Comparator.compare()</code> implementations.\n<p>The following cases are reported:</p>\n<ul>\n  <li>\n    When a parameter is not used. Most likely this is a typo and the other parameter is compared\n    with itself, or the method is not implemented correctly.\n  </li>\n  <li>\n    When it's evident that the comparator does not return <code>0</code> for the same elements. Such comparator violates the contract\n    and can produce unpredictable results when equal elements are encountered. In particular,\n    sorting may fail with an exception on some data sets.</li>\n</ul>\n<p><b>Example:</b></p>\n<pre>  Comparator&lt;String&gt; lambda = (a, b) -&gt; (a.length() &gt; b.length() ? 0 :\n                Math.random() &gt; 0.5 ? (-1) : (1));\n</pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "MismatchedStringBuilderQueryUpdate",
          "displayName": "Mismatched query and update of 'StringBuilder'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>StringBuilder</code> or <code>StringBuffer</code> objects whose contents are read but not written to,\nor written to but not read.\n<p>Such inconsistent reads and writes are pointless and probably indicate\n  dead, incomplete, or erroneous code.</p>\n<p><b>Example:</b></p>\n<pre>\n  public void m1() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"a\");\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "ResultOfObjectAllocationIgnored",
          "displayName": "Result of object allocation ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports object allocations where the allocated object is ignored and neither assigned to a variable nor used in another way.\n<p>\n  Such allocation expressions are legal in Java, but are usually either unintended, or\n  evidence of a very odd object initialization strategy.\n</p>\n<!-- tooltip end -->\n<p>\n  Use the options to list classes whose allocations should be ignored by this inspection.\n<p>\n</body>\n</html>"
        },
        {
          "shortName": "CastToIncompatibleInterface",
          "displayName": "Casting to incompatible interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports type cast expressions where\nthe cast type is an interface and the cast expression has a class type that neither\nimplements the cast interface, nor has any visible subclasses that implement the cast interface.\n<p>\n  Although this might be intended, such a construct is most likely an error, and will\n  result in a <code>java.lang.ClassCastException</code> at runtime.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  interface A {}\n  interface Z {}\n  static class C {}\n\n  void x(C c) {\n    if (c instanceof Z) {\n      A a = ((A)c); // cast to incompatible interface 'A'\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "IteratorHasNextCallsIteratorNext",
          "displayName": "'Iterator.hasNext()' which calls 'next()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports implementations of <code>Iterator.hasNext()</code> or <code>ListIterator.hasPrevious()</code> that call\n<code>Iterator.next()</code> or <code>ListIterator.previous()</code> on the iterator instance. Such calls are almost certainly an error, as methods\nlike <code>hasNext()</code> should not modify the iterators state, while <code>next()</code> should.\n<p><b>Example:</b></p>\n<pre>\n  class MyIterator implements Iterator&lt;Integer&gt; {\n    public boolean hasNext() {\n      return next() != null;\n    }\n  }\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "MathRandomCastToInt",
          "displayName": "'Math.random()' cast to 'int'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>Math.random()</code> which are immediately\ncast to <code>int</code>. \n<p>Casting a <code>double</code> between <code>0.0</code> (inclusive) and\n  <code>1.0</code> (exclusive) to <code>int</code> will always round down to zero. The value\n  should first be multiplied by some factor before casting it to an <code>int</code> to\n  get a value between zero (inclusive) and the multiplication factor (exclusive).\n  Another possible solution is to use the <code>nextInt()</code> method of\n  <code>java.util.Random</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>  <b>int</b> r = (<b>int</b>)Math.random() * 10;\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>  <b>int</b> r = (<b>int</b>)(Math.random() * 10);\n</code></pre>\n  <!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousSystemArraycopy",
          "displayName": "Suspicious 'System.arraycopy()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports suspicious calls to <code>System.arraycopy()</code>.\n<p>The inspection reports the following cases:</p>\n<ul>\n<li>source or destination not of an array type\n<li>source and destination of different types\n<li>copied chunk length always greater than <code>src.length - srcPos</code>\n<li>copied chunk length always greater than <code>dest.length - destPos</code>\n<li>ranges always intersect when source and destination are the same array\n</ul>\n<p><b>Example:</b></p>\n<pre>\n  void foo() {\n    int[] src = new int[] { 1, 2, 3, 4 };\n    System.arraycopy(src, 0, src, 1, 2); // warning: Copying to the same array with intersecting ranges\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "ReplaceAllDot",
          "displayName": "Suspicious regex expression argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to\n<code>String.replaceAll()</code> or <code>String.split()</code> where the first argument is a single regex meta character argument.\n<p>\n  The regex meta characters are one of <code>.$|()[{^?*+\\</code>. They have a special meaning in regular expressions.\n  For example, calling <code>\"ab.cd\".replaceAll(\".\", \"-\")</code> produces <code>\"-----\"</code>, because the dot matches any character.\n  Most likely the escaped variant <code>\"\\\\.\"</code> was intended instead.\n</p>\n\n<p><b>Example:</b></p>\n<pre>\n  s.replaceAll(\".\", \"-\");\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  s.replaceAll(\"\\\\.\", \"-\");\n</pre>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "StringConcatenationMissingWhitespace",
          "displayName": "String literal concatenation missing whitespace",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports string concatenations with missing whitespaces, that is where the left-hand side\nends with a Unicode letter or digit and the right-hand side starts with a Unicode letter or digit.\n<p><b>Example:</b></p>\n<pre><code>\n  String sql = \"SELECT column\" +\n               \"FROM table\";\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the <b>Ignore concatenations with variable strings</b> option to only report\n  when both the left and right side of the concatenation are literals.\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantOperationOnEmptyContainer",
          "displayName": "Redundant operation on empty container",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant operations on empty collections, maps or arrays.\n<p>\n  Iterating, removing elements, sorting,\n  and some other operations on empty collections have no effect and can be removed. Also, they may be a signal of a bug.</p>\n<p><b>Example:</b></p>\n<pre>\n  if (numbers.isEmpty()){\n    //error due to the missed negation\n    int max = numbers.stream().max(Comparator.naturalOrder()).get();\n    ...\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousMethodCalls",
          "displayName": "Suspicious collections method calls",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls on parameterized collections, where the actual argument type does not\ncorrespond to the collection's elements type.\n<p><b>Example:</b></p>\n<pre>\n  List&lt;Integer&gt; list = getListOfElements();\n  list.remove(\"\"); // remove is highlighted\n</pre>\n<!-- tooltip end -->\n<p>\n  In the inspection settings, you can disable warnings for potentially correct code like the following:\n</p>\n<pre>\n  public boolean accept(Map&lt;Integer, String&gt; map, Object key) {\n    return map.containsKey(key);\n  }\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "InstanceofIncompatibleInterface",
          "displayName": "'instanceof' with incompatible interface",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>instanceof</code> expressions where\nthe compared type is an interface, and the compared expression has a class type that neither\nimplements the compared interface, nor has any visible subclasses which implement the compared interface.\n<p>\n  Although that might be intended, normally such a construct is most likely an error, where\n  the resulting <code>instanceof</code> expression always evaluates to <code>false</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  interface I1 {}\n\n  interface I2 {}\n\n  interface I3 extends I1 {}\n\n  static class Sub1 implements I1 {}\n\n  static class Sub2 extends Sub1 implements I2 {\n    void test(Sub1 sub1) {\n      if (sub1 instanceof I3) { // here 'I3' is incompatible interface\n      }\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "UnusedAssignment",
          "displayName": "Unused assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases in which a variable is redundant as its value is never used after its assignment.\n<p>If the variable is not used, it's better to remove it to shorten the code and avoid redundant allocations.</p>\n<p>The following cases are reported:</p>\n<ul>\n  <li>The variable never gets read after assignment.</li>\n  <li>The value is always overwritten with another assignment before the next variable is read.</li>\n  <li>The variable initializer is redundant (for one of the two reasons above).</li>\n</ul>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<p>\nUse the <b>Report redundant initializers</b> option to report redundant initializers:\n</p>\n<pre><code>\n  int getI() {\n    int i = 0; // redundant initialization\n    i = 2;\n    return i;\n  }\n</code></pre>\n<p>\nUse the <b>Report ++i when may be replaced with (i + 1)</b> option to report the cases when <code>++i</code> expression\nmay be replaced with <code>i + 1</code>:\n</p>\n<pre><code>\n  int preInc(int i) {\n    int res = i;\n    return ++res;\n  }\n</code></pre>\n<p>\nUse the <b>Report i++ when changed value is not used afterwards</b> option to report the cases when the result of <code>i++</code> expression\nis not used later:\n</p>\n<pre><code>\n  int postInc(int i) {\n    int res = i;\n    return res++;\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ObjectEquality",
          "displayName": "Object comparison using '==', instead of 'equals()'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that uses <code>==</code> or <code>!=</code> rather than <code>equals()</code> to test for <code>Object</code> equality.\n<p>Comparing objects using <code>==</code> or <code>!=</code> is often a bug, because it compares objects by identity instead of\n  equality.\n  Comparisons to <code>null</code> are not reported.\n  Array, <code>String</code> and <code>Number</code> comparisons are reported by separate inspections.\n</p>\n<p><b>Example:</b></p>\n<pre><code>  <b>if</b> (list1 == list2) {\n    <b>return</b>;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  <b>if</b> (Object.equals(list1, list2)) {\n    <b>return</b>;\n  }\n</code></pre>\n<!-- tooltip end -->\n<p>\n<p>Use the inspection settings to configure exceptions for this inspection.</p>\n</body>\n</html>"
        },
        {
          "shortName": "AssertWithSideEffects",
          "displayName": "'assert' statement with side effects",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "  <html>\n<body>\nReports <code>assert</code> statements that cause side-effects.\n<p>\n  Since assertions can be switched off,\n  these side-effects are not guaranteed, which can cause subtle bugs. Common unwanted side effects detected by this inspection are\n  modifications of variables and fields. When methods calls are involved, they are analyzed one level deep.</p>\n<p><b>Example:</b></p>\n<pre>  assert i++ &lt; 10;\n</pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "StringTokenizerDelimiter",
          "displayName": "Duplicated delimiters in java.util.StringTokenizer",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports either a <code>StringTokenizer</code> constructor or a <code>nextToken</code> method call that\ncontains duplicate characters in the delimiter argument, e.g. <code>tokenizer.nextToken(\"\\n\\n\")</code>.\n</body>\n</html>"
        },
        {
          "shortName": "ArrayObjectsEquals",
          "displayName": "Use of shallow or 'Objects' methods with arrays",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports expressions that seem to use an inappropriate method for determining array equality or calculating their hashcode.\n<p>The following method calls are reported:</p>\n<ul>\n  <li><code>Object.equals()</code> for any arrays</li>\n  <li><code>Arrays.equals()</code> for multidimensional arrays</li>\n  <li><code>Arrays.hashCode()</code> for multidimensional arrays</li>\n</ul>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ArrayEquals",
          "displayName": "'equals()' called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>equals()</code> to compare two arrays.\n<p>Calling <code>equals()</code> on an array compares identity and is equivalent to using <code>==</code>.\n  Use <code>Arrays.equals()</code> to compare the contents of two arrays, or <code>Arrays.deepEquals()</code> for\n  multi-dimensional arrays.</p>\n<p><b>Example:</b></p>\n<pre>\n  void sample(int[] first, int[] second){\n    if (first.equals(second)) return;\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  void sample(int[] first, int[] second){\n    if (Arrays.equals(first, second)) return;\n  }\n</pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "MeaninglessRecordAnnotationInspection",
          "displayName": "Meaningless record annotation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports annotations used on record components that have no effect.</p>\n<p>This can happen in two cases:</p>\n<ul>\n  <li>The reported annotation has the METHOD target, but the corresponding accessor is explicitly defined.</li>\n  <li>The reported annotation has the PARAMETER target, but the canonical constructor is explicitly defined.</li>\n</ul>\n<p>Example:</p>\n<pre><code>\n@Target(ElementType.METHOD)\n@interface A { }\n  \n// The annotation will not appear in bytecode at all,\n// as it should be propagated to the accessor but accessor is explicitly defined \nrecord R(@A int x) {\n  public int x() { return x; }\n}\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2021.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousToArrayCall",
          "displayName": "Suspicious 'Collection.toArray()' call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports suspicious calls to <code>Collection.toArray()</code>.\n<p>The following types of calls are considered suspicious:</p>\n<ul>\n  <li>\n    when the type of the array\n    argument is not the same as the array type to which the result is casted.\n  </li>\n  <li>\n    when the type of the array argument does not match the type parameter in the collection declaration.\n  </li>\n</ul>\n<p><b>Example:</b></p>\n<pre>\nvoid m1(List list) {\n  Number[] ns = (Number[]) list.toArray(new String[0]);\n}\n\nvoid m2(List&lt;Number&gt; list) {\n  Number[] ns = list.toArray(new String[0]);\n}\n</pre>\n\n\n</body>\n</html>"
        },
        {
          "shortName": "ConstantConditions",
          "displayName": "Constant conditions & exceptions",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the code that always produces the same result, throws an exception, or potentially violates nullability contracts.\n<p>Examples:</p>\n<pre><code>if (array.length &lt; index) {\n  System.out.println(array[index]);\n} // Array index is always out of bounds\n\nif (str == null) System.out.println(\"str is null\");\nSystem.out.println(str.trim());\n// the last statement may throw an NPE\n\n@NotNull\nInteger square(@Nullable Integer input) {\n    // the method contract is violated\n    return input == null ? null : input * input;\n}</code></pre>\n<p>\n  The inspection behavior may be controlled by a number of annotations, such as \n  <a href=\"https://www.jetbrains.com/help/idea/nullable-and-notnull-annotations.html\">nullability</a> annotations,\n  <code><a href=\"https://www.jetbrains.com/help/idea/contract-annotations.html\">@Contract</a></code> annotation, \n  <code>@Range</code> annotation and so on.\n</p>\n<!-- tooltip end -->\n<p>Configure the inspection:</p>\n<ul>\n  <li>Use the <b>Suggest @Nullable annotation for methods/fields/parameters where nullable values are used</b> option to warn when a\n    nullable value is passed as an argument to a method with a non-annotated parameter,\n    stored into non-annotated field, or returned from a non-annotated method. In this case, the inspection will suggest propagating\n    the <code>@Nullable</code> annotation. You can also configure nullability annotations using the <b>Configure Annotations</b> button.</li>\n  <li>Use the <b>Treat non-annotated members and parameters as @Nullable</b> option to assume that non-annotated members can be null,\n    so they must not be used in non-null context.</li>\n  <li>Use the <b>Report not-null required parameter with null-literal argument usages</b> option to report method parameters that cannot be\n    null (e.g. immediately dereferenced in the method body), but there are call sites where a <code>null</code> literal is passed.</li>\n  <li>Use the <b>Report nullable methods that always return a non-null value</b> option to report methods that are annotated as\n  <code>@Nullable</code>, but always return non-null value. In this case, it's suggested that you change the annotation to <code>@NotNull</code>.</li>\n  <li>Use the <b>Don't report assertions with condition statically proven to be always true</b> option to avoid reporting assertions that were\n    statically proven to be always true. This also includes conditions like <code>if (alwaysFalseCondition) throw new IllegalArgumentException();</code>.</li>\n  <li>Use the <b>Ignore assert statements</b> option to control how the inspection treats <code>assert</code> statements. By default, the option\n    is disabled, which means that the assertions are assumed to be executed (-ea mode). If the option is enabled, the assertions will be completely ignored\n    (-da mode).</li>\n  <li>Use the <b>Warn when reading a value guaranteed to be constant</b> option to add warnings on reading variables that contain some constant values,\n    for example: <code>true</code>, <code>false</code>, or <code>null</code>.</li>\n  <li>Use the <b>Report problems that happen only on some code paths</b> option to control whether to report problems that may happen only\n    on some code path. If this option is disabled, warnings like <i>exception is possible</i> will not be reported. The inspection will report\n    only warnings like <i>exception will definitely occur</i>. This mode may greatly reduce the number of false-positives, especially if the code\n    is not consistently annotated with nullability and contract annotations. That is why it can be useful for finding the most\n    important problems in legacy code bases.\n  </li>\n</ul>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "SubtractionInCompareTo",
          "displayName": "Subtraction in 'compareTo()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports subtraction in\n<code>compareTo()</code> methods and methods implementing <code>java.util.Comparator.compare()</code>.\n<p>\n  While it is a common idiom to\n  use the results of integer subtraction as the result of a <code>compareTo()</code>\n  method, this construct may cause subtle and difficult bugs in cases of integer overflow.\n  Comparing the integer values directly and returning <code>-1</code>, <code>0</code>, or <code>1</code> is a better practice in most cases.\n</p>\n<p>\n  Subtraction on floating point values that is immediately cast to integral type is also reported because precision loss is possible due to\n  rounding.\n</p>\n<p>\n  The inspection doesn't report when it's statically determined that value ranges are limited, and overflow never occurs.\n  Additionally, subtraction on <code>int</code> numbers greater than or equal to <code>0</code> will never overflow.\n  Therefore, this inspection tries not to warn in those cases.\n</p>\n<p>\n  Methods that always return zero or greater can be marked with the\n  <code>javax.annotation.Nonnegative</code> annotation or specified in this inspection's options.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class DoubleHolder implements Comparable&lt;DoubleHolder&gt; {\n    double d;\n    public int compareTo(DoubleHolder that) {\n        return (int)(this.d - that.d);\n    }\n }\n</code></pre>\n<p>A no-warning example because <code>String.length()</code> is known to be non-negative:</p>\n<pre><code>\n  class A implements Comparable&lt;A&gt; {\n    final String s = \"\";\n    public int compareTo(A a) {\n        return s.length() - a.s.length();\n    }\n }\n</code></pre>\n<!-- tooltip end -->\n<p>\n  Use the options to list methods that are safe to use inside a subtraction.\n  Methods are safe when they return an <code>int</code> value that is always greater than or equal to <code>0</code>.\n</p>\n\n</body>\n</html>"
        },
        {
          "shortName": "IteratorNextDoesNotThrowNoSuchElementException",
          "displayName": "'Iterator.next()' which can't throw 'NoSuchElementException'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports implementations of <code>Iterator.next()</code>\nthat cannot throw <code>java.util.NoSuchElementException</code>.\n<p>\n  Such implementations violate the contract of <code>java.util.Iterator</code>,\n  and may result in subtle bugs if the iterator is used in a non-standard way.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Numbers implements Iterator&lt;Integer&gt; {\n    @Override\n    public Integer next() { //warning\n        if (hasNext()) {\n            return generateNext();\n        } else {\n            return null; //throw NoSuchElementException instead\n        }\n    }\n\n    ...\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ComparatorResultComparison",
          "displayName": "Suspicious usage of compare method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases in which the result of <code>Comparator.compare</code> or <code>Comparable.compareTo</code> is compared with\n  a specific non-zero constant.\n<p>By contract, these methods can return any positive number (not just 1) or any negative number (not just -1),\n  so comparing against particular numbers is bad practice. Some widely used comparison methods (e.g. <code>String.compareTo</code>)\n  actually return values outside of the [-1..1] range, so such a comparison may cause incorrect program behavior.</p>\n<p>Example:</p>\n<pre><code>\n  void validate(String s1, String s2) {\n    // Comparing to 1 is incorrect\n    if (s1.compareTo(s2) == 1) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void validate(String s1, String s2) {\n    if (s1.compareTo(s2) > 0) {\n      throw new IllegalArgumentException(\"Incorrect order\");\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousListRemoveInLoop",
          "displayName": "Suspicious 'List.remove()' in loop",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>list.remove(index)</code> calls inside an ascending counted loop.\n<p>\n  This is suspicious as the list becomes\n  shorter after the removal, and the next element gets skipped. A simple fix is to decrease the index variable\n  after the removal,\n  but probably removing via an iterator or using the <code>removeIf()</code> method (Java 8 and later) is a more robust alternative.\n  If you don't expect that <code>remove()</code> will be called more than once in a loop, consider adding a <code>break</code> after it.\n</p>\n\n<p><b>Example:</b></p>\n<pre><code>  public static void main(String[] args) {\n    process(new ArrayList&lt;>(\n      Arrays.asList(\"1\", \"2\", \"|\", \"3\", \"4\")));\n  }\n\n  static void process(List&lt;String&gt; list) {\n    for (int i = 0; i &lt; list.size(); i++) {\n      if (list.get(i).equals(\"|\")) {\n        list.remove(i);\n        continue;\n      }\n      System.out.println(list.get(i));\n    }\n  }\n</code></pre>\n<p>The code looks like <code>1 2 3 4</code> is going to be printed, but in reality, <code>3</code> will be skipped in the output.</p>\n<!-- tooltip end -->\n<p><small>New in 2018.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "CastConflictsWithInstanceof",
          "displayName": "Cast conflicts with 'instanceof'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports type cast expressions that are preceded by an <code>instanceof</code> check for a different type.\n<p>\n  Although this might be intended, such a construct is most likely an error, and will\n  result in a <code>java.lang.ClassCastException</code> at runtime.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  <code>\n    class Main {\n      int whenCharSequenceCastToNumber(Object o){\n        if (o instanceof CharSequence) {\n          return ((Number) o).intValue();\n        }\n        return 0;\n      }\n\n      int earlyReturnWhenNotCharSequence(Object o){\n        if (!(o instanceof CharSequence)) return 0;\n        return ((Number)o).intValue();\n      }\n    }\n  </code>\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "ArrayHashCode",
          "displayName": "'hashCode()' called on array",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports incorrect hash code calculation for arrays.\n<p>In order to\n  correctly calculate the hash code for an array, use:</p>\n<ul>\n  <li><code>Arrays.hashcode()</code> for linear arrays</li>\n  <li><code>Arrays.deepHashcode()</code> for multidimensional arrays</li>\n</ul>\nThese methods should also be used with <code>Objects.hash()</code> when\nthe sequence of input values includes arrays, for example:\n<code>Objects.hash(string, Arrays.hashcode(array))</code>\n<!-- tooltip end -->\n<p>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConfusingMainMethod",
          "displayName": "Confusing 'main()' method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports methods that are named \"main\", but do not have the\n<code>public static void main(String[])</code> signature.\n<p>Such methods may be confusing, as methods named \"main\"\n  are expected to be application entry points.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Main {\n    void main(String[] args) {} //a warning here because there are no \"public static\" modifiers\n  }\n</code></pre>\n<p>A quick-fix that renames such methods is available only in the editor.</p>\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousIndentAfterControlStatement",
          "displayName": "Suspicious indentation after control statement without braces",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports suspicious indentation of statements after a control statement without braces.\n<p>\n  Such indentation can make it look like the statement is inside the control statement,\n  when in fact it will be executed unconditionally after the control statement.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Bar {\n      void foo(int i) {\n          if (i == 0)\n              System.out.println(\"foo\");\n              System.out.println(\"bar\"); // warning\n          if (i == 1);\n              System.out.println(\"great\"); // warning\n          if (i == 42)\n              System.out.println(\"answer\");\n                  System.out.println(\"question\"); // warning\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousIntegerDivAssignment",
          "displayName": "Suspicious integer division assignment",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports assignments whose right side is a division that shouldn't be truncated to integer.\n<p>While occasionally intended, this construction is often buggy.</p>\n<p><b>Example:</b></p>\n<pre>\n  int x = 18;\n  x *= 3/2; // doesn't change x because of the integer division result\n</pre>\n<p>\nThis code should be replaced with:\n<pre>\n  int x = 18;\n  x *= 3.0/2;\n</pre>\n<!-- tooltip end -->\n<p>\n  In the inspection options, you can disable warnings for suspicious but possibly correct divisions,\n  for example, when the dividend can't be calculated statically.\n<pre><code>  void calc(int d) {\n     int x = 18;\n     x *= d/2;\n  }\n</code></pre>\n\n<p>\n  <small>New in 2019.2</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "CopyConstructorMissesField",
          "displayName": "Copy constructor misses field",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports copy constructors that don't copy all the fields of the class.\n<p>\n  <code>final</code> fields with initializers and <code>transient</code> fields are considered unnecessary to copy.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  class Point {\n\n    private int x;\n    private int y;\n\n    Point(int x, int y) {\n      this.x = x;\n      this.y = y;\n    }\n\n    Point(Point other) {\n      // fields x and y are not initialized\n    }\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2018.1</small>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsUsesNonFinalVariable",
          "displayName": "Non-final field referenced in 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports implementations of <code>equals()</code> that access\nnon-<code>final</code> variables. Such access may result in <code>equals()</code>\nreturning different results at different points in the object's lifecycle, which may in turn cause problems when\nusing the standard collections classes.\n<p><b>Example:</b></p>\n<pre><code>\n  public class Person {\n    private String lastName;\n\n    @Override\n    public boolean equals(Object obj) {\n      ...\n      Person other = (Person) obj;\n      if (lastName == null) {\n        if (!lastName.equals(other.lastName)) {\n        return false;\n      ...\n      }\n    }\n  }\n  </code>\n</pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "StringEquality",
          "displayName": "String comparison using '==', instead of 'equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that uses of <b>==</b> or <b>!=</b> to compare strings.\n<p>\n  These operators determine referential equality instead of comparing content.\n  In most cases, strings should be compared using <code>equals()</code>,\n  which does a character-by-character comparison when the strings are different objects.</p>\n<p><b>Example:</b></p>\n<pre>\n  void foo(String s, String t) {\n    final boolean b = t == s;\n  }\n</pre>\n<p>If <code>t</code> is known to be non-null, then it's safe to apply the \"unsafe\" quick-fix and get the result similar to the following:</p>\n<pre>\n  void foo(String s, String t) {\n    final boolean b = t.equals(s);\n  }\n</pre>\n\n<!-- tooltip end -->\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsBetweenInconvertibleTypes",
          "displayName": "'equals()' between objects of inconvertible types",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>equals()</code> where the target and argument are\nof incompatible types.\n<p>While such a call might theoretically be useful, most likely it is a bug.</p>\n<p><b>Example:</b></p>\n<pre>\n  new HashSet&lt;String&gt;().equals(new TreeSet&lt;Integer&gt;());\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "ConstantAssertCondition",
          "displayName": "'assert' statement condition is constant",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>assert</code> statement conditions that are constants. <code>assert</code>\nstatements with constant conditions will either always fail or always succeed.\nSuch statements might be left over after a refactoring and are probably not intended.\n<p><b>Example:</b></p>\n<pre><code>\n    void foo() {\n        assert true;\n    }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousInvocationHandlerImplementation",
          "displayName": "Suspicious InvocationHandler implementation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports implementations of <code>InvocationHandler</code> that do not proxy standard\n<code>Object</code> methods like <code>hashCode()</code>, <code>equals()</code>, and <code>toString()</code>.\n<p>Failing to handle these methods might cause unexpected problems upon calling them on a proxy instance.</p>\n<p><b>Example:</b></p>\n<pre>\n  InvocationHandler myHandler = (proxy, method, params) -&gt; {\n    System.out.println(\"Hello World!\");\n    <b>return</b> null;\n  };\n  Runnable myProxy = (Runnable) Proxy.newProxyInstance(\n    Thread.currentThread().getContextClassLoader(),\n    <b>new</b> Class[] {Runnable.class}, myHandler\n  );\n</pre>\n<p>\n  This code snippet is designed to only proxy the <code>Runnable.run()</code> method.\n  However, calls to any <code>Object</code> methods, like <code>hashCode()</code>, are proxied as well.\n  This can lead to problems like a <code>NullPointerException</code>, for example, when adding <code>myProxy</code> to a <code>HashSet</code>.\n</p>\n<!-- tooltip end -->\n<p><small>New in 2020.2</small>\n</body>\n</html>"
        },
        {
          "shortName": "NewObjectEquality",
          "displayName": "New object is compared using '=='",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports code that applies <code>==</code> or <code>!=</code> to a newly allocated object\ninstead of calling <code>equals()</code>.\n<p>\n  The references to newly allocated objects cannot point at existing objects,\n  thus the comparison will always evaluate to <code>false</code>. The inspection may also report newly\n  created objects returned from simple methods.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  void test(Object obj) {\n    if (new Object() == obj) {...}\n  }\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  void test(Object obj) {\n    if (new Object().equals(obj)) {...}\n  }\n</pre>\n<!-- tooltip end -->\n<p>\n  <small>New in 2018.3</small>\n</p>\n</body>\n</html>"
        },
        {
          "shortName": "NullArgumentToVariableArgMethod",
          "displayName": "Confusing argument to varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to a method with varargs where the call has a single argument\nin the vararg parameter position, which is either a <code>null</code> or an array of a subtype of the vararg parameter.\nSuch an argument may be confusing as it is unclear if a varargs or non-varargs call is desired.\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  String[] ss = new String[]{\"foo\", \"bar\"};\n  System.out.printf(\"%s\", ss);\n  </code>\n</pre>\n<p>In this example only the first element of the array will be printed.</p>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "MismatchedStringCase",
          "displayName": "Mismatched case in 'String' operation",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>String</code> method calls that always return the same value (<code>-1</code> or <code>false</code>)\nbecause a lowercase character is searched in an uppercase-only string or vice versa.\n<p>Reported methods include <code>equals</code>, <code>startsWith</code>, <code>endsWith</code>, <code>contains</code>,\n  <code>indexOf</code>, and <code>lastIndexOf</code>.</p>\n<p><b>Example:</b></p>\n<pre>\n  if (columnName.toLowerCase().equals(\"ID\")) {...}\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2019.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ArrayEquality",
          "displayName": "Array comparison using '==', instead of 'Arrays.equals()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports operators <code>==</code> and <code>!=</code> used to test for array equality.\nIn most cases, testing for the equality of array contents is intended,\nwhich can be done with the <code>java.util.Arrays.equals()</code> method.\n<p>\n  A quick-fix is suggested to replace <code>==</code> with <code>java.util.Arrays.equals()</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  void foo(Object[] x, Object[] y) {\n    boolean comparison = x == y;\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  void foo(Object[] x, Object[] y) {\n    boolean comparison = Arrays.equals(x, y);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "EndlessStream",
          "displayName": "Non-short-circuit operation consumes infinite stream",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports non-short-circuit operations consuming an infinite stream. Such operations can be completed only by throwing an exception.\n<p>Example:</p>\n<pre><code>\n  Stream.iterate(0, i -> i + 1).collect(Collectors.toList())\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "IgnoreResultOfCall",
          "displayName": "Result of method call ignored",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports method calls whose result is ignored.\n<p>For many methods, ignoring the result is perfectly\n  legitimate, but for some it is almost certainly an error. Examples of methods where ignoring\n  the result is likely an error include <code>java.io.inputStream.read()</code>,\n  which returns the number of bytes actually read, and any method on\n  <code>java.lang.String</code> or <code>java.math.BigInteger</code>. These methods do not produce side-effects and thus pointless\n  if their result is ignored.\n</p>\n<p>The calls to the following methods are inspected:</p>\n<ul>\n  <li>Simple getters (which do nothing except return a field)</li>\n  <li>Methods specified in the settings of this inspection</li>\n  <li>Methods annotated with <code>org.jetbrains.annotations.Contract(pure=true)</code></li>\n  <li>Methods annotated with .*.<code>CheckReturnValue</code></li>\n  <li>Methods in a class or package annotated with <code>javax.annotation.CheckReturnValue</code></li>\n  <li>Optionally, all non-library methods</li>\n</ul>\n<p>Calls to methods annotated with Error Prone's or AssertJ's <code>@CanIgnoreReturnValue</code> annotation are not reported.\n\n<!-- tooltip end -->\n<p>\n  Use the inspection settings to specify the classes to check.\n  Methods are matched by name or name pattern using Java regular expression syntax.\n  For classes, use fully-qualified names. Each entry applies to both the class and all its inheritors.\n<p>\n\n</body>\n</html>"
        },
        {
          "shortName": "SuspiciousArrayMethodCall",
          "displayName": "Suspicious 'Arrays' method calls",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to non-generic-array manipulation methods like <code>Arrays.fill()</code> with mismatched argument types.\n<p>\n  Such calls don't do anything useful and are likely to be mistakes.\n</p>\n<p><b>Example:</b></p>\n<pre>\n  int foo(String[] strings) {\n    return Arrays.binarySearch(strings, 1);\n  }\n</pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ObjectToString",
          "displayName": "Call to default 'toString()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>toString()</code> that use the default implementation\nfrom <code>java.lang.Object</code>.\n<p>The default implementation is rarely intended but may be used by accident.</p>\n<p>\n  Calls to <code>toString()</code> on objects with <code>java.lang.Object</code>,\n  interface or abstract class type are ignored by this inspection.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Bar {\n      void foo1(Bar bar) {\n          String s = bar.toString(); // warning\n          /* ... */\n      }\n\n      void foo2(Object obj) {\n          String s = obj.toString(); // no warning here\n          /* ... */\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "EqualsOnSuspiciousObject",
          "displayName": "'equals()' called on 'StringBuilder'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the cases in which <code>equals()</code> is called on specific classes like <code>StringBuilder</code> or <code>StringBuffer</code>.\n<p>The <code>equals()</code> method is not overridden in these classes, so it may return <code>false</code> even when the contents of two objects are the same.\nIf the reference equality is intended, it's better to use <code>==</code> to avoid confusion.</p>\n<p>Example:</p>\n<pre><code>\n  public void test(StringBuilder sb1, StringBuilder sb2) {\n    boolean result = sb1.equals(sb2); // Suspicious\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2017.2</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "NewStringBufferWithCharArgument",
          "displayName": "StringBuilder constructor call with 'char' argument",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>StringBuffer</code> and <code>StringBuilder</code> constructors with <code>char</code> as the argument.\n<p>\n  In this case, <code>char</code> is silently cast to an integer and interpreted as the initial capacity of the buffer.\n  This can be fixed by replacing <code>char</code> with a string literal.</p>\n<p><b>Example:</b></p>\n<pre>  new StringBuilder('(').append(\"1\").append(')');\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>  new StringBuilder(\"(\").append(\"1\").append(')');\n</pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "OverflowingLoopIndex",
          "displayName": "Loop executes zero or billions times",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports loops that cannot be completed without an index overflow or loops that don't loop at all.\nIt usually happens because of a mistake in the update operation.\n<p>Example:</p>\n<pre><code>\n  void foo(int s) {\n    for (int i = s; i > 12; i++) { // i-- should be here\n      System.out.println(i);\n    }\n  }\n</code></pre>\n<!-- tooltip end -->\n<p><small>New in 2019.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "EqualsAndHashcode",
          "displayName": "'equals()' and 'hashCode()' not paired",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports classes that override the\n<code>equals()</code> method but do not override the\n<code>hashCode()</code> method or vice versa, which can potentially lead to problems\nwhen the class is added to a <code>Collection</code> or a <code>HashMap</code>.\n<p>The quick-fix generates the default implementation for an absent method.</p>\n<p>Example:</p>\n<pre><code>\nclass StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s != null ? s.hashCode() : 0;\n  }\n}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\nclass StringHolder {\n  String s;\n\n  @Override public int hashCode() {\n    return s != null ? s.hashCode() : 0;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof StringHolder)) return false;\n\n    StringHolder holder = (StringHolder)o;\n\n    if (s != null ? !s.equals(holder.s) : holder.s != null) return false;\n\n    return true;\n  }\n}\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "SuspiciousTernaryOperatorInVarargsCall",
          "displayName": "Suspicious ternary operator in varargs method call",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports vararg method calls that use a ternary operator with mixed array and non-array branches.\n<p>\nWhen compiled, both branches are wrapped in arrays. As a result, the array branch is turned into\na two-dimensional array, which may indicate a problem.\n</p>\n<p>\nThe quick-fix wraps the non-array branch in an array to prevent the compiler from doing the conversion.\n</p>\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre>\n    static void bar(boolean flag) {\n        Object[] a = {1, 2};\n        Object b = \"hello\";\n        foo(flag ? a : b);\n    }\n    static void foo(Object... obj) {\n    }\n</pre>\n\n<p>After the quick-fix: </p>\n<pre>\n    static void bar(boolean flag) {\n        Object[] a = {1, 2};\n        Object b = \"hello\";\n        foo(flag ? a : new Object[]{b});\n    }\n    static void foo(Object... obj) {\n    }\n</pre>\n\n<p><small>New in 2020.3</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "ClassNewInstance",
          "displayName": "Unsafe call to 'Class.newInstance()'",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports calls to <code>java.lang.Class.newInstance()</code>.\n<p>\n  This method propagates exceptions thrown by\n  the no-arguments constructor, including checked exceptions. Usages of this method\n  effectively bypass the compile-time exception checking that would\n  otherwise be performed by the compiler.\n</p>\n<p>\n  A quick-fix is suggested to replace the call with a call to the\n  <code>java.lang.reflect.Constructor.newInstance()</code> method, which\n  avoids this problem by wrapping any exception thrown by the constructor in a\n  (checked) <code>java.lang.reflect.InvocationTargetException</code>.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  clazz.newInstance()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  clazz.getConstructor().newInstance();\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        },
        {
          "shortName": "StaticFieldReferenceOnSubclass",
          "displayName": "Static field referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports accesses to static fields where the call is\nqualified by a subclass of the declaring class, rather than by the declaring class itself.\n<p>\n  Java allows such qualification, but such accesses may indicate a subtle confusion of inheritance and overriding.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Parent {\n    static int foo = 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Child.foo);\n  }\n</code></pre>\n<p>After the quick-fix is applied, the result looks like this:</p>\n<pre><code>\n  class Parent {\n    static int foo = 0;\n  }\n\n  class Child extends Parent { }\n\n  void bar() {\n    System.out.println(Parent.foo);\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "CapturingCleaner",
          "displayName": "Cleaner captures object reference",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>Runnable</code> passed to a <code>Cleaner.register()</code> capturing reference that leads to a memory leak.\n<p>Possible sources of this problem:</p>\n<ul>\n  <li>Lambda using non-static methods, fields, or <code>this</code> itself</li>\n  <li>Non-static inner class (anonymous or not) always captures this reference</li>\n  <li>Instance method reference</li>\n  <li>Access to outer class non-static members from non-static inner class</li>\n</ul>\n<!-- tooltip end -->\n<p>Sample of code that will be reported: </p>\n<pre><code>\n  int fileDescriptor;\n  Cleaner.Cleanable cleanable = Cleaner.create().register(this, () -> {\n    System.out.println(\"adsad\");\n    //<i>this</i> is captured via <i>fileDescriptor</i>\n    fileDescriptor = 0;\n  });\n</code></pre>\n<p>This inspection only reports if the language level of the project or module is 9 or higher.</p>\n<p><small>New in 2018.1</small></p>\n</body>\n</html>"
        },
        {
          "shortName": "PrimitiveArrayArgumentToVariableArgMethod",
          "displayName": "Confusing primitive array argument to varargs method",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports any calls to a variable arity method where the call has a primitive array in\nthe variable arity parameter position (for example, <code>System.out.printf(\"%s\", new int[]{1, 2, 3})</code>).\nSuch a primitive-array argument may be confusing, as it will be wrapped as a single-element array, rather than each individual\nelement being boxed, as might be expected.\n<!-- tooltip end -->\n<p><b>Example:</b></p>\n<pre>\n  <code>\n  String.format(\"%s\", new int[]{1, 2, 3});\n  </code>\n</pre>\n<p>After the quick-fix is applied:</p>\n<pre>\n  <code>\n  String.format(\"%s\", (Object) new int[]{1, 2, 3});\n  </code>\n</pre>\n</body>\n</html>"
        },
        {
          "shortName": "StaticCallOnSubclass",
          "displayName": "Static method referenced via subclass",
          "defaultSeverity": "WARNING",
          "pluginId": "com.intellij.java",
          "pluginVersion": "212.4746.2",
          "language": "JAVA",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports static method calls where the call is qualified\nby a subclass of the declaring class, rather than by the declaring class itself.\n<p>\n  Java allows such qualification for classes, but such calls\n  may indicate a subtle confusion of inheritance and overriding.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Parent {\n    public static void print(String str) {}\n  }\n  class Child extends Parent {}\n\n  Child.print(\"Hello, world!\");\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  Parent.print(\"Hello, world!\");\n</code></pre>\n<!-- tooltip end -->\n\n</body>\n</html>"
        }
      ]
    },
    {
      "name": "Redundant constructs",
      "inspections": [
        {
          "shortName": "WhenWithOnlyElse",
          "displayName": "'when' has only 'else' branch and can be simplified",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports <code>when</code> expressions with only an <code>else</code> branch that can be simplified.\n<p><b>Simplify expression</b> quick-fix can be used to amend the code automatically.</p>\n<p>Example:</p>\n<pre><code>\n  fun redundant() {\n      val x = when { // &lt;== redundant, a quick-fix simplifies the when expression to \"val x = 1\"\n          else -> 1\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "KotlinRedundantOverride",
          "displayName": "Redundant overriding method",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant overriding declarations.\n<p>\n    An override can be omitted if it does not modify the inherited signature semantics, for example, by changing visibility.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  <b>open class</b> Foo {\n      open fun singleExpression() {\n      }\n  }\n\n  class Bar : Foo() {\n      <b>override</b> fun singleExpression() = super.singleExpression()\n  }\n</code></pre>\n\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Bar : Foo() {\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantEnumConstructorInvocation",
          "displayName": "Redundant enum constructor invocation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant constructor invocation on an enum entry.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  enum class Baz(i: Int = 0) {\n      A(1),\n      B<b>()</b>,\n      C<b>()</b>,\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  enum class Baz(i: Int = 0) {\n      A(1),\n      B,\n      C,\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantRequireNotNullCall",
          "displayName": "Redundant 'requireNotNull' or 'checkNotNull' call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant <code>requireNotNull</code> or <code>checkNotNull</code> call on non-nullable expressions.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(i: Int) {\n      requireNotNull(i) // This 'i' is always not null, so this 'requireNotNull' call is redundant.\n      ...\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(i: Int) {\n      ...\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ConstantConditionIf",
          "displayName": "Condition of 'if' expression is constant",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>if</code> expressions whose condition is constant and therefore the expression can be simplified.\n<p>While occasionally intended, this construction is confusing, and often the result of a typo.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun example() {\n      if (true) {\n          throw IllegalStateException(\"Unexpected state\")\n      }\n  }\n</code></pre>\n<p>A quick-fix is suggested to remove the <code>if</code> condition:</p>\n<pre><code>\n  fun example() {\n      throw IllegalStateException(\"Unexpected state\")\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "ComplexRedundantLet",
          "displayName": "Redundant argument-based `let` call",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a redundant argument-based <code>let</code> call.\n<p><code>let</code> is redundant when the lambda parameter is only used as a qualifier in a call expression.</p>\n<p>If you need to give a name to the qualifying expression, consider declaring a local variable.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun splitNumbers() {\n      \"1,2,3\".let { it.split(',') }\n  }\n</code></pre>\n<p>A quick-fix is suggested to remove the extra <code>let()</code> call:</p>\n<pre><code>\n  fun example() {\n      \"1,2,3\".split(',')\n  }\n</code></pre>\n<p>Alternative:</p>\n<pre><code>\n  fun splitNumbers() {\n      val numbers = \"1,2,3\"\n      numbers.split(',')\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "CanBeParameter",
          "displayName": "Constructor parameter is never used as a property",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports primary constructor parameters that can have <code>val</code> or <code>var</code> removed.\n<p>\n    Class properties declared in constructor consume additional memory.\n    If the parameter value is only used in the constructor, usually there is no reason to store them.\n</p>\n<p>Note that the referenced object might be garbage-collected earlier.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Task(val name: String) {\n      init {\n          print(\"Task created: $name\")\n      }\n  }\n</code></pre>\n<p>A quick-fix is suggested to remove the extra <code>val</code> or <code>var</code> keyword:</p>\n<pre><code>\n  class Task(name: String) {\n      init {\n          print(\"Task created: $name\")\n      }\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantEmptyInitializerBlock",
          "displayName": "Redundant empty initializer block",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant empty initializer blocks.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Foo {\n      init {\n          // Empty init block\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Foo {\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSemicolon",
          "displayName": "Redundant semicolon",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n    Reports redundant semicolons (<code>;</code>) that can be safely removed.\n<p>\n    Kotlin does not require a semicolon at the end of each statement or expression.\n    A quick-fix is suggested to remove redundant semicolons.\n</p>\n<p><b>Example:</b></p>\n<pre><code>\n  val myMap = mapOf(\"one\" to 1, \"two\" to 2);\n  myMap.forEach { (key, value) ->  print(\"$key -> $value\")};\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  val myMap = mapOf(\"one\" to 1, \"two\" to 2)\n  myMap.forEach { (key, value) ->  print(\"$key -> $value\")}\n</code></pre>\n\n<p>There are two cases though where a semicolon is required:</p>\n<ol>\n    <li>\n        Several statements placed on a single line need to be separated with semicolons:\n<pre><code>\n  map.forEach { val (key, value) = it; println(\"$key -> $value\") }\n</code></pre>\n    </li>\n    <li>\n        <code>enum</code> classes that also declare properties or functions, require a semicolon after the list of enum constants:\n        <pre><code>\n  enum class Mode {\n      SILENT, VERBOSE;\n\n      fun isSilent(): Boolean = this == SILENT\n  }\n        </code></pre>\n    </li>\n</ol>\n</body>\n</html>"
        },
        {
          "shortName": "KotlinUnusedImport",
          "displayName": "Unused import directive",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>import</code> statements.\n\n<p>Default and unused imports can be safely removed.</p>\n\n<p><b>Example:</b></p>\n<pre><code>\n  import kotlin.*\n  import kotlin.collections.*\n  import kotlin.comparisons.*\n  import kotlin.io.*\n  import kotlin.ranges.*\n  import kotlin.sequences.*\n  import kotlin.text.*\n\n  // jvm specific\n  import java.lang.*\n  import kotlin.jvm.*\n\n  // js specific\n  import kotlin.js.*\n\n  import java.io.* // this import is unused and could be removed\n  import java.util.*\n\n  fun foo(list: ArrayList&lt;String&gt;) {\n      list.add(\"\")\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantCompanionReference",
          "displayName": "Redundant 'Companion' reference",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant <code>Companion</code> reference.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class A {\n      <b>companion object</b> {\n          fun create() = A()\n      }\n  }\n  fun test() {\n      val s = A.<b>Companion</b>.create()\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class A {\n      <b>companion object</b> {\n          fun create() = A()\n      }\n  }\n  fun test() {\n      val s = A.create()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantInnerClassModifier",
          "displayName": "Redundant 'inner' modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": false,
          "description": "<html>\n<body>\nReports the <code>inner</code> modifier on a class as redundant if it doesn't reference members of its outer class.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveCurlyBracesFromTemplate",
          "displayName": "Redundant curly braces in string template",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of curly braces in string templates around simple identifiers.\n<p>Use the 'Remove curly braces' quick-fix to remove the redundant braces.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun redundant() {\n     val x = 4\n     val y = \"${x}\" // &lt;== redundant\n  }\n\n  fun correctUsage() {\n      val x = \"x\"\n      val y = \"${x.length}\" // &lt;== Ok\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun redundant() {\n     val x = 4\n     val y = \"$x\"\n  }\n\n  fun correctUsage() {\n      val x = \"x\" &lt;== Updated\n      val y = \"${x.length}\"\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveForLoopIndices",
          "displayName": "Unused loop index",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>for</code> loops iterating over a collection using the <code>withIndex()</code> function and not using the index variable.\n<p>Use the \"Remove indices in 'for' loop\" quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun foo(bar: List&lt;String&gt;) {\n     for ((index : Int, value: String) in bar.withIndex()) { // &lt;== 'index' is unused\n         println(value)\n     }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(bar: List&lt;String&gt;) {\n      for (value: String in bar) { // &lt;== '.withIndex()' and 'index' are removed\n          println(value)\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnusedReceiverParameter",
          "displayName": "Unused receiver parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports receiver parameter of extension functions and properties that is not used.\n<p><b>Remove redundant receiver parameter</b> can be used to amend the code automatically.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveSingleExpressionStringTemplate",
          "displayName": "Redundant string template",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports single-expression string templates that can be safely removed.\n<p><b>Example:</b></p>\n<pre><code>  val x = \"Hello\"\n  val y = \"$x\"\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  val x = \"Hello\"\n  val y = x // &lt;== Updated\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ReplaceWithIgnoreCaseEquals",
          "displayName": "Should be replaced with 'equals(..., ignoreCase = true)'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports case-insensitive comparisons that can be replaced with <code>equals(..., ignoreCase = true)</code>.\n<p>By using <code>equals()</code> you don't have to allocate extra strings with <code>toLowerCase()</code> or <code>toUpperCase()</code> to compare strings.</p>\n<p>The quick-fix replaces the case-insensitive comparison that uses <code>toLowerCase()</code> or <code>toUpperCase()</code> with <code>equals(..., ignoreCase = true)</code>.</p>\n<p><b>Note:</b> May change semantics for some locales.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      val a = &quot;KoTliN&quot;\n      val b = &quot;KOTLIN&quot;\n      println(a.toLowerCase() == b.toLowerCase())\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      val a = &quot;KoTliN&quot;\n      val b = &quot;KOTLIN&quot;\n      println(a.equals(b, ignoreCase = true))\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantVisibilityModifier",
          "displayName": "Redundant visibility modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports visibility modifiers that match the default visibility of an element\n(<code>public</code> for most elements, <code>protected</code> for members that override a protected member).\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantCallsOfConversionMethods",
          "displayName": "Redundant call of conversion method",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant calls to conversion methods (for example, <code>toString()</code> on a <code>String</code> or <code>toDouble()</code>\non a <code>Double</code>).\n<p>Use the 'Remove redundant calls of the conversion method' quick-fix to clean up the code.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantSpreadOperator",
          "displayName": "Redundant spread operator",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the use of a redundant spread operator for a family of <code>arrayOf</code> function calls.\n<p>Use the 'Remove redundant spread operator' quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun foo(vararg s: String) { }\n\n  fun bar(ss: Array&lt;String&gt;) {\n      foo(*arrayOf(\"abc\"))       // for the both calls of 'foo', array creation\n      foo(*arrayOf(*ss, \"zzz\"))  // and its subsequent \"spreading\" is redundant\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(vararg s: String) { }\n\n  fun bar(ss: Array&lt;String&gt;) {\n      foo(\"abc\")\n      foo(*ss, \"zzz\")\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantReturnLabel",
          "displayName": "Redundant 'return' label",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant return labels outside of lambda expressions.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test() {\n      return@test\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test() {\n      return\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitSuperQualifier",
          "displayName": "Unnecessary supertype qualification",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>super</code> member calls with redundant supertype qualification.\n<p>\n    Code in a derived class can call its superclass functions and property accessors implementations using the <code>super</code> keyword.\n    To specify the supertype from which the inherited implementation is taken, <code>super</code> can be qualified by the supertype name in\n    angle brackets, e.g. <code>super&lt;Base&gt;</code>. Sometimes this qualification is redundant and can be omitted.\n    Use the 'Remove explicit supertype qualification' quick-fix to clean up the code.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  open class B {\n      open fun foo(){}\n  }\n\n  class A : B() {\n      override fun foo() {\n         super&lt;B&gt;.foo() // &lt;== redundant because 'B' is the only supertype\n      }\n  }\n\n  interface I {\n      fun foo() {}\n  }\n\n  class C : B(), I {\n      override fun foo() {\n          super&lt;B&gt;.foo() // &lt;== here &lt;B&gt; qualifier is needed to distinguish 'B.foo()' from 'I.foo()'\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  open class B {\n      open fun foo(){}\n  }\n\n  class A : B() {\n      override fun foo() {\n         super.foo() // &lt;== Updated\n      }\n  }\n\n  interface I {\n      fun foo() {}\n  }\n\n  class C : B(), I {\n      override fun foo() {\n          super&lt;B&gt;.foo()\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantBackticks",
          "displayName": "Redundant backticks",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant backticks in references.\n<p>\n    Some of the Kotlin keywords are valid identifiers in Java, for example: <code>in</code>, <code>object</code>, <code>is</code>.\n    If a Java library uses a Kotlin keyword for a method, you can still call the method escaping it\n    with the backtick character (<code>`</code>), for example, <code>foo.`is`(bar)</code>.\n    Sometimes this escaping is redundant and can be safely omitted. The inspection discovers and reports such cases and is\n    paired with the 'Remove redundant backticks' quick-fix, which allows you to amend the highlighted code.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun `is`(x: String) {}\n  fun foo() {\n      `is`(\"bar\") // 'is' is a keyword, backticks are required\n  }\n\n  fun `test that smth works as designed`() {} // OK, complex identifier for readability improvement\n\n  val `a` = 1  // no need for backticks\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptyParenthesesFromLambdaCall",
          "displayName": "Remove unnecessary parentheses from function call with lambda",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant empty parentheses of function calls where the only parameter is a lambda that's outside the parentheses.\n<p>Use the 'Remove unnecessary parentheses from function call with lambda' quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun foo() {\n      listOf(1).forEach() {  }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo() {\n      listOf(1).forEach {  }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "ExplicitThis",
          "displayName": "Redundant explicit 'this'",
          "defaultSeverity": "INFORMATION",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports usages of explicit <b>this</b> when it can be omitted.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantLambdaOrAnonymousFunction",
          "displayName": "Redundant creation of lambda or anonymous function",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports lambdas or anonymous functions that are created and used immediately.</p>\n<!-- tooltip end -->\n<pre><code>\n  <b>fun</b> test() {\n      ({ println() })() // redundant\n      (<b>fun</b>() { println() })() // redundant\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RedundantIf",
          "displayName": "Redundant 'if' statement",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports <code>if</code> statements which can be simplified to a single statement.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test() {\n      if (foo()) {\n         return true\n      } else {\n         return false\n      }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test() {\n      return foo()\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantElvisReturnNull",
          "displayName": "Redundant '?: return null'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant <code>?: return null</code></p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(): Int? {\n      ...\n  }\n\n  fun test() : Int? {\n      return foo() <b>?: return null</b>\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(): Int? {\n      ...\n  }\n\n  fun test() : Int? {\n      return foo()\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "UnusedSymbol",
          "displayName": "Unused symbol",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports symbols that are not used or not reachable from entry points.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSamConstructor",
          "displayName": "Redundant SAM constructor",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports SAM (Single Abstract Method) constructor usages which can be replaced with lambdas.\n<p><b>Example:</b></p>\n<pre><code>\n  fun main() {\n      foo(<b>Runnable</b> { println(\"Hi!\") })\n  }\n\n  fun foo(other: Runnable) {}\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun main() {\n      foo( { println(\"Hi!\") })\n  }\n\n  fun foo(other: Runnable) {}\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptyPrimaryConstructor",
          "displayName": "Redundant empty primary constructor",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty primary constructors when they are implicitly available anyway.\n<p>\n    A primary constructor is redundant and can be safely omitted when it does not have any annotations or visibility modifiers.\n    Use the 'Remove empty primary constructor' quick-fix to clean up the code.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  class MyClassA constructor() //  redundant, can be replaced with 'class MyClassA'\n\n  annotation class MyAnnotation\n  class MyClassB @MyAnnotation constructor() //  required because of annotation\n\n  class MyClassC private constructor() // required because of visibility modifier\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "RemoveEmptySecondaryConstructorBody",
          "displayName": "Redundant constructor body",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports empty bodies of secondary constructors.\n</body>\n</html>"
        },
        {
          "shortName": "RedundantWith",
          "displayName": "Redundant 'with' call",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>with</code> function calls that don't access anything from the receiver.\n<p><b>Examples:</b></p>\n<pre><code>\n  class MyClass {\n      fun f(): String = \"\"\n  }\n\n  fun testRedundant() {\n      with(c) { // &lt;== 'with' is redundant since 'c' isn't used\n          println(\"1\")\n      }\n  }\n\n  fun testOk() {\n      val c = MyClass()\n      with(c) { // &lt;== OK because 'f()' is effectively 'c.f()'\n          println(f())\n      }\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "SimplifyWhenWithBooleanConstantCondition",
          "displayName": "Simplifiable 'when'",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>when</code> expressions with the constant <code>true</code> or <code>false</code> branches.\n<p><b>Simplify \"when\"</b> quick-fix can be used to amend the code automatically.</p>\n<p>Examples:</p>\n<pre><code>\n  fun redundant() {\n      when { // &lt;== redundant, quick-fix simplifies the when expression to \"println(\"true\")\"\n          true -> println(\"true\")\n          else -> println(\"false\")\n      }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantSuspendModifier",
          "displayName": "Redundant 'suspend' modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports <code>suspend</code> modifier as redundant if no other suspending functions are called inside.\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantExplicitType",
          "displayName": "Obvious explicit type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports local variables' explicitly given types which are obvious and thus redundant, like <code>val f: Foo = Foo()</code>.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Point(val x: Int, val y: Int)\n\n  fun foo() {\n      val t: <b>Boolean</b> = true\n      val p: <b>Point</b> = Point(1, 2)\n      val i: <b>Int</b> = 42\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Point(val x: Int, val y: Int)\n\n  fun foo() {\n      val t = true\n      val p = Point(1, 2)\n      val i = 42\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "NullChecksToSafeCall",
          "displayName": "Null-checks replaceable with safe-calls",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports chained null-checks that can be replaced with safe-calls.\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(my: My?) {\n      if (my != null && my.foo() != null) {}\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(my: My?) {\n      if (my?.foo() != null) {}\n  }\n</code></pre>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveEmptyClassBody",
          "displayName": "Replace empty class body",
          "defaultSeverity": "INFO",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports declarations of classes and objects with an empty body.\n<p>Use the 'Remove redundant empty class body' quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  class EmptyA() {} // &lt;== empty body\n\n  class EmptyB {\n      companion object {} // &lt;== empty body\n  }\n\n  fun emptyC() {\n     object {} // &lt;== anonymous object, it's ok (not reported)\n  }\n</code></pre>\n<p>After the quick fix is applied:</p>\n<pre><code>\n  class EmptyA()\n\n  class EmptyB {\n      companion object\n  }\n\n  fun emptyC() {\n     object {}\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantGetter",
          "displayName": "Redundant property getter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant property getters.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class Test {\n      val a = 1\n          <b>get</b>\n      val b = 1\n          <b>get() = field</b>\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  class Test {\n      val a = 1\n      val b = 1\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitReturnType",
          "displayName": "Redundant 'Unit' return type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports a redundant <code>Unit</code> return type which can be omitted.\n</body>\n</html>"
        },
        {
          "shortName": "KotlinDoubleNegation",
          "displayName": "Redundant double negation",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant double negations.\n<p><b>Example:</b></p>\n<pre><code>  val truth = !!true</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveExplicitTypeArguments",
          "displayName": "Unnecessary type argument",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports function calls with type arguments that can be automatically inferred. Such type arguments are redundant and can be safely omitted.\n<p>Use the 'Remove explicit type arguments' quick-fix to clean up the code.</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  // 'String' type can be inferred here\n  fun foo(): MutableList&lt;String&gt; = mutableListOf&lt;String&gt;()\n\n  // Here 'String' cannot be inferred, type argument is required.\n  fun bar() = mutableListOf&lt;String&gt;()\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(): MutableList&lt;String&gt; = mutableListOf() &lt;== Updated\n\n  fun bar() = mutableListOf&lt;String&gt;()\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "UnnecessaryVariable",
          "displayName": "Unnecessary local variable",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports local variables that used only in the very next <code>return</code> statement or exact copies of other variables.\n<p>Such variables can be safely inlined to make the code more clear.</p>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantNullableReturnType",
          "displayName": "Redundant nullable return type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports functions and variables with nullable return type which never return or become <code>null</code>.\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveSetterParameterType",
          "displayName": "Redundant setter parameter type",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports explicitly specified parameter types in property setters.\n<p>\n    Setter parameter type always matches the property type, so it's not required to be explicit.\n    The 'Remove explicit type specification' quick-fix allows amending the code accordingly.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun process(x: Int) {}\n\n  var x: Int = 0\n      set(value: Int) = process(value) // &lt;== 'Int' specification can be safely omitted\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun process(x: Int) {}\n\n  var x: Int = 0\n      set(value) = process(value)\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantModalityModifier",
          "displayName": "Redundant modality modifier",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports the modality modifiers that match the default modality of an element\n(<code>final</code> for most elements, <code>open</code> for members with an <code>override</code>).\n</body>\n</html>\n"
        },
        {
          "shortName": "SimpleRedundantLet",
          "displayName": "Redundant receiver-based 'let' call",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant receiver-based <code>let</code> calls.\n<p>The quick-fix removes the redundant <code>let</code> call.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun test(s: String?): Int? = s?.let { it.length }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun test(s: String?): Int? = s?.length\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantLambdaArrow",
          "displayName": "Redundant lambda arrow",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\n<p>Reports redundant lamba arrows in lambdas without parameters.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  fun foo(f: () -> Unit) = f()\n\n  fun bar() {\n      foo { <b>-></b> println(\"Hi!\") }\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  fun foo(f: () -> Unit) = f()\n\n  fun bar() {\n      foo { println(\"Hi!\") }\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RedundantUnitExpression",
          "displayName": "Redundant 'Unit'",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant <code>Unit</code> expressions.\n<p>\n    <code>Unit</code> in Kotlin can be used as the return type of functions that do not return anything meaningful.\n    The <code>Unit</code> type has only one possible value, which is the <code>Unit</code> object.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  fun redundantA(): Unit {\n      return Unit // redundant, 'Unit' is returned by default and matches the expected return type\n  }\n\n  fun requiredA(condition: Boolean): Any {\n      if (condition) return \"hello\"\n      return Unit // explicit 'Unit' is required since the expected type is 'Any'\n  }\n\n  fun redundantB(condition: Boolean): Any = if (condition) {\n      fun ancillary(): Int = 1\n      println(\"${ancillary()}\")\n      Unit // redundant since the last expression is already of type 'Unit'\n  } else {\n      println(\"else\")\n  }\n\n  fun requiredB(condition: Boolean): Any = if (condition) {\n      1024\n      Unit // required, otherwise '1024' (Int) would be the return value\n  } else {\n      println(\"else\")\n  }\n</code></pre>\n</body>\n</html>"
        },
        {
          "shortName": "CanBePrimaryConstructorProperty",
          "displayName": "Property is explicitly assigned to constructor parameter",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports properties which are explicitly assigned to primary constructor parameters.\n<p>Properties can be declared directly in the primary constructor, reducing amount of code and increasing code readability.</p>\n<p><b>Example:</b></p>\n<pre><code>\n  class User(name: String) {\n      val name = name\n  }\n</code></pre>\n<p>A quick-fix is suggested to join the parameter and property declaration into a primary constructor parameter:</p>\n<pre><code>\n  class User(val name: String) {\n  }\n</code></pre>\n<!-- tooltip end -->\n</body>\n</html>"
        },
        {
          "shortName": "RedundantSetter",
          "displayName": "Redundant property setter",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant property setters.\n<p>\nSetter is considered to be redundant in one of the following cases:\n</p>\n<ol>\n    <li>\n        Setter has no body. Accessor visibility isn't changed, declaration isn't <code>external</code> and has no annotations.\n        <pre><code>\n  var myPropWithRedundantSetter: Int = 0\n      set // redundant\n\n  var myPropA: Int = 0\n      private set // OK - property visibility is changed to private\n\n  var myPropB: Int = 0\n      external set // OK - implemented not in Kotlin (external)\n\n  var myPropC: Int = 0\n      @Inject set // OK - accessor is annotated\n        </code></pre>\n    </li>\n    <li>\n        Setter body is a block with a single statement assigning the parameter to the backing field.\n        <pre><code>\n  var prop: Int = 0\n      set(value) { // redundant\n          field = value\n      }\n       </code></pre>\n    </li>\n</ol>\n\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveToStringInStringTemplate",
          "displayName": "Redundant call to 'toString()' in string template",
          "defaultSeverity": "WEAK WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports calls to <code>toString()</code> in string templates that can be safely removed.\n<p><b>Example:</b></p>\n<pre><code>  fun foo(a: Int, b: Int) = a + b\n\n  fun test(): String {\n      return \"Foo: ${foo(0, 4).toString()}\" // 'toString()' is redundant\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>  fun foo(a: Int, b: Int) = a + b\n\n  fun test(): String {\n      return \"Foo: ${foo(0, 4)}\"\n  }\n</code></pre>\n</body>\n</html>\n"
        },
        {
          "shortName": "RemoveRedundantQualifierName",
          "displayName": "Redundant qualifier name",
          "defaultSeverity": "WARNING",
          "pluginId": "org.jetbrains.kotlin",
          "pluginVersion": "212-1.5.10-release-IJ4746.2",
          "language": "kotlin",
          "isGlobalTool": false,
          "enabled": true,
          "description": "<html>\n<body>\nReports redundant qualifiers (or their parts) on class names, functions, and properties.\n<p>\n    A fully qualified name is an unambiguous identifier that specifies which object, function, or property a call refers to.\n    In the contexts where the name can be shortened, the inspection informs on the opportunity and the associated\n    'Remove redundant qualifier name' quick-fix allows amending the code.\n</p>\n<p><b>Examples:</b></p>\n<pre><code>\n  package my.simple.name\n  import kotlin.Int.Companion.MAX_VALUE\n\n  class Foo\n\n  fun main() {\n      val a = my.simple.name.Foo()    // 'Foo' resides in the declared 'my.simple.name' package, qualifier is redundant\n      val b = kotlin.Int.MAX_VALUE    // Can be replaced with 'MAX_VALUE' since it's imported\n      val c = kotlin.Double.MAX_VALUE // Can be replaced with 'Double.MAX_VALUE' since built-in types are imported automatically\n  }\n</code></pre>\n<p>After the quick-fix is applied:</p>\n<pre><code>\n  package my.simple.name\n  import kotlin.Int.Companion.MAX_VALUE\n\n  class Foo\n\n  fun main() {\n      val a = Foo()\n      val b = MAX_VALUE\n      val c = Double.MAX_VALUE\n  }\n</code></pre>\n</body>\n</html>"
        }
      ]
    }
  ]
}